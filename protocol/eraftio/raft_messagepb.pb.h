// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: raft_messagepb.proto

#ifndef PROTOBUF_raft_5fmessagepb_2eproto__INCLUDED
#define PROTOBUF_raft_5fmessagepb_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "eraftpb.pb.h"
#include "metapb.pb.h"
// @@protoc_insertion_point(includes)

namespace raft_messagepb {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_raft_5fmessagepb_2eproto();
void protobuf_AssignDesc_raft_5fmessagepb_2eproto();
void protobuf_ShutdownFile_raft_5fmessagepb_2eproto();

class AdminRequest;
class AdminResponse;
class ChangePeerRequest;
class ChangePeerResponse;
class CompactLogRequest;
class CompactLogResponse;
class DeleteRequest;
class DeleteResponse;
class GetRequest;
class GetResponse;
class KeyValue;
class PutRequest;
class PutResponse;
class RaftApplyState;
class RaftCmdRequest;
class RaftCmdResponse;
class RaftLocalState;
class RaftMessage;
class RaftRequestHeader;
class RaftResponseHeader;
class RaftTruncatedState;
class RawPutRequest;
class RegionLocalState;
class Request;
class Response;
class SplitRequest;
class SplitResponse;
class StoreIdent;
class TransferLeaderRequest;
class TransferLeaderResponse;

enum RaftMessageType {
  RaftMsgNormal = 0,
  RaftMsgClientCmd = 1,
  RaftTransferLeader = 2,
  RaftConfChange = 3,
  RaftSplitRegion = 4,
  RaftMessageType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  RaftMessageType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool RaftMessageType_IsValid(int value);
const RaftMessageType RaftMessageType_MIN = RaftMsgNormal;
const RaftMessageType RaftMessageType_MAX = RaftSplitRegion;
const int RaftMessageType_ARRAYSIZE = RaftMessageType_MAX + 1;

const ::google::protobuf::EnumDescriptor* RaftMessageType_descriptor();
inline const ::std::string& RaftMessageType_Name(RaftMessageType value) {
  return ::google::protobuf::internal::NameOfEnum(
    RaftMessageType_descriptor(), value);
}
inline bool RaftMessageType_Parse(
    const ::std::string& name, RaftMessageType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<RaftMessageType>(
    RaftMessageType_descriptor(), name, value);
}
enum PeerState {
  Normal = 0,
  Tombstone = 2,
  PeerState_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  PeerState_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool PeerState_IsValid(int value);
const PeerState PeerState_MIN = Normal;
const PeerState PeerState_MAX = Tombstone;
const int PeerState_ARRAYSIZE = PeerState_MAX + 1;

const ::google::protobuf::EnumDescriptor* PeerState_descriptor();
inline const ::std::string& PeerState_Name(PeerState value) {
  return ::google::protobuf::internal::NameOfEnum(
    PeerState_descriptor(), value);
}
inline bool PeerState_Parse(
    const ::std::string& name, PeerState* value) {
  return ::google::protobuf::internal::ParseNamedEnum<PeerState>(
    PeerState_descriptor(), name, value);
}
enum CmdType {
  Invalid = 0,
  Get = 1,
  Put = 3,
  Delete = 4,
  Snap = 5,
  CmdType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  CmdType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool CmdType_IsValid(int value);
const CmdType CmdType_MIN = Invalid;
const CmdType CmdType_MAX = Snap;
const int CmdType_ARRAYSIZE = CmdType_MAX + 1;

const ::google::protobuf::EnumDescriptor* CmdType_descriptor();
inline const ::std::string& CmdType_Name(CmdType value) {
  return ::google::protobuf::internal::NameOfEnum(
    CmdType_descriptor(), value);
}
inline bool CmdType_Parse(
    const ::std::string& name, CmdType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CmdType>(
    CmdType_descriptor(), name, value);
}
enum AdminCmdType {
  InvalidAdmin = 0,
  ChangePeer = 1,
  CompactLog = 3,
  TransferLeader = 4,
  Split = 10,
  AdminCmdType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  AdminCmdType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool AdminCmdType_IsValid(int value);
const AdminCmdType AdminCmdType_MIN = InvalidAdmin;
const AdminCmdType AdminCmdType_MAX = Split;
const int AdminCmdType_ARRAYSIZE = AdminCmdType_MAX + 1;

const ::google::protobuf::EnumDescriptor* AdminCmdType_descriptor();
inline const ::std::string& AdminCmdType_Name(AdminCmdType value) {
  return ::google::protobuf::internal::NameOfEnum(
    AdminCmdType_descriptor(), value);
}
inline bool AdminCmdType_Parse(
    const ::std::string& name, AdminCmdType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<AdminCmdType>(
    AdminCmdType_descriptor(), name, value);
}
// ===================================================================

class RawPutRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:raft_messagepb.RawPutRequest) */ {
 public:
  RawPutRequest();
  virtual ~RawPutRequest();

  RawPutRequest(const RawPutRequest& from);

  inline RawPutRequest& operator=(const RawPutRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RawPutRequest& default_instance();

  void Swap(RawPutRequest* other);

  // implements Message ----------------------------------------------

  inline RawPutRequest* New() const { return New(NULL); }

  RawPutRequest* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RawPutRequest& from);
  void MergeFrom(const RawPutRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(RawPutRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes key = 1;
  void clear_key();
  static const int kKeyFieldNumber = 1;
  const ::std::string& key() const;
  void set_key(const ::std::string& value);
  void set_key(const char* value);
  void set_key(const void* value, size_t size);
  ::std::string* mutable_key();
  ::std::string* release_key();
  void set_allocated_key(::std::string* key);

  // optional bytes value = 2;
  void clear_value();
  static const int kValueFieldNumber = 2;
  const ::std::string& value() const;
  void set_value(const ::std::string& value);
  void set_value(const char* value);
  void set_value(const void* value, size_t size);
  ::std::string* mutable_value();
  ::std::string* release_value();
  void set_allocated_value(::std::string* value);

  // optional string cf = 3;
  void clear_cf();
  static const int kCfFieldNumber = 3;
  const ::std::string& cf() const;
  void set_cf(const ::std::string& value);
  void set_cf(const char* value);
  void set_cf(const char* value, size_t size);
  ::std::string* mutable_cf();
  ::std::string* release_cf();
  void set_allocated_cf(::std::string* cf);

  // optional uint64 id = 4;
  void clear_id();
  static const int kIdFieldNumber = 4;
  ::google::protobuf::uint64 id() const;
  void set_id(::google::protobuf::uint64 value);

  // optional uint32 type = 5;
  void clear_type();
  static const int kTypeFieldNumber = 5;
  ::google::protobuf::uint32 type() const;
  void set_type(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:raft_messagepb.RawPutRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr key_;
  ::google::protobuf::internal::ArenaStringPtr value_;
  ::google::protobuf::internal::ArenaStringPtr cf_;
  ::google::protobuf::uint64 id_;
  ::google::protobuf::uint32 type_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_raft_5fmessagepb_2eproto();
  friend void protobuf_AssignDesc_raft_5fmessagepb_2eproto();
  friend void protobuf_ShutdownFile_raft_5fmessagepb_2eproto();

  void InitAsDefaultInstance();
  static RawPutRequest* default_instance_;
};
// -------------------------------------------------------------------

class RaftMessage : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:raft_messagepb.RaftMessage) */ {
 public:
  RaftMessage();
  virtual ~RaftMessage();

  RaftMessage(const RaftMessage& from);

  inline RaftMessage& operator=(const RaftMessage& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RaftMessage& default_instance();

  void Swap(RaftMessage* other);

  // implements Message ----------------------------------------------

  inline RaftMessage* New() const { return New(NULL); }

  RaftMessage* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RaftMessage& from);
  void MergeFrom(const RaftMessage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(RaftMessage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 region_id = 1;
  void clear_region_id();
  static const int kRegionIdFieldNumber = 1;
  ::google::protobuf::uint64 region_id() const;
  void set_region_id(::google::protobuf::uint64 value);

  // optional .metapb.Peer from_peer = 2;
  bool has_from_peer() const;
  void clear_from_peer();
  static const int kFromPeerFieldNumber = 2;
  const ::metapb::Peer& from_peer() const;
  ::metapb::Peer* mutable_from_peer();
  ::metapb::Peer* release_from_peer();
  void set_allocated_from_peer(::metapb::Peer* from_peer);

  // optional .metapb.Peer to_peer = 3;
  bool has_to_peer() const;
  void clear_to_peer();
  static const int kToPeerFieldNumber = 3;
  const ::metapb::Peer& to_peer() const;
  ::metapb::Peer* mutable_to_peer();
  ::metapb::Peer* release_to_peer();
  void set_allocated_to_peer(::metapb::Peer* to_peer);

  // optional .eraftpb.Message message = 4;
  bool has_message() const;
  void clear_message();
  static const int kMessageFieldNumber = 4;
  const ::eraftpb::Message& message() const;
  ::eraftpb::Message* mutable_message();
  ::eraftpb::Message* release_message();
  void set_allocated_message(::eraftpb::Message* message);

  // optional .metapb.RegionEpoch region_epoch = 5;
  bool has_region_epoch() const;
  void clear_region_epoch();
  static const int kRegionEpochFieldNumber = 5;
  const ::metapb::RegionEpoch& region_epoch() const;
  ::metapb::RegionEpoch* mutable_region_epoch();
  ::metapb::RegionEpoch* release_region_epoch();
  void set_allocated_region_epoch(::metapb::RegionEpoch* region_epoch);

  // optional bool is_tombstone = 6;
  void clear_is_tombstone();
  static const int kIsTombstoneFieldNumber = 6;
  bool is_tombstone() const;
  void set_is_tombstone(bool value);

  // optional bytes start_key = 7;
  void clear_start_key();
  static const int kStartKeyFieldNumber = 7;
  const ::std::string& start_key() const;
  void set_start_key(const ::std::string& value);
  void set_start_key(const char* value);
  void set_start_key(const void* value, size_t size);
  ::std::string* mutable_start_key();
  ::std::string* release_start_key();
  void set_allocated_start_key(::std::string* start_key);

  // optional bytes end_key = 8;
  void clear_end_key();
  static const int kEndKeyFieldNumber = 8;
  const ::std::string& end_key() const;
  void set_end_key(const ::std::string& value);
  void set_end_key(const char* value);
  void set_end_key(const void* value, size_t size);
  ::std::string* mutable_end_key();
  ::std::string* release_end_key();
  void set_allocated_end_key(::std::string* end_key);

  // optional bytes data = 9;
  void clear_data();
  static const int kDataFieldNumber = 9;
  const ::std::string& data() const;
  void set_data(const ::std::string& value);
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  ::std::string* mutable_data();
  ::std::string* release_data();
  void set_allocated_data(::std::string* data);

  // optional .raft_messagepb.RaftMessageType raft_msg_type = 10;
  void clear_raft_msg_type();
  static const int kRaftMsgTypeFieldNumber = 10;
  ::raft_messagepb::RaftMessageType raft_msg_type() const;
  void set_raft_msg_type(::raft_messagepb::RaftMessageType value);

  // @@protoc_insertion_point(class_scope:raft_messagepb.RaftMessage)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::uint64 region_id_;
  ::metapb::Peer* from_peer_;
  ::metapb::Peer* to_peer_;
  ::eraftpb::Message* message_;
  ::metapb::RegionEpoch* region_epoch_;
  ::google::protobuf::internal::ArenaStringPtr start_key_;
  ::google::protobuf::internal::ArenaStringPtr end_key_;
  bool is_tombstone_;
  int raft_msg_type_;
  ::google::protobuf::internal::ArenaStringPtr data_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_raft_5fmessagepb_2eproto();
  friend void protobuf_AssignDesc_raft_5fmessagepb_2eproto();
  friend void protobuf_ShutdownFile_raft_5fmessagepb_2eproto();

  void InitAsDefaultInstance();
  static RaftMessage* default_instance_;
};
// -------------------------------------------------------------------

class RaftLocalState : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:raft_messagepb.RaftLocalState) */ {
 public:
  RaftLocalState();
  virtual ~RaftLocalState();

  RaftLocalState(const RaftLocalState& from);

  inline RaftLocalState& operator=(const RaftLocalState& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RaftLocalState& default_instance();

  void Swap(RaftLocalState* other);

  // implements Message ----------------------------------------------

  inline RaftLocalState* New() const { return New(NULL); }

  RaftLocalState* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RaftLocalState& from);
  void MergeFrom(const RaftLocalState& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(RaftLocalState* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .eraftpb.HardState hard_state = 1;
  bool has_hard_state() const;
  void clear_hard_state();
  static const int kHardStateFieldNumber = 1;
  const ::eraftpb::HardState& hard_state() const;
  ::eraftpb::HardState* mutable_hard_state();
  ::eraftpb::HardState* release_hard_state();
  void set_allocated_hard_state(::eraftpb::HardState* hard_state);

  // optional uint64 last_index = 2;
  void clear_last_index();
  static const int kLastIndexFieldNumber = 2;
  ::google::protobuf::uint64 last_index() const;
  void set_last_index(::google::protobuf::uint64 value);

  // optional uint64 last_term = 3;
  void clear_last_term();
  static const int kLastTermFieldNumber = 3;
  ::google::protobuf::uint64 last_term() const;
  void set_last_term(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:raft_messagepb.RaftLocalState)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::eraftpb::HardState* hard_state_;
  ::google::protobuf::uint64 last_index_;
  ::google::protobuf::uint64 last_term_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_raft_5fmessagepb_2eproto();
  friend void protobuf_AssignDesc_raft_5fmessagepb_2eproto();
  friend void protobuf_ShutdownFile_raft_5fmessagepb_2eproto();

  void InitAsDefaultInstance();
  static RaftLocalState* default_instance_;
};
// -------------------------------------------------------------------

class RaftApplyState : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:raft_messagepb.RaftApplyState) */ {
 public:
  RaftApplyState();
  virtual ~RaftApplyState();

  RaftApplyState(const RaftApplyState& from);

  inline RaftApplyState& operator=(const RaftApplyState& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RaftApplyState& default_instance();

  void Swap(RaftApplyState* other);

  // implements Message ----------------------------------------------

  inline RaftApplyState* New() const { return New(NULL); }

  RaftApplyState* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RaftApplyState& from);
  void MergeFrom(const RaftApplyState& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(RaftApplyState* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 applied_index = 1;
  void clear_applied_index();
  static const int kAppliedIndexFieldNumber = 1;
  ::google::protobuf::uint64 applied_index() const;
  void set_applied_index(::google::protobuf::uint64 value);

  // optional .raft_messagepb.RaftTruncatedState truncated_state = 2;
  bool has_truncated_state() const;
  void clear_truncated_state();
  static const int kTruncatedStateFieldNumber = 2;
  const ::raft_messagepb::RaftTruncatedState& truncated_state() const;
  ::raft_messagepb::RaftTruncatedState* mutable_truncated_state();
  ::raft_messagepb::RaftTruncatedState* release_truncated_state();
  void set_allocated_truncated_state(::raft_messagepb::RaftTruncatedState* truncated_state);

  // @@protoc_insertion_point(class_scope:raft_messagepb.RaftApplyState)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::uint64 applied_index_;
  ::raft_messagepb::RaftTruncatedState* truncated_state_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_raft_5fmessagepb_2eproto();
  friend void protobuf_AssignDesc_raft_5fmessagepb_2eproto();
  friend void protobuf_ShutdownFile_raft_5fmessagepb_2eproto();

  void InitAsDefaultInstance();
  static RaftApplyState* default_instance_;
};
// -------------------------------------------------------------------

class RaftTruncatedState : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:raft_messagepb.RaftTruncatedState) */ {
 public:
  RaftTruncatedState();
  virtual ~RaftTruncatedState();

  RaftTruncatedState(const RaftTruncatedState& from);

  inline RaftTruncatedState& operator=(const RaftTruncatedState& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RaftTruncatedState& default_instance();

  void Swap(RaftTruncatedState* other);

  // implements Message ----------------------------------------------

  inline RaftTruncatedState* New() const { return New(NULL); }

  RaftTruncatedState* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RaftTruncatedState& from);
  void MergeFrom(const RaftTruncatedState& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(RaftTruncatedState* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 index = 1;
  void clear_index();
  static const int kIndexFieldNumber = 1;
  ::google::protobuf::uint64 index() const;
  void set_index(::google::protobuf::uint64 value);

  // optional uint64 term = 2;
  void clear_term();
  static const int kTermFieldNumber = 2;
  ::google::protobuf::uint64 term() const;
  void set_term(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:raft_messagepb.RaftTruncatedState)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::uint64 index_;
  ::google::protobuf::uint64 term_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_raft_5fmessagepb_2eproto();
  friend void protobuf_AssignDesc_raft_5fmessagepb_2eproto();
  friend void protobuf_ShutdownFile_raft_5fmessagepb_2eproto();

  void InitAsDefaultInstance();
  static RaftTruncatedState* default_instance_;
};
// -------------------------------------------------------------------

class RegionLocalState : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:raft_messagepb.RegionLocalState) */ {
 public:
  RegionLocalState();
  virtual ~RegionLocalState();

  RegionLocalState(const RegionLocalState& from);

  inline RegionLocalState& operator=(const RegionLocalState& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RegionLocalState& default_instance();

  void Swap(RegionLocalState* other);

  // implements Message ----------------------------------------------

  inline RegionLocalState* New() const { return New(NULL); }

  RegionLocalState* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RegionLocalState& from);
  void MergeFrom(const RegionLocalState& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(RegionLocalState* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .raft_messagepb.PeerState state = 1;
  void clear_state();
  static const int kStateFieldNumber = 1;
  ::raft_messagepb::PeerState state() const;
  void set_state(::raft_messagepb::PeerState value);

  // optional .metapb.Region region = 2;
  bool has_region() const;
  void clear_region();
  static const int kRegionFieldNumber = 2;
  const ::metapb::Region& region() const;
  ::metapb::Region* mutable_region();
  ::metapb::Region* release_region();
  void set_allocated_region(::metapb::Region* region);

  // @@protoc_insertion_point(class_scope:raft_messagepb.RegionLocalState)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::metapb::Region* region_;
  int state_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_raft_5fmessagepb_2eproto();
  friend void protobuf_AssignDesc_raft_5fmessagepb_2eproto();
  friend void protobuf_ShutdownFile_raft_5fmessagepb_2eproto();

  void InitAsDefaultInstance();
  static RegionLocalState* default_instance_;
};
// -------------------------------------------------------------------

class StoreIdent : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:raft_messagepb.StoreIdent) */ {
 public:
  StoreIdent();
  virtual ~StoreIdent();

  StoreIdent(const StoreIdent& from);

  inline StoreIdent& operator=(const StoreIdent& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const StoreIdent& default_instance();

  void Swap(StoreIdent* other);

  // implements Message ----------------------------------------------

  inline StoreIdent* New() const { return New(NULL); }

  StoreIdent* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const StoreIdent& from);
  void MergeFrom(const StoreIdent& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(StoreIdent* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 cluster_id = 1;
  void clear_cluster_id();
  static const int kClusterIdFieldNumber = 1;
  ::google::protobuf::uint64 cluster_id() const;
  void set_cluster_id(::google::protobuf::uint64 value);

  // optional uint64 store_id = 2;
  void clear_store_id();
  static const int kStoreIdFieldNumber = 2;
  ::google::protobuf::uint64 store_id() const;
  void set_store_id(::google::protobuf::uint64 value);

  // optional string addr = 3;
  void clear_addr();
  static const int kAddrFieldNumber = 3;
  const ::std::string& addr() const;
  void set_addr(const ::std::string& value);
  void set_addr(const char* value);
  void set_addr(const char* value, size_t size);
  ::std::string* mutable_addr();
  ::std::string* release_addr();
  void set_allocated_addr(::std::string* addr);

  // @@protoc_insertion_point(class_scope:raft_messagepb.StoreIdent)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::uint64 cluster_id_;
  ::google::protobuf::uint64 store_id_;
  ::google::protobuf::internal::ArenaStringPtr addr_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_raft_5fmessagepb_2eproto();
  friend void protobuf_AssignDesc_raft_5fmessagepb_2eproto();
  friend void protobuf_ShutdownFile_raft_5fmessagepb_2eproto();

  void InitAsDefaultInstance();
  static StoreIdent* default_instance_;
};
// -------------------------------------------------------------------

class KeyValue : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:raft_messagepb.KeyValue) */ {
 public:
  KeyValue();
  virtual ~KeyValue();

  KeyValue(const KeyValue& from);

  inline KeyValue& operator=(const KeyValue& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const KeyValue& default_instance();

  void Swap(KeyValue* other);

  // implements Message ----------------------------------------------

  inline KeyValue* New() const { return New(NULL); }

  KeyValue* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const KeyValue& from);
  void MergeFrom(const KeyValue& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(KeyValue* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes key = 1;
  void clear_key();
  static const int kKeyFieldNumber = 1;
  const ::std::string& key() const;
  void set_key(const ::std::string& value);
  void set_key(const char* value);
  void set_key(const void* value, size_t size);
  ::std::string* mutable_key();
  ::std::string* release_key();
  void set_allocated_key(::std::string* key);

  // optional bytes value = 2;
  void clear_value();
  static const int kValueFieldNumber = 2;
  const ::std::string& value() const;
  void set_value(const ::std::string& value);
  void set_value(const char* value);
  void set_value(const void* value, size_t size);
  ::std::string* mutable_value();
  ::std::string* release_value();
  void set_allocated_value(::std::string* value);

  // @@protoc_insertion_point(class_scope:raft_messagepb.KeyValue)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr key_;
  ::google::protobuf::internal::ArenaStringPtr value_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_raft_5fmessagepb_2eproto();
  friend void protobuf_AssignDesc_raft_5fmessagepb_2eproto();
  friend void protobuf_ShutdownFile_raft_5fmessagepb_2eproto();

  void InitAsDefaultInstance();
  static KeyValue* default_instance_;
};
// -------------------------------------------------------------------

class GetRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:raft_messagepb.GetRequest) */ {
 public:
  GetRequest();
  virtual ~GetRequest();

  GetRequest(const GetRequest& from);

  inline GetRequest& operator=(const GetRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetRequest& default_instance();

  void Swap(GetRequest* other);

  // implements Message ----------------------------------------------

  inline GetRequest* New() const { return New(NULL); }

  GetRequest* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetRequest& from);
  void MergeFrom(const GetRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GetRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string cf = 1;
  void clear_cf();
  static const int kCfFieldNumber = 1;
  const ::std::string& cf() const;
  void set_cf(const ::std::string& value);
  void set_cf(const char* value);
  void set_cf(const char* value, size_t size);
  ::std::string* mutable_cf();
  ::std::string* release_cf();
  void set_allocated_cf(::std::string* cf);

  // optional bytes key = 2;
  void clear_key();
  static const int kKeyFieldNumber = 2;
  const ::std::string& key() const;
  void set_key(const ::std::string& value);
  void set_key(const char* value);
  void set_key(const void* value, size_t size);
  ::std::string* mutable_key();
  ::std::string* release_key();
  void set_allocated_key(::std::string* key);

  // @@protoc_insertion_point(class_scope:raft_messagepb.GetRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr cf_;
  ::google::protobuf::internal::ArenaStringPtr key_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_raft_5fmessagepb_2eproto();
  friend void protobuf_AssignDesc_raft_5fmessagepb_2eproto();
  friend void protobuf_ShutdownFile_raft_5fmessagepb_2eproto();

  void InitAsDefaultInstance();
  static GetRequest* default_instance_;
};
// -------------------------------------------------------------------

class GetResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:raft_messagepb.GetResponse) */ {
 public:
  GetResponse();
  virtual ~GetResponse();

  GetResponse(const GetResponse& from);

  inline GetResponse& operator=(const GetResponse& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetResponse& default_instance();

  void Swap(GetResponse* other);

  // implements Message ----------------------------------------------

  inline GetResponse* New() const { return New(NULL); }

  GetResponse* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetResponse& from);
  void MergeFrom(const GetResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GetResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes value = 1;
  void clear_value();
  static const int kValueFieldNumber = 1;
  const ::std::string& value() const;
  void set_value(const ::std::string& value);
  void set_value(const char* value);
  void set_value(const void* value, size_t size);
  ::std::string* mutable_value();
  ::std::string* release_value();
  void set_allocated_value(::std::string* value);

  // @@protoc_insertion_point(class_scope:raft_messagepb.GetResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr value_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_raft_5fmessagepb_2eproto();
  friend void protobuf_AssignDesc_raft_5fmessagepb_2eproto();
  friend void protobuf_ShutdownFile_raft_5fmessagepb_2eproto();

  void InitAsDefaultInstance();
  static GetResponse* default_instance_;
};
// -------------------------------------------------------------------

class PutRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:raft_messagepb.PutRequest) */ {
 public:
  PutRequest();
  virtual ~PutRequest();

  PutRequest(const PutRequest& from);

  inline PutRequest& operator=(const PutRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PutRequest& default_instance();

  void Swap(PutRequest* other);

  // implements Message ----------------------------------------------

  inline PutRequest* New() const { return New(NULL); }

  PutRequest* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PutRequest& from);
  void MergeFrom(const PutRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PutRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string cf = 1;
  void clear_cf();
  static const int kCfFieldNumber = 1;
  const ::std::string& cf() const;
  void set_cf(const ::std::string& value);
  void set_cf(const char* value);
  void set_cf(const char* value, size_t size);
  ::std::string* mutable_cf();
  ::std::string* release_cf();
  void set_allocated_cf(::std::string* cf);

  // optional bytes key = 2;
  void clear_key();
  static const int kKeyFieldNumber = 2;
  const ::std::string& key() const;
  void set_key(const ::std::string& value);
  void set_key(const char* value);
  void set_key(const void* value, size_t size);
  ::std::string* mutable_key();
  ::std::string* release_key();
  void set_allocated_key(::std::string* key);

  // optional bytes value = 3;
  void clear_value();
  static const int kValueFieldNumber = 3;
  const ::std::string& value() const;
  void set_value(const ::std::string& value);
  void set_value(const char* value);
  void set_value(const void* value, size_t size);
  ::std::string* mutable_value();
  ::std::string* release_value();
  void set_allocated_value(::std::string* value);

  // @@protoc_insertion_point(class_scope:raft_messagepb.PutRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr cf_;
  ::google::protobuf::internal::ArenaStringPtr key_;
  ::google::protobuf::internal::ArenaStringPtr value_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_raft_5fmessagepb_2eproto();
  friend void protobuf_AssignDesc_raft_5fmessagepb_2eproto();
  friend void protobuf_ShutdownFile_raft_5fmessagepb_2eproto();

  void InitAsDefaultInstance();
  static PutRequest* default_instance_;
};
// -------------------------------------------------------------------

class PutResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:raft_messagepb.PutResponse) */ {
 public:
  PutResponse();
  virtual ~PutResponse();

  PutResponse(const PutResponse& from);

  inline PutResponse& operator=(const PutResponse& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PutResponse& default_instance();

  void Swap(PutResponse* other);

  // implements Message ----------------------------------------------

  inline PutResponse* New() const { return New(NULL); }

  PutResponse* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PutResponse& from);
  void MergeFrom(const PutResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PutResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:raft_messagepb.PutResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_raft_5fmessagepb_2eproto();
  friend void protobuf_AssignDesc_raft_5fmessagepb_2eproto();
  friend void protobuf_ShutdownFile_raft_5fmessagepb_2eproto();

  void InitAsDefaultInstance();
  static PutResponse* default_instance_;
};
// -------------------------------------------------------------------

class DeleteRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:raft_messagepb.DeleteRequest) */ {
 public:
  DeleteRequest();
  virtual ~DeleteRequest();

  DeleteRequest(const DeleteRequest& from);

  inline DeleteRequest& operator=(const DeleteRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DeleteRequest& default_instance();

  void Swap(DeleteRequest* other);

  // implements Message ----------------------------------------------

  inline DeleteRequest* New() const { return New(NULL); }

  DeleteRequest* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DeleteRequest& from);
  void MergeFrom(const DeleteRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DeleteRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string cf = 1;
  void clear_cf();
  static const int kCfFieldNumber = 1;
  const ::std::string& cf() const;
  void set_cf(const ::std::string& value);
  void set_cf(const char* value);
  void set_cf(const char* value, size_t size);
  ::std::string* mutable_cf();
  ::std::string* release_cf();
  void set_allocated_cf(::std::string* cf);

  // optional bytes key = 2;
  void clear_key();
  static const int kKeyFieldNumber = 2;
  const ::std::string& key() const;
  void set_key(const ::std::string& value);
  void set_key(const char* value);
  void set_key(const void* value, size_t size);
  ::std::string* mutable_key();
  ::std::string* release_key();
  void set_allocated_key(::std::string* key);

  // @@protoc_insertion_point(class_scope:raft_messagepb.DeleteRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr cf_;
  ::google::protobuf::internal::ArenaStringPtr key_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_raft_5fmessagepb_2eproto();
  friend void protobuf_AssignDesc_raft_5fmessagepb_2eproto();
  friend void protobuf_ShutdownFile_raft_5fmessagepb_2eproto();

  void InitAsDefaultInstance();
  static DeleteRequest* default_instance_;
};
// -------------------------------------------------------------------

class DeleteResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:raft_messagepb.DeleteResponse) */ {
 public:
  DeleteResponse();
  virtual ~DeleteResponse();

  DeleteResponse(const DeleteResponse& from);

  inline DeleteResponse& operator=(const DeleteResponse& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DeleteResponse& default_instance();

  void Swap(DeleteResponse* other);

  // implements Message ----------------------------------------------

  inline DeleteResponse* New() const { return New(NULL); }

  DeleteResponse* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DeleteResponse& from);
  void MergeFrom(const DeleteResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DeleteResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:raft_messagepb.DeleteResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_raft_5fmessagepb_2eproto();
  friend void protobuf_AssignDesc_raft_5fmessagepb_2eproto();
  friend void protobuf_ShutdownFile_raft_5fmessagepb_2eproto();

  void InitAsDefaultInstance();
  static DeleteResponse* default_instance_;
};
// -------------------------------------------------------------------

class Request : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:raft_messagepb.Request) */ {
 public:
  Request();
  virtual ~Request();

  Request(const Request& from);

  inline Request& operator=(const Request& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Request& default_instance();

  void Swap(Request* other);

  // implements Message ----------------------------------------------

  inline Request* New() const { return New(NULL); }

  Request* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Request& from);
  void MergeFrom(const Request& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Request* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .raft_messagepb.CmdType cmd_type = 1;
  void clear_cmd_type();
  static const int kCmdTypeFieldNumber = 1;
  ::raft_messagepb::CmdType cmd_type() const;
  void set_cmd_type(::raft_messagepb::CmdType value);

  // optional .raft_messagepb.GetRequest get = 2;
  bool has_get() const;
  void clear_get();
  static const int kGetFieldNumber = 2;
  const ::raft_messagepb::GetRequest& get() const;
  ::raft_messagepb::GetRequest* mutable_get();
  ::raft_messagepb::GetRequest* release_get();
  void set_allocated_get(::raft_messagepb::GetRequest* get);

  // optional .raft_messagepb.PutRequest put = 4;
  bool has_put() const;
  void clear_put();
  static const int kPutFieldNumber = 4;
  const ::raft_messagepb::PutRequest& put() const;
  ::raft_messagepb::PutRequest* mutable_put();
  ::raft_messagepb::PutRequest* release_put();
  void set_allocated_put(::raft_messagepb::PutRequest* put);

  // optional .raft_messagepb.DeleteRequest delete = 5;
  bool has_delete_() const;
  void clear_delete_();
  static const int kDeleteFieldNumber = 5;
  const ::raft_messagepb::DeleteRequest& delete_() const;
  ::raft_messagepb::DeleteRequest* mutable_delete_();
  ::raft_messagepb::DeleteRequest* release_delete_();
  void set_allocated_delete_(::raft_messagepb::DeleteRequest* delete_);

  // @@protoc_insertion_point(class_scope:raft_messagepb.Request)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::raft_messagepb::GetRequest* get_;
  ::raft_messagepb::PutRequest* put_;
  ::raft_messagepb::DeleteRequest* delete__;
  int cmd_type_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_raft_5fmessagepb_2eproto();
  friend void protobuf_AssignDesc_raft_5fmessagepb_2eproto();
  friend void protobuf_ShutdownFile_raft_5fmessagepb_2eproto();

  void InitAsDefaultInstance();
  static Request* default_instance_;
};
// -------------------------------------------------------------------

class Response : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:raft_messagepb.Response) */ {
 public:
  Response();
  virtual ~Response();

  Response(const Response& from);

  inline Response& operator=(const Response& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Response& default_instance();

  void Swap(Response* other);

  // implements Message ----------------------------------------------

  inline Response* New() const { return New(NULL); }

  Response* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Response& from);
  void MergeFrom(const Response& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Response* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .raft_messagepb.CmdType cmd_type = 1;
  void clear_cmd_type();
  static const int kCmdTypeFieldNumber = 1;
  ::raft_messagepb::CmdType cmd_type() const;
  void set_cmd_type(::raft_messagepb::CmdType value);

  // optional .raft_messagepb.GetResponse get = 2;
  bool has_get() const;
  void clear_get();
  static const int kGetFieldNumber = 2;
  const ::raft_messagepb::GetResponse& get() const;
  ::raft_messagepb::GetResponse* mutable_get();
  ::raft_messagepb::GetResponse* release_get();
  void set_allocated_get(::raft_messagepb::GetResponse* get);

  // optional .raft_messagepb.PutResponse put = 4;
  bool has_put() const;
  void clear_put();
  static const int kPutFieldNumber = 4;
  const ::raft_messagepb::PutResponse& put() const;
  ::raft_messagepb::PutResponse* mutable_put();
  ::raft_messagepb::PutResponse* release_put();
  void set_allocated_put(::raft_messagepb::PutResponse* put);

  // optional .raft_messagepb.DeleteResponse delete = 5;
  bool has_delete_() const;
  void clear_delete_();
  static const int kDeleteFieldNumber = 5;
  const ::raft_messagepb::DeleteResponse& delete_() const;
  ::raft_messagepb::DeleteResponse* mutable_delete_();
  ::raft_messagepb::DeleteResponse* release_delete_();
  void set_allocated_delete_(::raft_messagepb::DeleteResponse* delete_);

  // @@protoc_insertion_point(class_scope:raft_messagepb.Response)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::raft_messagepb::GetResponse* get_;
  ::raft_messagepb::PutResponse* put_;
  ::raft_messagepb::DeleteResponse* delete__;
  int cmd_type_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_raft_5fmessagepb_2eproto();
  friend void protobuf_AssignDesc_raft_5fmessagepb_2eproto();
  friend void protobuf_ShutdownFile_raft_5fmessagepb_2eproto();

  void InitAsDefaultInstance();
  static Response* default_instance_;
};
// -------------------------------------------------------------------

class ChangePeerRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:raft_messagepb.ChangePeerRequest) */ {
 public:
  ChangePeerRequest();
  virtual ~ChangePeerRequest();

  ChangePeerRequest(const ChangePeerRequest& from);

  inline ChangePeerRequest& operator=(const ChangePeerRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ChangePeerRequest& default_instance();

  void Swap(ChangePeerRequest* other);

  // implements Message ----------------------------------------------

  inline ChangePeerRequest* New() const { return New(NULL); }

  ChangePeerRequest* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ChangePeerRequest& from);
  void MergeFrom(const ChangePeerRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ChangePeerRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .eraftpb.ConfChangeType change_type = 1;
  void clear_change_type();
  static const int kChangeTypeFieldNumber = 1;
  ::eraftpb::ConfChangeType change_type() const;
  void set_change_type(::eraftpb::ConfChangeType value);

  // optional .metapb.Peer peer = 2;
  bool has_peer() const;
  void clear_peer();
  static const int kPeerFieldNumber = 2;
  const ::metapb::Peer& peer() const;
  ::metapb::Peer* mutable_peer();
  ::metapb::Peer* release_peer();
  void set_allocated_peer(::metapb::Peer* peer);

  // @@protoc_insertion_point(class_scope:raft_messagepb.ChangePeerRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::metapb::Peer* peer_;
  int change_type_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_raft_5fmessagepb_2eproto();
  friend void protobuf_AssignDesc_raft_5fmessagepb_2eproto();
  friend void protobuf_ShutdownFile_raft_5fmessagepb_2eproto();

  void InitAsDefaultInstance();
  static ChangePeerRequest* default_instance_;
};
// -------------------------------------------------------------------

class ChangePeerResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:raft_messagepb.ChangePeerResponse) */ {
 public:
  ChangePeerResponse();
  virtual ~ChangePeerResponse();

  ChangePeerResponse(const ChangePeerResponse& from);

  inline ChangePeerResponse& operator=(const ChangePeerResponse& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ChangePeerResponse& default_instance();

  void Swap(ChangePeerResponse* other);

  // implements Message ----------------------------------------------

  inline ChangePeerResponse* New() const { return New(NULL); }

  ChangePeerResponse* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ChangePeerResponse& from);
  void MergeFrom(const ChangePeerResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ChangePeerResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .metapb.Region region = 1;
  bool has_region() const;
  void clear_region();
  static const int kRegionFieldNumber = 1;
  const ::metapb::Region& region() const;
  ::metapb::Region* mutable_region();
  ::metapb::Region* release_region();
  void set_allocated_region(::metapb::Region* region);

  // @@protoc_insertion_point(class_scope:raft_messagepb.ChangePeerResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::metapb::Region* region_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_raft_5fmessagepb_2eproto();
  friend void protobuf_AssignDesc_raft_5fmessagepb_2eproto();
  friend void protobuf_ShutdownFile_raft_5fmessagepb_2eproto();

  void InitAsDefaultInstance();
  static ChangePeerResponse* default_instance_;
};
// -------------------------------------------------------------------

class SplitRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:raft_messagepb.SplitRequest) */ {
 public:
  SplitRequest();
  virtual ~SplitRequest();

  SplitRequest(const SplitRequest& from);

  inline SplitRequest& operator=(const SplitRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SplitRequest& default_instance();

  void Swap(SplitRequest* other);

  // implements Message ----------------------------------------------

  inline SplitRequest* New() const { return New(NULL); }

  SplitRequest* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SplitRequest& from);
  void MergeFrom(const SplitRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SplitRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes split_key = 1;
  void clear_split_key();
  static const int kSplitKeyFieldNumber = 1;
  const ::std::string& split_key() const;
  void set_split_key(const ::std::string& value);
  void set_split_key(const char* value);
  void set_split_key(const void* value, size_t size);
  ::std::string* mutable_split_key();
  ::std::string* release_split_key();
  void set_allocated_split_key(::std::string* split_key);

  // optional uint64 new_region_id = 2;
  void clear_new_region_id();
  static const int kNewRegionIdFieldNumber = 2;
  ::google::protobuf::uint64 new_region_id() const;
  void set_new_region_id(::google::protobuf::uint64 value);

  // repeated uint64 new_peer_ids = 3;
  int new_peer_ids_size() const;
  void clear_new_peer_ids();
  static const int kNewPeerIdsFieldNumber = 3;
  ::google::protobuf::uint64 new_peer_ids(int index) const;
  void set_new_peer_ids(int index, ::google::protobuf::uint64 value);
  void add_new_peer_ids(::google::protobuf::uint64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      new_peer_ids() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_new_peer_ids();

  // @@protoc_insertion_point(class_scope:raft_messagepb.SplitRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr split_key_;
  ::google::protobuf::uint64 new_region_id_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > new_peer_ids_;
  mutable int _new_peer_ids_cached_byte_size_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_raft_5fmessagepb_2eproto();
  friend void protobuf_AssignDesc_raft_5fmessagepb_2eproto();
  friend void protobuf_ShutdownFile_raft_5fmessagepb_2eproto();

  void InitAsDefaultInstance();
  static SplitRequest* default_instance_;
};
// -------------------------------------------------------------------

class SplitResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:raft_messagepb.SplitResponse) */ {
 public:
  SplitResponse();
  virtual ~SplitResponse();

  SplitResponse(const SplitResponse& from);

  inline SplitResponse& operator=(const SplitResponse& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SplitResponse& default_instance();

  void Swap(SplitResponse* other);

  // implements Message ----------------------------------------------

  inline SplitResponse* New() const { return New(NULL); }

  SplitResponse* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SplitResponse& from);
  void MergeFrom(const SplitResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SplitResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .metapb.Region regions = 1;
  int regions_size() const;
  void clear_regions();
  static const int kRegionsFieldNumber = 1;
  const ::metapb::Region& regions(int index) const;
  ::metapb::Region* mutable_regions(int index);
  ::metapb::Region* add_regions();
  ::google::protobuf::RepeatedPtrField< ::metapb::Region >*
      mutable_regions();
  const ::google::protobuf::RepeatedPtrField< ::metapb::Region >&
      regions() const;

  // @@protoc_insertion_point(class_scope:raft_messagepb.SplitResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::RepeatedPtrField< ::metapb::Region > regions_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_raft_5fmessagepb_2eproto();
  friend void protobuf_AssignDesc_raft_5fmessagepb_2eproto();
  friend void protobuf_ShutdownFile_raft_5fmessagepb_2eproto();

  void InitAsDefaultInstance();
  static SplitResponse* default_instance_;
};
// -------------------------------------------------------------------

class CompactLogRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:raft_messagepb.CompactLogRequest) */ {
 public:
  CompactLogRequest();
  virtual ~CompactLogRequest();

  CompactLogRequest(const CompactLogRequest& from);

  inline CompactLogRequest& operator=(const CompactLogRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CompactLogRequest& default_instance();

  void Swap(CompactLogRequest* other);

  // implements Message ----------------------------------------------

  inline CompactLogRequest* New() const { return New(NULL); }

  CompactLogRequest* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CompactLogRequest& from);
  void MergeFrom(const CompactLogRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CompactLogRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 compact_index = 1;
  void clear_compact_index();
  static const int kCompactIndexFieldNumber = 1;
  ::google::protobuf::uint64 compact_index() const;
  void set_compact_index(::google::protobuf::uint64 value);

  // optional uint64 compact_term = 2;
  void clear_compact_term();
  static const int kCompactTermFieldNumber = 2;
  ::google::protobuf::uint64 compact_term() const;
  void set_compact_term(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:raft_messagepb.CompactLogRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::uint64 compact_index_;
  ::google::protobuf::uint64 compact_term_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_raft_5fmessagepb_2eproto();
  friend void protobuf_AssignDesc_raft_5fmessagepb_2eproto();
  friend void protobuf_ShutdownFile_raft_5fmessagepb_2eproto();

  void InitAsDefaultInstance();
  static CompactLogRequest* default_instance_;
};
// -------------------------------------------------------------------

class CompactLogResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:raft_messagepb.CompactLogResponse) */ {
 public:
  CompactLogResponse();
  virtual ~CompactLogResponse();

  CompactLogResponse(const CompactLogResponse& from);

  inline CompactLogResponse& operator=(const CompactLogResponse& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CompactLogResponse& default_instance();

  void Swap(CompactLogResponse* other);

  // implements Message ----------------------------------------------

  inline CompactLogResponse* New() const { return New(NULL); }

  CompactLogResponse* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CompactLogResponse& from);
  void MergeFrom(const CompactLogResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CompactLogResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:raft_messagepb.CompactLogResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_raft_5fmessagepb_2eproto();
  friend void protobuf_AssignDesc_raft_5fmessagepb_2eproto();
  friend void protobuf_ShutdownFile_raft_5fmessagepb_2eproto();

  void InitAsDefaultInstance();
  static CompactLogResponse* default_instance_;
};
// -------------------------------------------------------------------

class TransferLeaderRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:raft_messagepb.TransferLeaderRequest) */ {
 public:
  TransferLeaderRequest();
  virtual ~TransferLeaderRequest();

  TransferLeaderRequest(const TransferLeaderRequest& from);

  inline TransferLeaderRequest& operator=(const TransferLeaderRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TransferLeaderRequest& default_instance();

  void Swap(TransferLeaderRequest* other);

  // implements Message ----------------------------------------------

  inline TransferLeaderRequest* New() const { return New(NULL); }

  TransferLeaderRequest* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TransferLeaderRequest& from);
  void MergeFrom(const TransferLeaderRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TransferLeaderRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .metapb.Peer peer = 1;
  bool has_peer() const;
  void clear_peer();
  static const int kPeerFieldNumber = 1;
  const ::metapb::Peer& peer() const;
  ::metapb::Peer* mutable_peer();
  ::metapb::Peer* release_peer();
  void set_allocated_peer(::metapb::Peer* peer);

  // @@protoc_insertion_point(class_scope:raft_messagepb.TransferLeaderRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::metapb::Peer* peer_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_raft_5fmessagepb_2eproto();
  friend void protobuf_AssignDesc_raft_5fmessagepb_2eproto();
  friend void protobuf_ShutdownFile_raft_5fmessagepb_2eproto();

  void InitAsDefaultInstance();
  static TransferLeaderRequest* default_instance_;
};
// -------------------------------------------------------------------

class TransferLeaderResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:raft_messagepb.TransferLeaderResponse) */ {
 public:
  TransferLeaderResponse();
  virtual ~TransferLeaderResponse();

  TransferLeaderResponse(const TransferLeaderResponse& from);

  inline TransferLeaderResponse& operator=(const TransferLeaderResponse& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TransferLeaderResponse& default_instance();

  void Swap(TransferLeaderResponse* other);

  // implements Message ----------------------------------------------

  inline TransferLeaderResponse* New() const { return New(NULL); }

  TransferLeaderResponse* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TransferLeaderResponse& from);
  void MergeFrom(const TransferLeaderResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TransferLeaderResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:raft_messagepb.TransferLeaderResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_raft_5fmessagepb_2eproto();
  friend void protobuf_AssignDesc_raft_5fmessagepb_2eproto();
  friend void protobuf_ShutdownFile_raft_5fmessagepb_2eproto();

  void InitAsDefaultInstance();
  static TransferLeaderResponse* default_instance_;
};
// -------------------------------------------------------------------

class AdminRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:raft_messagepb.AdminRequest) */ {
 public:
  AdminRequest();
  virtual ~AdminRequest();

  AdminRequest(const AdminRequest& from);

  inline AdminRequest& operator=(const AdminRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AdminRequest& default_instance();

  void Swap(AdminRequest* other);

  // implements Message ----------------------------------------------

  inline AdminRequest* New() const { return New(NULL); }

  AdminRequest* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AdminRequest& from);
  void MergeFrom(const AdminRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(AdminRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .raft_messagepb.AdminCmdType cmd_type = 1;
  void clear_cmd_type();
  static const int kCmdTypeFieldNumber = 1;
  ::raft_messagepb::AdminCmdType cmd_type() const;
  void set_cmd_type(::raft_messagepb::AdminCmdType value);

  // optional .raft_messagepb.ChangePeerRequest change_peer = 2;
  bool has_change_peer() const;
  void clear_change_peer();
  static const int kChangePeerFieldNumber = 2;
  const ::raft_messagepb::ChangePeerRequest& change_peer() const;
  ::raft_messagepb::ChangePeerRequest* mutable_change_peer();
  ::raft_messagepb::ChangePeerRequest* release_change_peer();
  void set_allocated_change_peer(::raft_messagepb::ChangePeerRequest* change_peer);

  // optional .raft_messagepb.CompactLogRequest compact_log = 4;
  bool has_compact_log() const;
  void clear_compact_log();
  static const int kCompactLogFieldNumber = 4;
  const ::raft_messagepb::CompactLogRequest& compact_log() const;
  ::raft_messagepb::CompactLogRequest* mutable_compact_log();
  ::raft_messagepb::CompactLogRequest* release_compact_log();
  void set_allocated_compact_log(::raft_messagepb::CompactLogRequest* compact_log);

  // optional .raft_messagepb.TransferLeaderRequest transfer_leader = 5;
  bool has_transfer_leader() const;
  void clear_transfer_leader();
  static const int kTransferLeaderFieldNumber = 5;
  const ::raft_messagepb::TransferLeaderRequest& transfer_leader() const;
  ::raft_messagepb::TransferLeaderRequest* mutable_transfer_leader();
  ::raft_messagepb::TransferLeaderRequest* release_transfer_leader();
  void set_allocated_transfer_leader(::raft_messagepb::TransferLeaderRequest* transfer_leader);

  // optional .raft_messagepb.SplitRequest split = 10;
  bool has_split() const;
  void clear_split();
  static const int kSplitFieldNumber = 10;
  const ::raft_messagepb::SplitRequest& split() const;
  ::raft_messagepb::SplitRequest* mutable_split();
  ::raft_messagepb::SplitRequest* release_split();
  void set_allocated_split(::raft_messagepb::SplitRequest* split);

  // @@protoc_insertion_point(class_scope:raft_messagepb.AdminRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::raft_messagepb::ChangePeerRequest* change_peer_;
  ::raft_messagepb::CompactLogRequest* compact_log_;
  ::raft_messagepb::TransferLeaderRequest* transfer_leader_;
  ::raft_messagepb::SplitRequest* split_;
  int cmd_type_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_raft_5fmessagepb_2eproto();
  friend void protobuf_AssignDesc_raft_5fmessagepb_2eproto();
  friend void protobuf_ShutdownFile_raft_5fmessagepb_2eproto();

  void InitAsDefaultInstance();
  static AdminRequest* default_instance_;
};
// -------------------------------------------------------------------

class AdminResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:raft_messagepb.AdminResponse) */ {
 public:
  AdminResponse();
  virtual ~AdminResponse();

  AdminResponse(const AdminResponse& from);

  inline AdminResponse& operator=(const AdminResponse& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AdminResponse& default_instance();

  void Swap(AdminResponse* other);

  // implements Message ----------------------------------------------

  inline AdminResponse* New() const { return New(NULL); }

  AdminResponse* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AdminResponse& from);
  void MergeFrom(const AdminResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(AdminResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .raft_messagepb.AdminCmdType cmd_type = 1;
  void clear_cmd_type();
  static const int kCmdTypeFieldNumber = 1;
  ::raft_messagepb::AdminCmdType cmd_type() const;
  void set_cmd_type(::raft_messagepb::AdminCmdType value);

  // optional .raft_messagepb.ChangePeerResponse change_peer = 2;
  bool has_change_peer() const;
  void clear_change_peer();
  static const int kChangePeerFieldNumber = 2;
  const ::raft_messagepb::ChangePeerResponse& change_peer() const;
  ::raft_messagepb::ChangePeerResponse* mutable_change_peer();
  ::raft_messagepb::ChangePeerResponse* release_change_peer();
  void set_allocated_change_peer(::raft_messagepb::ChangePeerResponse* change_peer);

  // optional .raft_messagepb.CompactLogResponse compact_log = 4;
  bool has_compact_log() const;
  void clear_compact_log();
  static const int kCompactLogFieldNumber = 4;
  const ::raft_messagepb::CompactLogResponse& compact_log() const;
  ::raft_messagepb::CompactLogResponse* mutable_compact_log();
  ::raft_messagepb::CompactLogResponse* release_compact_log();
  void set_allocated_compact_log(::raft_messagepb::CompactLogResponse* compact_log);

  // optional .raft_messagepb.TransferLeaderResponse transfer_leader = 5;
  bool has_transfer_leader() const;
  void clear_transfer_leader();
  static const int kTransferLeaderFieldNumber = 5;
  const ::raft_messagepb::TransferLeaderResponse& transfer_leader() const;
  ::raft_messagepb::TransferLeaderResponse* mutable_transfer_leader();
  ::raft_messagepb::TransferLeaderResponse* release_transfer_leader();
  void set_allocated_transfer_leader(::raft_messagepb::TransferLeaderResponse* transfer_leader);

  // optional .raft_messagepb.SplitResponse split = 10;
  bool has_split() const;
  void clear_split();
  static const int kSplitFieldNumber = 10;
  const ::raft_messagepb::SplitResponse& split() const;
  ::raft_messagepb::SplitResponse* mutable_split();
  ::raft_messagepb::SplitResponse* release_split();
  void set_allocated_split(::raft_messagepb::SplitResponse* split);

  // @@protoc_insertion_point(class_scope:raft_messagepb.AdminResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::raft_messagepb::ChangePeerResponse* change_peer_;
  ::raft_messagepb::CompactLogResponse* compact_log_;
  ::raft_messagepb::TransferLeaderResponse* transfer_leader_;
  ::raft_messagepb::SplitResponse* split_;
  int cmd_type_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_raft_5fmessagepb_2eproto();
  friend void protobuf_AssignDesc_raft_5fmessagepb_2eproto();
  friend void protobuf_ShutdownFile_raft_5fmessagepb_2eproto();

  void InitAsDefaultInstance();
  static AdminResponse* default_instance_;
};
// -------------------------------------------------------------------

class RaftRequestHeader : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:raft_messagepb.RaftRequestHeader) */ {
 public:
  RaftRequestHeader();
  virtual ~RaftRequestHeader();

  RaftRequestHeader(const RaftRequestHeader& from);

  inline RaftRequestHeader& operator=(const RaftRequestHeader& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RaftRequestHeader& default_instance();

  void Swap(RaftRequestHeader* other);

  // implements Message ----------------------------------------------

  inline RaftRequestHeader* New() const { return New(NULL); }

  RaftRequestHeader* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RaftRequestHeader& from);
  void MergeFrom(const RaftRequestHeader& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(RaftRequestHeader* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 region_id = 1;
  void clear_region_id();
  static const int kRegionIdFieldNumber = 1;
  ::google::protobuf::uint64 region_id() const;
  void set_region_id(::google::protobuf::uint64 value);

  // optional .metapb.Peer peer = 2;
  bool has_peer() const;
  void clear_peer();
  static const int kPeerFieldNumber = 2;
  const ::metapb::Peer& peer() const;
  ::metapb::Peer* mutable_peer();
  ::metapb::Peer* release_peer();
  void set_allocated_peer(::metapb::Peer* peer);

  // optional .metapb.RegionEpoch region_epoch = 4;
  bool has_region_epoch() const;
  void clear_region_epoch();
  static const int kRegionEpochFieldNumber = 4;
  const ::metapb::RegionEpoch& region_epoch() const;
  ::metapb::RegionEpoch* mutable_region_epoch();
  ::metapb::RegionEpoch* release_region_epoch();
  void set_allocated_region_epoch(::metapb::RegionEpoch* region_epoch);

  // optional uint64 term = 5;
  void clear_term();
  static const int kTermFieldNumber = 5;
  ::google::protobuf::uint64 term() const;
  void set_term(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:raft_messagepb.RaftRequestHeader)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::uint64 region_id_;
  ::metapb::Peer* peer_;
  ::metapb::RegionEpoch* region_epoch_;
  ::google::protobuf::uint64 term_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_raft_5fmessagepb_2eproto();
  friend void protobuf_AssignDesc_raft_5fmessagepb_2eproto();
  friend void protobuf_ShutdownFile_raft_5fmessagepb_2eproto();

  void InitAsDefaultInstance();
  static RaftRequestHeader* default_instance_;
};
// -------------------------------------------------------------------

class RaftResponseHeader : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:raft_messagepb.RaftResponseHeader) */ {
 public:
  RaftResponseHeader();
  virtual ~RaftResponseHeader();

  RaftResponseHeader(const RaftResponseHeader& from);

  inline RaftResponseHeader& operator=(const RaftResponseHeader& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RaftResponseHeader& default_instance();

  void Swap(RaftResponseHeader* other);

  // implements Message ----------------------------------------------

  inline RaftResponseHeader* New() const { return New(NULL); }

  RaftResponseHeader* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RaftResponseHeader& from);
  void MergeFrom(const RaftResponseHeader& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(RaftResponseHeader* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes uuid = 2;
  void clear_uuid();
  static const int kUuidFieldNumber = 2;
  const ::std::string& uuid() const;
  void set_uuid(const ::std::string& value);
  void set_uuid(const char* value);
  void set_uuid(const void* value, size_t size);
  ::std::string* mutable_uuid();
  ::std::string* release_uuid();
  void set_allocated_uuid(::std::string* uuid);

  // optional uint64 current_term = 3;
  void clear_current_term();
  static const int kCurrentTermFieldNumber = 3;
  ::google::protobuf::uint64 current_term() const;
  void set_current_term(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:raft_messagepb.RaftResponseHeader)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr uuid_;
  ::google::protobuf::uint64 current_term_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_raft_5fmessagepb_2eproto();
  friend void protobuf_AssignDesc_raft_5fmessagepb_2eproto();
  friend void protobuf_ShutdownFile_raft_5fmessagepb_2eproto();

  void InitAsDefaultInstance();
  static RaftResponseHeader* default_instance_;
};
// -------------------------------------------------------------------

class RaftCmdRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:raft_messagepb.RaftCmdRequest) */ {
 public:
  RaftCmdRequest();
  virtual ~RaftCmdRequest();

  RaftCmdRequest(const RaftCmdRequest& from);

  inline RaftCmdRequest& operator=(const RaftCmdRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RaftCmdRequest& default_instance();

  void Swap(RaftCmdRequest* other);

  // implements Message ----------------------------------------------

  inline RaftCmdRequest* New() const { return New(NULL); }

  RaftCmdRequest* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RaftCmdRequest& from);
  void MergeFrom(const RaftCmdRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(RaftCmdRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .raft_messagepb.RaftRequestHeader header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  const ::raft_messagepb::RaftRequestHeader& header() const;
  ::raft_messagepb::RaftRequestHeader* mutable_header();
  ::raft_messagepb::RaftRequestHeader* release_header();
  void set_allocated_header(::raft_messagepb::RaftRequestHeader* header);

  // repeated .raft_messagepb.Request requests = 2;
  int requests_size() const;
  void clear_requests();
  static const int kRequestsFieldNumber = 2;
  const ::raft_messagepb::Request& requests(int index) const;
  ::raft_messagepb::Request* mutable_requests(int index);
  ::raft_messagepb::Request* add_requests();
  ::google::protobuf::RepeatedPtrField< ::raft_messagepb::Request >*
      mutable_requests();
  const ::google::protobuf::RepeatedPtrField< ::raft_messagepb::Request >&
      requests() const;

  // @@protoc_insertion_point(class_scope:raft_messagepb.RaftCmdRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::raft_messagepb::RaftRequestHeader* header_;
  ::google::protobuf::RepeatedPtrField< ::raft_messagepb::Request > requests_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_raft_5fmessagepb_2eproto();
  friend void protobuf_AssignDesc_raft_5fmessagepb_2eproto();
  friend void protobuf_ShutdownFile_raft_5fmessagepb_2eproto();

  void InitAsDefaultInstance();
  static RaftCmdRequest* default_instance_;
};
// -------------------------------------------------------------------

class RaftCmdResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:raft_messagepb.RaftCmdResponse) */ {
 public:
  RaftCmdResponse();
  virtual ~RaftCmdResponse();

  RaftCmdResponse(const RaftCmdResponse& from);

  inline RaftCmdResponse& operator=(const RaftCmdResponse& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RaftCmdResponse& default_instance();

  void Swap(RaftCmdResponse* other);

  // implements Message ----------------------------------------------

  inline RaftCmdResponse* New() const { return New(NULL); }

  RaftCmdResponse* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RaftCmdResponse& from);
  void MergeFrom(const RaftCmdResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(RaftCmdResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .raft_messagepb.RaftResponseHeader header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  const ::raft_messagepb::RaftResponseHeader& header() const;
  ::raft_messagepb::RaftResponseHeader* mutable_header();
  ::raft_messagepb::RaftResponseHeader* release_header();
  void set_allocated_header(::raft_messagepb::RaftResponseHeader* header);

  // repeated .raft_messagepb.Response responses = 2;
  int responses_size() const;
  void clear_responses();
  static const int kResponsesFieldNumber = 2;
  const ::raft_messagepb::Response& responses(int index) const;
  ::raft_messagepb::Response* mutable_responses(int index);
  ::raft_messagepb::Response* add_responses();
  ::google::protobuf::RepeatedPtrField< ::raft_messagepb::Response >*
      mutable_responses();
  const ::google::protobuf::RepeatedPtrField< ::raft_messagepb::Response >&
      responses() const;

  // @@protoc_insertion_point(class_scope:raft_messagepb.RaftCmdResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::raft_messagepb::RaftResponseHeader* header_;
  ::google::protobuf::RepeatedPtrField< ::raft_messagepb::Response > responses_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_raft_5fmessagepb_2eproto();
  friend void protobuf_AssignDesc_raft_5fmessagepb_2eproto();
  friend void protobuf_ShutdownFile_raft_5fmessagepb_2eproto();

  void InitAsDefaultInstance();
  static RaftCmdResponse* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// RawPutRequest

// optional bytes key = 1;
inline void RawPutRequest::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RawPutRequest::key() const {
  // @@protoc_insertion_point(field_get:raft_messagepb.RawPutRequest.key)
  return key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RawPutRequest::set_key(const ::std::string& value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:raft_messagepb.RawPutRequest.key)
}
inline void RawPutRequest::set_key(const char* value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:raft_messagepb.RawPutRequest.key)
}
inline void RawPutRequest::set_key(const void* value, size_t size) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:raft_messagepb.RawPutRequest.key)
}
inline ::std::string* RawPutRequest::mutable_key() {
  
  // @@protoc_insertion_point(field_mutable:raft_messagepb.RawPutRequest.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RawPutRequest::release_key() {
  // @@protoc_insertion_point(field_release:raft_messagepb.RawPutRequest.key)
  
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RawPutRequest::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    
  } else {
    
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:raft_messagepb.RawPutRequest.key)
}

// optional bytes value = 2;
inline void RawPutRequest::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RawPutRequest::value() const {
  // @@protoc_insertion_point(field_get:raft_messagepb.RawPutRequest.value)
  return value_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RawPutRequest::set_value(const ::std::string& value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:raft_messagepb.RawPutRequest.value)
}
inline void RawPutRequest::set_value(const char* value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:raft_messagepb.RawPutRequest.value)
}
inline void RawPutRequest::set_value(const void* value, size_t size) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:raft_messagepb.RawPutRequest.value)
}
inline ::std::string* RawPutRequest::mutable_value() {
  
  // @@protoc_insertion_point(field_mutable:raft_messagepb.RawPutRequest.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RawPutRequest::release_value() {
  // @@protoc_insertion_point(field_release:raft_messagepb.RawPutRequest.value)
  
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RawPutRequest::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    
  } else {
    
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:raft_messagepb.RawPutRequest.value)
}

// optional string cf = 3;
inline void RawPutRequest::clear_cf() {
  cf_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RawPutRequest::cf() const {
  // @@protoc_insertion_point(field_get:raft_messagepb.RawPutRequest.cf)
  return cf_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RawPutRequest::set_cf(const ::std::string& value) {
  
  cf_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:raft_messagepb.RawPutRequest.cf)
}
inline void RawPutRequest::set_cf(const char* value) {
  
  cf_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:raft_messagepb.RawPutRequest.cf)
}
inline void RawPutRequest::set_cf(const char* value, size_t size) {
  
  cf_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:raft_messagepb.RawPutRequest.cf)
}
inline ::std::string* RawPutRequest::mutable_cf() {
  
  // @@protoc_insertion_point(field_mutable:raft_messagepb.RawPutRequest.cf)
  return cf_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RawPutRequest::release_cf() {
  // @@protoc_insertion_point(field_release:raft_messagepb.RawPutRequest.cf)
  
  return cf_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RawPutRequest::set_allocated_cf(::std::string* cf) {
  if (cf != NULL) {
    
  } else {
    
  }
  cf_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cf);
  // @@protoc_insertion_point(field_set_allocated:raft_messagepb.RawPutRequest.cf)
}

// optional uint64 id = 4;
inline void RawPutRequest::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 RawPutRequest::id() const {
  // @@protoc_insertion_point(field_get:raft_messagepb.RawPutRequest.id)
  return id_;
}
inline void RawPutRequest::set_id(::google::protobuf::uint64 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:raft_messagepb.RawPutRequest.id)
}

// optional uint32 type = 5;
inline void RawPutRequest::clear_type() {
  type_ = 0u;
}
inline ::google::protobuf::uint32 RawPutRequest::type() const {
  // @@protoc_insertion_point(field_get:raft_messagepb.RawPutRequest.type)
  return type_;
}
inline void RawPutRequest::set_type(::google::protobuf::uint32 value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:raft_messagepb.RawPutRequest.type)
}

// -------------------------------------------------------------------

// RaftMessage

// optional uint64 region_id = 1;
inline void RaftMessage::clear_region_id() {
  region_id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 RaftMessage::region_id() const {
  // @@protoc_insertion_point(field_get:raft_messagepb.RaftMessage.region_id)
  return region_id_;
}
inline void RaftMessage::set_region_id(::google::protobuf::uint64 value) {
  
  region_id_ = value;
  // @@protoc_insertion_point(field_set:raft_messagepb.RaftMessage.region_id)
}

// optional .metapb.Peer from_peer = 2;
inline bool RaftMessage::has_from_peer() const {
  return !_is_default_instance_ && from_peer_ != NULL;
}
inline void RaftMessage::clear_from_peer() {
  if (GetArenaNoVirtual() == NULL && from_peer_ != NULL) delete from_peer_;
  from_peer_ = NULL;
}
inline const ::metapb::Peer& RaftMessage::from_peer() const {
  // @@protoc_insertion_point(field_get:raft_messagepb.RaftMessage.from_peer)
  return from_peer_ != NULL ? *from_peer_ : *default_instance_->from_peer_;
}
inline ::metapb::Peer* RaftMessage::mutable_from_peer() {
  
  if (from_peer_ == NULL) {
    from_peer_ = new ::metapb::Peer;
  }
  // @@protoc_insertion_point(field_mutable:raft_messagepb.RaftMessage.from_peer)
  return from_peer_;
}
inline ::metapb::Peer* RaftMessage::release_from_peer() {
  // @@protoc_insertion_point(field_release:raft_messagepb.RaftMessage.from_peer)
  
  ::metapb::Peer* temp = from_peer_;
  from_peer_ = NULL;
  return temp;
}
inline void RaftMessage::set_allocated_from_peer(::metapb::Peer* from_peer) {
  delete from_peer_;
  from_peer_ = from_peer;
  if (from_peer) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:raft_messagepb.RaftMessage.from_peer)
}

// optional .metapb.Peer to_peer = 3;
inline bool RaftMessage::has_to_peer() const {
  return !_is_default_instance_ && to_peer_ != NULL;
}
inline void RaftMessage::clear_to_peer() {
  if (GetArenaNoVirtual() == NULL && to_peer_ != NULL) delete to_peer_;
  to_peer_ = NULL;
}
inline const ::metapb::Peer& RaftMessage::to_peer() const {
  // @@protoc_insertion_point(field_get:raft_messagepb.RaftMessage.to_peer)
  return to_peer_ != NULL ? *to_peer_ : *default_instance_->to_peer_;
}
inline ::metapb::Peer* RaftMessage::mutable_to_peer() {
  
  if (to_peer_ == NULL) {
    to_peer_ = new ::metapb::Peer;
  }
  // @@protoc_insertion_point(field_mutable:raft_messagepb.RaftMessage.to_peer)
  return to_peer_;
}
inline ::metapb::Peer* RaftMessage::release_to_peer() {
  // @@protoc_insertion_point(field_release:raft_messagepb.RaftMessage.to_peer)
  
  ::metapb::Peer* temp = to_peer_;
  to_peer_ = NULL;
  return temp;
}
inline void RaftMessage::set_allocated_to_peer(::metapb::Peer* to_peer) {
  delete to_peer_;
  to_peer_ = to_peer;
  if (to_peer) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:raft_messagepb.RaftMessage.to_peer)
}

// optional .eraftpb.Message message = 4;
inline bool RaftMessage::has_message() const {
  return !_is_default_instance_ && message_ != NULL;
}
inline void RaftMessage::clear_message() {
  if (GetArenaNoVirtual() == NULL && message_ != NULL) delete message_;
  message_ = NULL;
}
inline const ::eraftpb::Message& RaftMessage::message() const {
  // @@protoc_insertion_point(field_get:raft_messagepb.RaftMessage.message)
  return message_ != NULL ? *message_ : *default_instance_->message_;
}
inline ::eraftpb::Message* RaftMessage::mutable_message() {
  
  if (message_ == NULL) {
    message_ = new ::eraftpb::Message;
  }
  // @@protoc_insertion_point(field_mutable:raft_messagepb.RaftMessage.message)
  return message_;
}
inline ::eraftpb::Message* RaftMessage::release_message() {
  // @@protoc_insertion_point(field_release:raft_messagepb.RaftMessage.message)
  
  ::eraftpb::Message* temp = message_;
  message_ = NULL;
  return temp;
}
inline void RaftMessage::set_allocated_message(::eraftpb::Message* message) {
  delete message_;
  message_ = message;
  if (message) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:raft_messagepb.RaftMessage.message)
}

// optional .metapb.RegionEpoch region_epoch = 5;
inline bool RaftMessage::has_region_epoch() const {
  return !_is_default_instance_ && region_epoch_ != NULL;
}
inline void RaftMessage::clear_region_epoch() {
  if (GetArenaNoVirtual() == NULL && region_epoch_ != NULL) delete region_epoch_;
  region_epoch_ = NULL;
}
inline const ::metapb::RegionEpoch& RaftMessage::region_epoch() const {
  // @@protoc_insertion_point(field_get:raft_messagepb.RaftMessage.region_epoch)
  return region_epoch_ != NULL ? *region_epoch_ : *default_instance_->region_epoch_;
}
inline ::metapb::RegionEpoch* RaftMessage::mutable_region_epoch() {
  
  if (region_epoch_ == NULL) {
    region_epoch_ = new ::metapb::RegionEpoch;
  }
  // @@protoc_insertion_point(field_mutable:raft_messagepb.RaftMessage.region_epoch)
  return region_epoch_;
}
inline ::metapb::RegionEpoch* RaftMessage::release_region_epoch() {
  // @@protoc_insertion_point(field_release:raft_messagepb.RaftMessage.region_epoch)
  
  ::metapb::RegionEpoch* temp = region_epoch_;
  region_epoch_ = NULL;
  return temp;
}
inline void RaftMessage::set_allocated_region_epoch(::metapb::RegionEpoch* region_epoch) {
  delete region_epoch_;
  region_epoch_ = region_epoch;
  if (region_epoch) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:raft_messagepb.RaftMessage.region_epoch)
}

// optional bool is_tombstone = 6;
inline void RaftMessage::clear_is_tombstone() {
  is_tombstone_ = false;
}
inline bool RaftMessage::is_tombstone() const {
  // @@protoc_insertion_point(field_get:raft_messagepb.RaftMessage.is_tombstone)
  return is_tombstone_;
}
inline void RaftMessage::set_is_tombstone(bool value) {
  
  is_tombstone_ = value;
  // @@protoc_insertion_point(field_set:raft_messagepb.RaftMessage.is_tombstone)
}

// optional bytes start_key = 7;
inline void RaftMessage::clear_start_key() {
  start_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RaftMessage::start_key() const {
  // @@protoc_insertion_point(field_get:raft_messagepb.RaftMessage.start_key)
  return start_key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RaftMessage::set_start_key(const ::std::string& value) {
  
  start_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:raft_messagepb.RaftMessage.start_key)
}
inline void RaftMessage::set_start_key(const char* value) {
  
  start_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:raft_messagepb.RaftMessage.start_key)
}
inline void RaftMessage::set_start_key(const void* value, size_t size) {
  
  start_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:raft_messagepb.RaftMessage.start_key)
}
inline ::std::string* RaftMessage::mutable_start_key() {
  
  // @@protoc_insertion_point(field_mutable:raft_messagepb.RaftMessage.start_key)
  return start_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RaftMessage::release_start_key() {
  // @@protoc_insertion_point(field_release:raft_messagepb.RaftMessage.start_key)
  
  return start_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RaftMessage::set_allocated_start_key(::std::string* start_key) {
  if (start_key != NULL) {
    
  } else {
    
  }
  start_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), start_key);
  // @@protoc_insertion_point(field_set_allocated:raft_messagepb.RaftMessage.start_key)
}

// optional bytes end_key = 8;
inline void RaftMessage::clear_end_key() {
  end_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RaftMessage::end_key() const {
  // @@protoc_insertion_point(field_get:raft_messagepb.RaftMessage.end_key)
  return end_key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RaftMessage::set_end_key(const ::std::string& value) {
  
  end_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:raft_messagepb.RaftMessage.end_key)
}
inline void RaftMessage::set_end_key(const char* value) {
  
  end_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:raft_messagepb.RaftMessage.end_key)
}
inline void RaftMessage::set_end_key(const void* value, size_t size) {
  
  end_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:raft_messagepb.RaftMessage.end_key)
}
inline ::std::string* RaftMessage::mutable_end_key() {
  
  // @@protoc_insertion_point(field_mutable:raft_messagepb.RaftMessage.end_key)
  return end_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RaftMessage::release_end_key() {
  // @@protoc_insertion_point(field_release:raft_messagepb.RaftMessage.end_key)
  
  return end_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RaftMessage::set_allocated_end_key(::std::string* end_key) {
  if (end_key != NULL) {
    
  } else {
    
  }
  end_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), end_key);
  // @@protoc_insertion_point(field_set_allocated:raft_messagepb.RaftMessage.end_key)
}

// optional bytes data = 9;
inline void RaftMessage::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RaftMessage::data() const {
  // @@protoc_insertion_point(field_get:raft_messagepb.RaftMessage.data)
  return data_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RaftMessage::set_data(const ::std::string& value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:raft_messagepb.RaftMessage.data)
}
inline void RaftMessage::set_data(const char* value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:raft_messagepb.RaftMessage.data)
}
inline void RaftMessage::set_data(const void* value, size_t size) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:raft_messagepb.RaftMessage.data)
}
inline ::std::string* RaftMessage::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:raft_messagepb.RaftMessage.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RaftMessage::release_data() {
  // @@protoc_insertion_point(field_release:raft_messagepb.RaftMessage.data)
  
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RaftMessage::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:raft_messagepb.RaftMessage.data)
}

// optional .raft_messagepb.RaftMessageType raft_msg_type = 10;
inline void RaftMessage::clear_raft_msg_type() {
  raft_msg_type_ = 0;
}
inline ::raft_messagepb::RaftMessageType RaftMessage::raft_msg_type() const {
  // @@protoc_insertion_point(field_get:raft_messagepb.RaftMessage.raft_msg_type)
  return static_cast< ::raft_messagepb::RaftMessageType >(raft_msg_type_);
}
inline void RaftMessage::set_raft_msg_type(::raft_messagepb::RaftMessageType value) {
  
  raft_msg_type_ = value;
  // @@protoc_insertion_point(field_set:raft_messagepb.RaftMessage.raft_msg_type)
}

// -------------------------------------------------------------------

// RaftLocalState

// optional .eraftpb.HardState hard_state = 1;
inline bool RaftLocalState::has_hard_state() const {
  return !_is_default_instance_ && hard_state_ != NULL;
}
inline void RaftLocalState::clear_hard_state() {
  if (GetArenaNoVirtual() == NULL && hard_state_ != NULL) delete hard_state_;
  hard_state_ = NULL;
}
inline const ::eraftpb::HardState& RaftLocalState::hard_state() const {
  // @@protoc_insertion_point(field_get:raft_messagepb.RaftLocalState.hard_state)
  return hard_state_ != NULL ? *hard_state_ : *default_instance_->hard_state_;
}
inline ::eraftpb::HardState* RaftLocalState::mutable_hard_state() {
  
  if (hard_state_ == NULL) {
    hard_state_ = new ::eraftpb::HardState;
  }
  // @@protoc_insertion_point(field_mutable:raft_messagepb.RaftLocalState.hard_state)
  return hard_state_;
}
inline ::eraftpb::HardState* RaftLocalState::release_hard_state() {
  // @@protoc_insertion_point(field_release:raft_messagepb.RaftLocalState.hard_state)
  
  ::eraftpb::HardState* temp = hard_state_;
  hard_state_ = NULL;
  return temp;
}
inline void RaftLocalState::set_allocated_hard_state(::eraftpb::HardState* hard_state) {
  delete hard_state_;
  hard_state_ = hard_state;
  if (hard_state) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:raft_messagepb.RaftLocalState.hard_state)
}

// optional uint64 last_index = 2;
inline void RaftLocalState::clear_last_index() {
  last_index_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 RaftLocalState::last_index() const {
  // @@protoc_insertion_point(field_get:raft_messagepb.RaftLocalState.last_index)
  return last_index_;
}
inline void RaftLocalState::set_last_index(::google::protobuf::uint64 value) {
  
  last_index_ = value;
  // @@protoc_insertion_point(field_set:raft_messagepb.RaftLocalState.last_index)
}

// optional uint64 last_term = 3;
inline void RaftLocalState::clear_last_term() {
  last_term_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 RaftLocalState::last_term() const {
  // @@protoc_insertion_point(field_get:raft_messagepb.RaftLocalState.last_term)
  return last_term_;
}
inline void RaftLocalState::set_last_term(::google::protobuf::uint64 value) {
  
  last_term_ = value;
  // @@protoc_insertion_point(field_set:raft_messagepb.RaftLocalState.last_term)
}

// -------------------------------------------------------------------

// RaftApplyState

// optional uint64 applied_index = 1;
inline void RaftApplyState::clear_applied_index() {
  applied_index_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 RaftApplyState::applied_index() const {
  // @@protoc_insertion_point(field_get:raft_messagepb.RaftApplyState.applied_index)
  return applied_index_;
}
inline void RaftApplyState::set_applied_index(::google::protobuf::uint64 value) {
  
  applied_index_ = value;
  // @@protoc_insertion_point(field_set:raft_messagepb.RaftApplyState.applied_index)
}

// optional .raft_messagepb.RaftTruncatedState truncated_state = 2;
inline bool RaftApplyState::has_truncated_state() const {
  return !_is_default_instance_ && truncated_state_ != NULL;
}
inline void RaftApplyState::clear_truncated_state() {
  if (GetArenaNoVirtual() == NULL && truncated_state_ != NULL) delete truncated_state_;
  truncated_state_ = NULL;
}
inline const ::raft_messagepb::RaftTruncatedState& RaftApplyState::truncated_state() const {
  // @@protoc_insertion_point(field_get:raft_messagepb.RaftApplyState.truncated_state)
  return truncated_state_ != NULL ? *truncated_state_ : *default_instance_->truncated_state_;
}
inline ::raft_messagepb::RaftTruncatedState* RaftApplyState::mutable_truncated_state() {
  
  if (truncated_state_ == NULL) {
    truncated_state_ = new ::raft_messagepb::RaftTruncatedState;
  }
  // @@protoc_insertion_point(field_mutable:raft_messagepb.RaftApplyState.truncated_state)
  return truncated_state_;
}
inline ::raft_messagepb::RaftTruncatedState* RaftApplyState::release_truncated_state() {
  // @@protoc_insertion_point(field_release:raft_messagepb.RaftApplyState.truncated_state)
  
  ::raft_messagepb::RaftTruncatedState* temp = truncated_state_;
  truncated_state_ = NULL;
  return temp;
}
inline void RaftApplyState::set_allocated_truncated_state(::raft_messagepb::RaftTruncatedState* truncated_state) {
  delete truncated_state_;
  truncated_state_ = truncated_state;
  if (truncated_state) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:raft_messagepb.RaftApplyState.truncated_state)
}

// -------------------------------------------------------------------

// RaftTruncatedState

// optional uint64 index = 1;
inline void RaftTruncatedState::clear_index() {
  index_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 RaftTruncatedState::index() const {
  // @@protoc_insertion_point(field_get:raft_messagepb.RaftTruncatedState.index)
  return index_;
}
inline void RaftTruncatedState::set_index(::google::protobuf::uint64 value) {
  
  index_ = value;
  // @@protoc_insertion_point(field_set:raft_messagepb.RaftTruncatedState.index)
}

// optional uint64 term = 2;
inline void RaftTruncatedState::clear_term() {
  term_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 RaftTruncatedState::term() const {
  // @@protoc_insertion_point(field_get:raft_messagepb.RaftTruncatedState.term)
  return term_;
}
inline void RaftTruncatedState::set_term(::google::protobuf::uint64 value) {
  
  term_ = value;
  // @@protoc_insertion_point(field_set:raft_messagepb.RaftTruncatedState.term)
}

// -------------------------------------------------------------------

// RegionLocalState

// optional .raft_messagepb.PeerState state = 1;
inline void RegionLocalState::clear_state() {
  state_ = 0;
}
inline ::raft_messagepb::PeerState RegionLocalState::state() const {
  // @@protoc_insertion_point(field_get:raft_messagepb.RegionLocalState.state)
  return static_cast< ::raft_messagepb::PeerState >(state_);
}
inline void RegionLocalState::set_state(::raft_messagepb::PeerState value) {
  
  state_ = value;
  // @@protoc_insertion_point(field_set:raft_messagepb.RegionLocalState.state)
}

// optional .metapb.Region region = 2;
inline bool RegionLocalState::has_region() const {
  return !_is_default_instance_ && region_ != NULL;
}
inline void RegionLocalState::clear_region() {
  if (GetArenaNoVirtual() == NULL && region_ != NULL) delete region_;
  region_ = NULL;
}
inline const ::metapb::Region& RegionLocalState::region() const {
  // @@protoc_insertion_point(field_get:raft_messagepb.RegionLocalState.region)
  return region_ != NULL ? *region_ : *default_instance_->region_;
}
inline ::metapb::Region* RegionLocalState::mutable_region() {
  
  if (region_ == NULL) {
    region_ = new ::metapb::Region;
  }
  // @@protoc_insertion_point(field_mutable:raft_messagepb.RegionLocalState.region)
  return region_;
}
inline ::metapb::Region* RegionLocalState::release_region() {
  // @@protoc_insertion_point(field_release:raft_messagepb.RegionLocalState.region)
  
  ::metapb::Region* temp = region_;
  region_ = NULL;
  return temp;
}
inline void RegionLocalState::set_allocated_region(::metapb::Region* region) {
  delete region_;
  region_ = region;
  if (region) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:raft_messagepb.RegionLocalState.region)
}

// -------------------------------------------------------------------

// StoreIdent

// optional uint64 cluster_id = 1;
inline void StoreIdent::clear_cluster_id() {
  cluster_id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 StoreIdent::cluster_id() const {
  // @@protoc_insertion_point(field_get:raft_messagepb.StoreIdent.cluster_id)
  return cluster_id_;
}
inline void StoreIdent::set_cluster_id(::google::protobuf::uint64 value) {
  
  cluster_id_ = value;
  // @@protoc_insertion_point(field_set:raft_messagepb.StoreIdent.cluster_id)
}

// optional uint64 store_id = 2;
inline void StoreIdent::clear_store_id() {
  store_id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 StoreIdent::store_id() const {
  // @@protoc_insertion_point(field_get:raft_messagepb.StoreIdent.store_id)
  return store_id_;
}
inline void StoreIdent::set_store_id(::google::protobuf::uint64 value) {
  
  store_id_ = value;
  // @@protoc_insertion_point(field_set:raft_messagepb.StoreIdent.store_id)
}

// optional string addr = 3;
inline void StoreIdent::clear_addr() {
  addr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& StoreIdent::addr() const {
  // @@protoc_insertion_point(field_get:raft_messagepb.StoreIdent.addr)
  return addr_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StoreIdent::set_addr(const ::std::string& value) {
  
  addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:raft_messagepb.StoreIdent.addr)
}
inline void StoreIdent::set_addr(const char* value) {
  
  addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:raft_messagepb.StoreIdent.addr)
}
inline void StoreIdent::set_addr(const char* value, size_t size) {
  
  addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:raft_messagepb.StoreIdent.addr)
}
inline ::std::string* StoreIdent::mutable_addr() {
  
  // @@protoc_insertion_point(field_mutable:raft_messagepb.StoreIdent.addr)
  return addr_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StoreIdent::release_addr() {
  // @@protoc_insertion_point(field_release:raft_messagepb.StoreIdent.addr)
  
  return addr_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StoreIdent::set_allocated_addr(::std::string* addr) {
  if (addr != NULL) {
    
  } else {
    
  }
  addr_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), addr);
  // @@protoc_insertion_point(field_set_allocated:raft_messagepb.StoreIdent.addr)
}

// -------------------------------------------------------------------

// KeyValue

// optional bytes key = 1;
inline void KeyValue::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& KeyValue::key() const {
  // @@protoc_insertion_point(field_get:raft_messagepb.KeyValue.key)
  return key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void KeyValue::set_key(const ::std::string& value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:raft_messagepb.KeyValue.key)
}
inline void KeyValue::set_key(const char* value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:raft_messagepb.KeyValue.key)
}
inline void KeyValue::set_key(const void* value, size_t size) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:raft_messagepb.KeyValue.key)
}
inline ::std::string* KeyValue::mutable_key() {
  
  // @@protoc_insertion_point(field_mutable:raft_messagepb.KeyValue.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* KeyValue::release_key() {
  // @@protoc_insertion_point(field_release:raft_messagepb.KeyValue.key)
  
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void KeyValue::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    
  } else {
    
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:raft_messagepb.KeyValue.key)
}

// optional bytes value = 2;
inline void KeyValue::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& KeyValue::value() const {
  // @@protoc_insertion_point(field_get:raft_messagepb.KeyValue.value)
  return value_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void KeyValue::set_value(const ::std::string& value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:raft_messagepb.KeyValue.value)
}
inline void KeyValue::set_value(const char* value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:raft_messagepb.KeyValue.value)
}
inline void KeyValue::set_value(const void* value, size_t size) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:raft_messagepb.KeyValue.value)
}
inline ::std::string* KeyValue::mutable_value() {
  
  // @@protoc_insertion_point(field_mutable:raft_messagepb.KeyValue.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* KeyValue::release_value() {
  // @@protoc_insertion_point(field_release:raft_messagepb.KeyValue.value)
  
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void KeyValue::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    
  } else {
    
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:raft_messagepb.KeyValue.value)
}

// -------------------------------------------------------------------

// GetRequest

// optional string cf = 1;
inline void GetRequest::clear_cf() {
  cf_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetRequest::cf() const {
  // @@protoc_insertion_point(field_get:raft_messagepb.GetRequest.cf)
  return cf_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetRequest::set_cf(const ::std::string& value) {
  
  cf_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:raft_messagepb.GetRequest.cf)
}
inline void GetRequest::set_cf(const char* value) {
  
  cf_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:raft_messagepb.GetRequest.cf)
}
inline void GetRequest::set_cf(const char* value, size_t size) {
  
  cf_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:raft_messagepb.GetRequest.cf)
}
inline ::std::string* GetRequest::mutable_cf() {
  
  // @@protoc_insertion_point(field_mutable:raft_messagepb.GetRequest.cf)
  return cf_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetRequest::release_cf() {
  // @@protoc_insertion_point(field_release:raft_messagepb.GetRequest.cf)
  
  return cf_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetRequest::set_allocated_cf(::std::string* cf) {
  if (cf != NULL) {
    
  } else {
    
  }
  cf_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cf);
  // @@protoc_insertion_point(field_set_allocated:raft_messagepb.GetRequest.cf)
}

// optional bytes key = 2;
inline void GetRequest::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetRequest::key() const {
  // @@protoc_insertion_point(field_get:raft_messagepb.GetRequest.key)
  return key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetRequest::set_key(const ::std::string& value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:raft_messagepb.GetRequest.key)
}
inline void GetRequest::set_key(const char* value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:raft_messagepb.GetRequest.key)
}
inline void GetRequest::set_key(const void* value, size_t size) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:raft_messagepb.GetRequest.key)
}
inline ::std::string* GetRequest::mutable_key() {
  
  // @@protoc_insertion_point(field_mutable:raft_messagepb.GetRequest.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetRequest::release_key() {
  // @@protoc_insertion_point(field_release:raft_messagepb.GetRequest.key)
  
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetRequest::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    
  } else {
    
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:raft_messagepb.GetRequest.key)
}

// -------------------------------------------------------------------

// GetResponse

// optional bytes value = 1;
inline void GetResponse::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetResponse::value() const {
  // @@protoc_insertion_point(field_get:raft_messagepb.GetResponse.value)
  return value_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetResponse::set_value(const ::std::string& value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:raft_messagepb.GetResponse.value)
}
inline void GetResponse::set_value(const char* value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:raft_messagepb.GetResponse.value)
}
inline void GetResponse::set_value(const void* value, size_t size) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:raft_messagepb.GetResponse.value)
}
inline ::std::string* GetResponse::mutable_value() {
  
  // @@protoc_insertion_point(field_mutable:raft_messagepb.GetResponse.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetResponse::release_value() {
  // @@protoc_insertion_point(field_release:raft_messagepb.GetResponse.value)
  
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetResponse::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    
  } else {
    
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:raft_messagepb.GetResponse.value)
}

// -------------------------------------------------------------------

// PutRequest

// optional string cf = 1;
inline void PutRequest::clear_cf() {
  cf_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PutRequest::cf() const {
  // @@protoc_insertion_point(field_get:raft_messagepb.PutRequest.cf)
  return cf_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PutRequest::set_cf(const ::std::string& value) {
  
  cf_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:raft_messagepb.PutRequest.cf)
}
inline void PutRequest::set_cf(const char* value) {
  
  cf_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:raft_messagepb.PutRequest.cf)
}
inline void PutRequest::set_cf(const char* value, size_t size) {
  
  cf_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:raft_messagepb.PutRequest.cf)
}
inline ::std::string* PutRequest::mutable_cf() {
  
  // @@protoc_insertion_point(field_mutable:raft_messagepb.PutRequest.cf)
  return cf_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PutRequest::release_cf() {
  // @@protoc_insertion_point(field_release:raft_messagepb.PutRequest.cf)
  
  return cf_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PutRequest::set_allocated_cf(::std::string* cf) {
  if (cf != NULL) {
    
  } else {
    
  }
  cf_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cf);
  // @@protoc_insertion_point(field_set_allocated:raft_messagepb.PutRequest.cf)
}

// optional bytes key = 2;
inline void PutRequest::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PutRequest::key() const {
  // @@protoc_insertion_point(field_get:raft_messagepb.PutRequest.key)
  return key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PutRequest::set_key(const ::std::string& value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:raft_messagepb.PutRequest.key)
}
inline void PutRequest::set_key(const char* value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:raft_messagepb.PutRequest.key)
}
inline void PutRequest::set_key(const void* value, size_t size) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:raft_messagepb.PutRequest.key)
}
inline ::std::string* PutRequest::mutable_key() {
  
  // @@protoc_insertion_point(field_mutable:raft_messagepb.PutRequest.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PutRequest::release_key() {
  // @@protoc_insertion_point(field_release:raft_messagepb.PutRequest.key)
  
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PutRequest::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    
  } else {
    
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:raft_messagepb.PutRequest.key)
}

// optional bytes value = 3;
inline void PutRequest::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PutRequest::value() const {
  // @@protoc_insertion_point(field_get:raft_messagepb.PutRequest.value)
  return value_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PutRequest::set_value(const ::std::string& value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:raft_messagepb.PutRequest.value)
}
inline void PutRequest::set_value(const char* value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:raft_messagepb.PutRequest.value)
}
inline void PutRequest::set_value(const void* value, size_t size) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:raft_messagepb.PutRequest.value)
}
inline ::std::string* PutRequest::mutable_value() {
  
  // @@protoc_insertion_point(field_mutable:raft_messagepb.PutRequest.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PutRequest::release_value() {
  // @@protoc_insertion_point(field_release:raft_messagepb.PutRequest.value)
  
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PutRequest::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    
  } else {
    
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:raft_messagepb.PutRequest.value)
}

// -------------------------------------------------------------------

// PutResponse

// -------------------------------------------------------------------

// DeleteRequest

// optional string cf = 1;
inline void DeleteRequest::clear_cf() {
  cf_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DeleteRequest::cf() const {
  // @@protoc_insertion_point(field_get:raft_messagepb.DeleteRequest.cf)
  return cf_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DeleteRequest::set_cf(const ::std::string& value) {
  
  cf_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:raft_messagepb.DeleteRequest.cf)
}
inline void DeleteRequest::set_cf(const char* value) {
  
  cf_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:raft_messagepb.DeleteRequest.cf)
}
inline void DeleteRequest::set_cf(const char* value, size_t size) {
  
  cf_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:raft_messagepb.DeleteRequest.cf)
}
inline ::std::string* DeleteRequest::mutable_cf() {
  
  // @@protoc_insertion_point(field_mutable:raft_messagepb.DeleteRequest.cf)
  return cf_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DeleteRequest::release_cf() {
  // @@protoc_insertion_point(field_release:raft_messagepb.DeleteRequest.cf)
  
  return cf_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DeleteRequest::set_allocated_cf(::std::string* cf) {
  if (cf != NULL) {
    
  } else {
    
  }
  cf_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cf);
  // @@protoc_insertion_point(field_set_allocated:raft_messagepb.DeleteRequest.cf)
}

// optional bytes key = 2;
inline void DeleteRequest::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DeleteRequest::key() const {
  // @@protoc_insertion_point(field_get:raft_messagepb.DeleteRequest.key)
  return key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DeleteRequest::set_key(const ::std::string& value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:raft_messagepb.DeleteRequest.key)
}
inline void DeleteRequest::set_key(const char* value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:raft_messagepb.DeleteRequest.key)
}
inline void DeleteRequest::set_key(const void* value, size_t size) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:raft_messagepb.DeleteRequest.key)
}
inline ::std::string* DeleteRequest::mutable_key() {
  
  // @@protoc_insertion_point(field_mutable:raft_messagepb.DeleteRequest.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DeleteRequest::release_key() {
  // @@protoc_insertion_point(field_release:raft_messagepb.DeleteRequest.key)
  
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DeleteRequest::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    
  } else {
    
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:raft_messagepb.DeleteRequest.key)
}

// -------------------------------------------------------------------

// DeleteResponse

// -------------------------------------------------------------------

// Request

// optional .raft_messagepb.CmdType cmd_type = 1;
inline void Request::clear_cmd_type() {
  cmd_type_ = 0;
}
inline ::raft_messagepb::CmdType Request::cmd_type() const {
  // @@protoc_insertion_point(field_get:raft_messagepb.Request.cmd_type)
  return static_cast< ::raft_messagepb::CmdType >(cmd_type_);
}
inline void Request::set_cmd_type(::raft_messagepb::CmdType value) {
  
  cmd_type_ = value;
  // @@protoc_insertion_point(field_set:raft_messagepb.Request.cmd_type)
}

// optional .raft_messagepb.GetRequest get = 2;
inline bool Request::has_get() const {
  return !_is_default_instance_ && get_ != NULL;
}
inline void Request::clear_get() {
  if (GetArenaNoVirtual() == NULL && get_ != NULL) delete get_;
  get_ = NULL;
}
inline const ::raft_messagepb::GetRequest& Request::get() const {
  // @@protoc_insertion_point(field_get:raft_messagepb.Request.get)
  return get_ != NULL ? *get_ : *default_instance_->get_;
}
inline ::raft_messagepb::GetRequest* Request::mutable_get() {
  
  if (get_ == NULL) {
    get_ = new ::raft_messagepb::GetRequest;
  }
  // @@protoc_insertion_point(field_mutable:raft_messagepb.Request.get)
  return get_;
}
inline ::raft_messagepb::GetRequest* Request::release_get() {
  // @@protoc_insertion_point(field_release:raft_messagepb.Request.get)
  
  ::raft_messagepb::GetRequest* temp = get_;
  get_ = NULL;
  return temp;
}
inline void Request::set_allocated_get(::raft_messagepb::GetRequest* get) {
  delete get_;
  get_ = get;
  if (get) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:raft_messagepb.Request.get)
}

// optional .raft_messagepb.PutRequest put = 4;
inline bool Request::has_put() const {
  return !_is_default_instance_ && put_ != NULL;
}
inline void Request::clear_put() {
  if (GetArenaNoVirtual() == NULL && put_ != NULL) delete put_;
  put_ = NULL;
}
inline const ::raft_messagepb::PutRequest& Request::put() const {
  // @@protoc_insertion_point(field_get:raft_messagepb.Request.put)
  return put_ != NULL ? *put_ : *default_instance_->put_;
}
inline ::raft_messagepb::PutRequest* Request::mutable_put() {
  
  if (put_ == NULL) {
    put_ = new ::raft_messagepb::PutRequest;
  }
  // @@protoc_insertion_point(field_mutable:raft_messagepb.Request.put)
  return put_;
}
inline ::raft_messagepb::PutRequest* Request::release_put() {
  // @@protoc_insertion_point(field_release:raft_messagepb.Request.put)
  
  ::raft_messagepb::PutRequest* temp = put_;
  put_ = NULL;
  return temp;
}
inline void Request::set_allocated_put(::raft_messagepb::PutRequest* put) {
  delete put_;
  put_ = put;
  if (put) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:raft_messagepb.Request.put)
}

// optional .raft_messagepb.DeleteRequest delete = 5;
inline bool Request::has_delete_() const {
  return !_is_default_instance_ && delete__ != NULL;
}
inline void Request::clear_delete_() {
  if (GetArenaNoVirtual() == NULL && delete__ != NULL) delete delete__;
  delete__ = NULL;
}
inline const ::raft_messagepb::DeleteRequest& Request::delete_() const {
  // @@protoc_insertion_point(field_get:raft_messagepb.Request.delete)
  return delete__ != NULL ? *delete__ : *default_instance_->delete__;
}
inline ::raft_messagepb::DeleteRequest* Request::mutable_delete_() {
  
  if (delete__ == NULL) {
    delete__ = new ::raft_messagepb::DeleteRequest;
  }
  // @@protoc_insertion_point(field_mutable:raft_messagepb.Request.delete)
  return delete__;
}
inline ::raft_messagepb::DeleteRequest* Request::release_delete_() {
  // @@protoc_insertion_point(field_release:raft_messagepb.Request.delete)
  
  ::raft_messagepb::DeleteRequest* temp = delete__;
  delete__ = NULL;
  return temp;
}
inline void Request::set_allocated_delete_(::raft_messagepb::DeleteRequest* delete_) {
  delete delete__;
  delete__ = delete_;
  if (delete_) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:raft_messagepb.Request.delete)
}

// -------------------------------------------------------------------

// Response

// optional .raft_messagepb.CmdType cmd_type = 1;
inline void Response::clear_cmd_type() {
  cmd_type_ = 0;
}
inline ::raft_messagepb::CmdType Response::cmd_type() const {
  // @@protoc_insertion_point(field_get:raft_messagepb.Response.cmd_type)
  return static_cast< ::raft_messagepb::CmdType >(cmd_type_);
}
inline void Response::set_cmd_type(::raft_messagepb::CmdType value) {
  
  cmd_type_ = value;
  // @@protoc_insertion_point(field_set:raft_messagepb.Response.cmd_type)
}

// optional .raft_messagepb.GetResponse get = 2;
inline bool Response::has_get() const {
  return !_is_default_instance_ && get_ != NULL;
}
inline void Response::clear_get() {
  if (GetArenaNoVirtual() == NULL && get_ != NULL) delete get_;
  get_ = NULL;
}
inline const ::raft_messagepb::GetResponse& Response::get() const {
  // @@protoc_insertion_point(field_get:raft_messagepb.Response.get)
  return get_ != NULL ? *get_ : *default_instance_->get_;
}
inline ::raft_messagepb::GetResponse* Response::mutable_get() {
  
  if (get_ == NULL) {
    get_ = new ::raft_messagepb::GetResponse;
  }
  // @@protoc_insertion_point(field_mutable:raft_messagepb.Response.get)
  return get_;
}
inline ::raft_messagepb::GetResponse* Response::release_get() {
  // @@protoc_insertion_point(field_release:raft_messagepb.Response.get)
  
  ::raft_messagepb::GetResponse* temp = get_;
  get_ = NULL;
  return temp;
}
inline void Response::set_allocated_get(::raft_messagepb::GetResponse* get) {
  delete get_;
  get_ = get;
  if (get) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:raft_messagepb.Response.get)
}

// optional .raft_messagepb.PutResponse put = 4;
inline bool Response::has_put() const {
  return !_is_default_instance_ && put_ != NULL;
}
inline void Response::clear_put() {
  if (GetArenaNoVirtual() == NULL && put_ != NULL) delete put_;
  put_ = NULL;
}
inline const ::raft_messagepb::PutResponse& Response::put() const {
  // @@protoc_insertion_point(field_get:raft_messagepb.Response.put)
  return put_ != NULL ? *put_ : *default_instance_->put_;
}
inline ::raft_messagepb::PutResponse* Response::mutable_put() {
  
  if (put_ == NULL) {
    put_ = new ::raft_messagepb::PutResponse;
  }
  // @@protoc_insertion_point(field_mutable:raft_messagepb.Response.put)
  return put_;
}
inline ::raft_messagepb::PutResponse* Response::release_put() {
  // @@protoc_insertion_point(field_release:raft_messagepb.Response.put)
  
  ::raft_messagepb::PutResponse* temp = put_;
  put_ = NULL;
  return temp;
}
inline void Response::set_allocated_put(::raft_messagepb::PutResponse* put) {
  delete put_;
  put_ = put;
  if (put) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:raft_messagepb.Response.put)
}

// optional .raft_messagepb.DeleteResponse delete = 5;
inline bool Response::has_delete_() const {
  return !_is_default_instance_ && delete__ != NULL;
}
inline void Response::clear_delete_() {
  if (GetArenaNoVirtual() == NULL && delete__ != NULL) delete delete__;
  delete__ = NULL;
}
inline const ::raft_messagepb::DeleteResponse& Response::delete_() const {
  // @@protoc_insertion_point(field_get:raft_messagepb.Response.delete)
  return delete__ != NULL ? *delete__ : *default_instance_->delete__;
}
inline ::raft_messagepb::DeleteResponse* Response::mutable_delete_() {
  
  if (delete__ == NULL) {
    delete__ = new ::raft_messagepb::DeleteResponse;
  }
  // @@protoc_insertion_point(field_mutable:raft_messagepb.Response.delete)
  return delete__;
}
inline ::raft_messagepb::DeleteResponse* Response::release_delete_() {
  // @@protoc_insertion_point(field_release:raft_messagepb.Response.delete)
  
  ::raft_messagepb::DeleteResponse* temp = delete__;
  delete__ = NULL;
  return temp;
}
inline void Response::set_allocated_delete_(::raft_messagepb::DeleteResponse* delete_) {
  delete delete__;
  delete__ = delete_;
  if (delete_) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:raft_messagepb.Response.delete)
}

// -------------------------------------------------------------------

// ChangePeerRequest

// optional .eraftpb.ConfChangeType change_type = 1;
inline void ChangePeerRequest::clear_change_type() {
  change_type_ = 0;
}
inline ::eraftpb::ConfChangeType ChangePeerRequest::change_type() const {
  // @@protoc_insertion_point(field_get:raft_messagepb.ChangePeerRequest.change_type)
  return static_cast< ::eraftpb::ConfChangeType >(change_type_);
}
inline void ChangePeerRequest::set_change_type(::eraftpb::ConfChangeType value) {
  
  change_type_ = value;
  // @@protoc_insertion_point(field_set:raft_messagepb.ChangePeerRequest.change_type)
}

// optional .metapb.Peer peer = 2;
inline bool ChangePeerRequest::has_peer() const {
  return !_is_default_instance_ && peer_ != NULL;
}
inline void ChangePeerRequest::clear_peer() {
  if (GetArenaNoVirtual() == NULL && peer_ != NULL) delete peer_;
  peer_ = NULL;
}
inline const ::metapb::Peer& ChangePeerRequest::peer() const {
  // @@protoc_insertion_point(field_get:raft_messagepb.ChangePeerRequest.peer)
  return peer_ != NULL ? *peer_ : *default_instance_->peer_;
}
inline ::metapb::Peer* ChangePeerRequest::mutable_peer() {
  
  if (peer_ == NULL) {
    peer_ = new ::metapb::Peer;
  }
  // @@protoc_insertion_point(field_mutable:raft_messagepb.ChangePeerRequest.peer)
  return peer_;
}
inline ::metapb::Peer* ChangePeerRequest::release_peer() {
  // @@protoc_insertion_point(field_release:raft_messagepb.ChangePeerRequest.peer)
  
  ::metapb::Peer* temp = peer_;
  peer_ = NULL;
  return temp;
}
inline void ChangePeerRequest::set_allocated_peer(::metapb::Peer* peer) {
  delete peer_;
  peer_ = peer;
  if (peer) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:raft_messagepb.ChangePeerRequest.peer)
}

// -------------------------------------------------------------------

// ChangePeerResponse

// optional .metapb.Region region = 1;
inline bool ChangePeerResponse::has_region() const {
  return !_is_default_instance_ && region_ != NULL;
}
inline void ChangePeerResponse::clear_region() {
  if (GetArenaNoVirtual() == NULL && region_ != NULL) delete region_;
  region_ = NULL;
}
inline const ::metapb::Region& ChangePeerResponse::region() const {
  // @@protoc_insertion_point(field_get:raft_messagepb.ChangePeerResponse.region)
  return region_ != NULL ? *region_ : *default_instance_->region_;
}
inline ::metapb::Region* ChangePeerResponse::mutable_region() {
  
  if (region_ == NULL) {
    region_ = new ::metapb::Region;
  }
  // @@protoc_insertion_point(field_mutable:raft_messagepb.ChangePeerResponse.region)
  return region_;
}
inline ::metapb::Region* ChangePeerResponse::release_region() {
  // @@protoc_insertion_point(field_release:raft_messagepb.ChangePeerResponse.region)
  
  ::metapb::Region* temp = region_;
  region_ = NULL;
  return temp;
}
inline void ChangePeerResponse::set_allocated_region(::metapb::Region* region) {
  delete region_;
  region_ = region;
  if (region) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:raft_messagepb.ChangePeerResponse.region)
}

// -------------------------------------------------------------------

// SplitRequest

// optional bytes split_key = 1;
inline void SplitRequest::clear_split_key() {
  split_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SplitRequest::split_key() const {
  // @@protoc_insertion_point(field_get:raft_messagepb.SplitRequest.split_key)
  return split_key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SplitRequest::set_split_key(const ::std::string& value) {
  
  split_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:raft_messagepb.SplitRequest.split_key)
}
inline void SplitRequest::set_split_key(const char* value) {
  
  split_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:raft_messagepb.SplitRequest.split_key)
}
inline void SplitRequest::set_split_key(const void* value, size_t size) {
  
  split_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:raft_messagepb.SplitRequest.split_key)
}
inline ::std::string* SplitRequest::mutable_split_key() {
  
  // @@protoc_insertion_point(field_mutable:raft_messagepb.SplitRequest.split_key)
  return split_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SplitRequest::release_split_key() {
  // @@protoc_insertion_point(field_release:raft_messagepb.SplitRequest.split_key)
  
  return split_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SplitRequest::set_allocated_split_key(::std::string* split_key) {
  if (split_key != NULL) {
    
  } else {
    
  }
  split_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), split_key);
  // @@protoc_insertion_point(field_set_allocated:raft_messagepb.SplitRequest.split_key)
}

// optional uint64 new_region_id = 2;
inline void SplitRequest::clear_new_region_id() {
  new_region_id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 SplitRequest::new_region_id() const {
  // @@protoc_insertion_point(field_get:raft_messagepb.SplitRequest.new_region_id)
  return new_region_id_;
}
inline void SplitRequest::set_new_region_id(::google::protobuf::uint64 value) {
  
  new_region_id_ = value;
  // @@protoc_insertion_point(field_set:raft_messagepb.SplitRequest.new_region_id)
}

// repeated uint64 new_peer_ids = 3;
inline int SplitRequest::new_peer_ids_size() const {
  return new_peer_ids_.size();
}
inline void SplitRequest::clear_new_peer_ids() {
  new_peer_ids_.Clear();
}
inline ::google::protobuf::uint64 SplitRequest::new_peer_ids(int index) const {
  // @@protoc_insertion_point(field_get:raft_messagepb.SplitRequest.new_peer_ids)
  return new_peer_ids_.Get(index);
}
inline void SplitRequest::set_new_peer_ids(int index, ::google::protobuf::uint64 value) {
  new_peer_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:raft_messagepb.SplitRequest.new_peer_ids)
}
inline void SplitRequest::add_new_peer_ids(::google::protobuf::uint64 value) {
  new_peer_ids_.Add(value);
  // @@protoc_insertion_point(field_add:raft_messagepb.SplitRequest.new_peer_ids)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
SplitRequest::new_peer_ids() const {
  // @@protoc_insertion_point(field_list:raft_messagepb.SplitRequest.new_peer_ids)
  return new_peer_ids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
SplitRequest::mutable_new_peer_ids() {
  // @@protoc_insertion_point(field_mutable_list:raft_messagepb.SplitRequest.new_peer_ids)
  return &new_peer_ids_;
}

// -------------------------------------------------------------------

// SplitResponse

// repeated .metapb.Region regions = 1;
inline int SplitResponse::regions_size() const {
  return regions_.size();
}
inline void SplitResponse::clear_regions() {
  regions_.Clear();
}
inline const ::metapb::Region& SplitResponse::regions(int index) const {
  // @@protoc_insertion_point(field_get:raft_messagepb.SplitResponse.regions)
  return regions_.Get(index);
}
inline ::metapb::Region* SplitResponse::mutable_regions(int index) {
  // @@protoc_insertion_point(field_mutable:raft_messagepb.SplitResponse.regions)
  return regions_.Mutable(index);
}
inline ::metapb::Region* SplitResponse::add_regions() {
  // @@protoc_insertion_point(field_add:raft_messagepb.SplitResponse.regions)
  return regions_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::metapb::Region >*
SplitResponse::mutable_regions() {
  // @@protoc_insertion_point(field_mutable_list:raft_messagepb.SplitResponse.regions)
  return &regions_;
}
inline const ::google::protobuf::RepeatedPtrField< ::metapb::Region >&
SplitResponse::regions() const {
  // @@protoc_insertion_point(field_list:raft_messagepb.SplitResponse.regions)
  return regions_;
}

// -------------------------------------------------------------------

// CompactLogRequest

// optional uint64 compact_index = 1;
inline void CompactLogRequest::clear_compact_index() {
  compact_index_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 CompactLogRequest::compact_index() const {
  // @@protoc_insertion_point(field_get:raft_messagepb.CompactLogRequest.compact_index)
  return compact_index_;
}
inline void CompactLogRequest::set_compact_index(::google::protobuf::uint64 value) {
  
  compact_index_ = value;
  // @@protoc_insertion_point(field_set:raft_messagepb.CompactLogRequest.compact_index)
}

// optional uint64 compact_term = 2;
inline void CompactLogRequest::clear_compact_term() {
  compact_term_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 CompactLogRequest::compact_term() const {
  // @@protoc_insertion_point(field_get:raft_messagepb.CompactLogRequest.compact_term)
  return compact_term_;
}
inline void CompactLogRequest::set_compact_term(::google::protobuf::uint64 value) {
  
  compact_term_ = value;
  // @@protoc_insertion_point(field_set:raft_messagepb.CompactLogRequest.compact_term)
}

// -------------------------------------------------------------------

// CompactLogResponse

// -------------------------------------------------------------------

// TransferLeaderRequest

// optional .metapb.Peer peer = 1;
inline bool TransferLeaderRequest::has_peer() const {
  return !_is_default_instance_ && peer_ != NULL;
}
inline void TransferLeaderRequest::clear_peer() {
  if (GetArenaNoVirtual() == NULL && peer_ != NULL) delete peer_;
  peer_ = NULL;
}
inline const ::metapb::Peer& TransferLeaderRequest::peer() const {
  // @@protoc_insertion_point(field_get:raft_messagepb.TransferLeaderRequest.peer)
  return peer_ != NULL ? *peer_ : *default_instance_->peer_;
}
inline ::metapb::Peer* TransferLeaderRequest::mutable_peer() {
  
  if (peer_ == NULL) {
    peer_ = new ::metapb::Peer;
  }
  // @@protoc_insertion_point(field_mutable:raft_messagepb.TransferLeaderRequest.peer)
  return peer_;
}
inline ::metapb::Peer* TransferLeaderRequest::release_peer() {
  // @@protoc_insertion_point(field_release:raft_messagepb.TransferLeaderRequest.peer)
  
  ::metapb::Peer* temp = peer_;
  peer_ = NULL;
  return temp;
}
inline void TransferLeaderRequest::set_allocated_peer(::metapb::Peer* peer) {
  delete peer_;
  peer_ = peer;
  if (peer) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:raft_messagepb.TransferLeaderRequest.peer)
}

// -------------------------------------------------------------------

// TransferLeaderResponse

// -------------------------------------------------------------------

// AdminRequest

// optional .raft_messagepb.AdminCmdType cmd_type = 1;
inline void AdminRequest::clear_cmd_type() {
  cmd_type_ = 0;
}
inline ::raft_messagepb::AdminCmdType AdminRequest::cmd_type() const {
  // @@protoc_insertion_point(field_get:raft_messagepb.AdminRequest.cmd_type)
  return static_cast< ::raft_messagepb::AdminCmdType >(cmd_type_);
}
inline void AdminRequest::set_cmd_type(::raft_messagepb::AdminCmdType value) {
  
  cmd_type_ = value;
  // @@protoc_insertion_point(field_set:raft_messagepb.AdminRequest.cmd_type)
}

// optional .raft_messagepb.ChangePeerRequest change_peer = 2;
inline bool AdminRequest::has_change_peer() const {
  return !_is_default_instance_ && change_peer_ != NULL;
}
inline void AdminRequest::clear_change_peer() {
  if (GetArenaNoVirtual() == NULL && change_peer_ != NULL) delete change_peer_;
  change_peer_ = NULL;
}
inline const ::raft_messagepb::ChangePeerRequest& AdminRequest::change_peer() const {
  // @@protoc_insertion_point(field_get:raft_messagepb.AdminRequest.change_peer)
  return change_peer_ != NULL ? *change_peer_ : *default_instance_->change_peer_;
}
inline ::raft_messagepb::ChangePeerRequest* AdminRequest::mutable_change_peer() {
  
  if (change_peer_ == NULL) {
    change_peer_ = new ::raft_messagepb::ChangePeerRequest;
  }
  // @@protoc_insertion_point(field_mutable:raft_messagepb.AdminRequest.change_peer)
  return change_peer_;
}
inline ::raft_messagepb::ChangePeerRequest* AdminRequest::release_change_peer() {
  // @@protoc_insertion_point(field_release:raft_messagepb.AdminRequest.change_peer)
  
  ::raft_messagepb::ChangePeerRequest* temp = change_peer_;
  change_peer_ = NULL;
  return temp;
}
inline void AdminRequest::set_allocated_change_peer(::raft_messagepb::ChangePeerRequest* change_peer) {
  delete change_peer_;
  change_peer_ = change_peer;
  if (change_peer) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:raft_messagepb.AdminRequest.change_peer)
}

// optional .raft_messagepb.CompactLogRequest compact_log = 4;
inline bool AdminRequest::has_compact_log() const {
  return !_is_default_instance_ && compact_log_ != NULL;
}
inline void AdminRequest::clear_compact_log() {
  if (GetArenaNoVirtual() == NULL && compact_log_ != NULL) delete compact_log_;
  compact_log_ = NULL;
}
inline const ::raft_messagepb::CompactLogRequest& AdminRequest::compact_log() const {
  // @@protoc_insertion_point(field_get:raft_messagepb.AdminRequest.compact_log)
  return compact_log_ != NULL ? *compact_log_ : *default_instance_->compact_log_;
}
inline ::raft_messagepb::CompactLogRequest* AdminRequest::mutable_compact_log() {
  
  if (compact_log_ == NULL) {
    compact_log_ = new ::raft_messagepb::CompactLogRequest;
  }
  // @@protoc_insertion_point(field_mutable:raft_messagepb.AdminRequest.compact_log)
  return compact_log_;
}
inline ::raft_messagepb::CompactLogRequest* AdminRequest::release_compact_log() {
  // @@protoc_insertion_point(field_release:raft_messagepb.AdminRequest.compact_log)
  
  ::raft_messagepb::CompactLogRequest* temp = compact_log_;
  compact_log_ = NULL;
  return temp;
}
inline void AdminRequest::set_allocated_compact_log(::raft_messagepb::CompactLogRequest* compact_log) {
  delete compact_log_;
  compact_log_ = compact_log;
  if (compact_log) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:raft_messagepb.AdminRequest.compact_log)
}

// optional .raft_messagepb.TransferLeaderRequest transfer_leader = 5;
inline bool AdminRequest::has_transfer_leader() const {
  return !_is_default_instance_ && transfer_leader_ != NULL;
}
inline void AdminRequest::clear_transfer_leader() {
  if (GetArenaNoVirtual() == NULL && transfer_leader_ != NULL) delete transfer_leader_;
  transfer_leader_ = NULL;
}
inline const ::raft_messagepb::TransferLeaderRequest& AdminRequest::transfer_leader() const {
  // @@protoc_insertion_point(field_get:raft_messagepb.AdminRequest.transfer_leader)
  return transfer_leader_ != NULL ? *transfer_leader_ : *default_instance_->transfer_leader_;
}
inline ::raft_messagepb::TransferLeaderRequest* AdminRequest::mutable_transfer_leader() {
  
  if (transfer_leader_ == NULL) {
    transfer_leader_ = new ::raft_messagepb::TransferLeaderRequest;
  }
  // @@protoc_insertion_point(field_mutable:raft_messagepb.AdminRequest.transfer_leader)
  return transfer_leader_;
}
inline ::raft_messagepb::TransferLeaderRequest* AdminRequest::release_transfer_leader() {
  // @@protoc_insertion_point(field_release:raft_messagepb.AdminRequest.transfer_leader)
  
  ::raft_messagepb::TransferLeaderRequest* temp = transfer_leader_;
  transfer_leader_ = NULL;
  return temp;
}
inline void AdminRequest::set_allocated_transfer_leader(::raft_messagepb::TransferLeaderRequest* transfer_leader) {
  delete transfer_leader_;
  transfer_leader_ = transfer_leader;
  if (transfer_leader) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:raft_messagepb.AdminRequest.transfer_leader)
}

// optional .raft_messagepb.SplitRequest split = 10;
inline bool AdminRequest::has_split() const {
  return !_is_default_instance_ && split_ != NULL;
}
inline void AdminRequest::clear_split() {
  if (GetArenaNoVirtual() == NULL && split_ != NULL) delete split_;
  split_ = NULL;
}
inline const ::raft_messagepb::SplitRequest& AdminRequest::split() const {
  // @@protoc_insertion_point(field_get:raft_messagepb.AdminRequest.split)
  return split_ != NULL ? *split_ : *default_instance_->split_;
}
inline ::raft_messagepb::SplitRequest* AdminRequest::mutable_split() {
  
  if (split_ == NULL) {
    split_ = new ::raft_messagepb::SplitRequest;
  }
  // @@protoc_insertion_point(field_mutable:raft_messagepb.AdminRequest.split)
  return split_;
}
inline ::raft_messagepb::SplitRequest* AdminRequest::release_split() {
  // @@protoc_insertion_point(field_release:raft_messagepb.AdminRequest.split)
  
  ::raft_messagepb::SplitRequest* temp = split_;
  split_ = NULL;
  return temp;
}
inline void AdminRequest::set_allocated_split(::raft_messagepb::SplitRequest* split) {
  delete split_;
  split_ = split;
  if (split) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:raft_messagepb.AdminRequest.split)
}

// -------------------------------------------------------------------

// AdminResponse

// optional .raft_messagepb.AdminCmdType cmd_type = 1;
inline void AdminResponse::clear_cmd_type() {
  cmd_type_ = 0;
}
inline ::raft_messagepb::AdminCmdType AdminResponse::cmd_type() const {
  // @@protoc_insertion_point(field_get:raft_messagepb.AdminResponse.cmd_type)
  return static_cast< ::raft_messagepb::AdminCmdType >(cmd_type_);
}
inline void AdminResponse::set_cmd_type(::raft_messagepb::AdminCmdType value) {
  
  cmd_type_ = value;
  // @@protoc_insertion_point(field_set:raft_messagepb.AdminResponse.cmd_type)
}

// optional .raft_messagepb.ChangePeerResponse change_peer = 2;
inline bool AdminResponse::has_change_peer() const {
  return !_is_default_instance_ && change_peer_ != NULL;
}
inline void AdminResponse::clear_change_peer() {
  if (GetArenaNoVirtual() == NULL && change_peer_ != NULL) delete change_peer_;
  change_peer_ = NULL;
}
inline const ::raft_messagepb::ChangePeerResponse& AdminResponse::change_peer() const {
  // @@protoc_insertion_point(field_get:raft_messagepb.AdminResponse.change_peer)
  return change_peer_ != NULL ? *change_peer_ : *default_instance_->change_peer_;
}
inline ::raft_messagepb::ChangePeerResponse* AdminResponse::mutable_change_peer() {
  
  if (change_peer_ == NULL) {
    change_peer_ = new ::raft_messagepb::ChangePeerResponse;
  }
  // @@protoc_insertion_point(field_mutable:raft_messagepb.AdminResponse.change_peer)
  return change_peer_;
}
inline ::raft_messagepb::ChangePeerResponse* AdminResponse::release_change_peer() {
  // @@protoc_insertion_point(field_release:raft_messagepb.AdminResponse.change_peer)
  
  ::raft_messagepb::ChangePeerResponse* temp = change_peer_;
  change_peer_ = NULL;
  return temp;
}
inline void AdminResponse::set_allocated_change_peer(::raft_messagepb::ChangePeerResponse* change_peer) {
  delete change_peer_;
  change_peer_ = change_peer;
  if (change_peer) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:raft_messagepb.AdminResponse.change_peer)
}

// optional .raft_messagepb.CompactLogResponse compact_log = 4;
inline bool AdminResponse::has_compact_log() const {
  return !_is_default_instance_ && compact_log_ != NULL;
}
inline void AdminResponse::clear_compact_log() {
  if (GetArenaNoVirtual() == NULL && compact_log_ != NULL) delete compact_log_;
  compact_log_ = NULL;
}
inline const ::raft_messagepb::CompactLogResponse& AdminResponse::compact_log() const {
  // @@protoc_insertion_point(field_get:raft_messagepb.AdminResponse.compact_log)
  return compact_log_ != NULL ? *compact_log_ : *default_instance_->compact_log_;
}
inline ::raft_messagepb::CompactLogResponse* AdminResponse::mutable_compact_log() {
  
  if (compact_log_ == NULL) {
    compact_log_ = new ::raft_messagepb::CompactLogResponse;
  }
  // @@protoc_insertion_point(field_mutable:raft_messagepb.AdminResponse.compact_log)
  return compact_log_;
}
inline ::raft_messagepb::CompactLogResponse* AdminResponse::release_compact_log() {
  // @@protoc_insertion_point(field_release:raft_messagepb.AdminResponse.compact_log)
  
  ::raft_messagepb::CompactLogResponse* temp = compact_log_;
  compact_log_ = NULL;
  return temp;
}
inline void AdminResponse::set_allocated_compact_log(::raft_messagepb::CompactLogResponse* compact_log) {
  delete compact_log_;
  compact_log_ = compact_log;
  if (compact_log) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:raft_messagepb.AdminResponse.compact_log)
}

// optional .raft_messagepb.TransferLeaderResponse transfer_leader = 5;
inline bool AdminResponse::has_transfer_leader() const {
  return !_is_default_instance_ && transfer_leader_ != NULL;
}
inline void AdminResponse::clear_transfer_leader() {
  if (GetArenaNoVirtual() == NULL && transfer_leader_ != NULL) delete transfer_leader_;
  transfer_leader_ = NULL;
}
inline const ::raft_messagepb::TransferLeaderResponse& AdminResponse::transfer_leader() const {
  // @@protoc_insertion_point(field_get:raft_messagepb.AdminResponse.transfer_leader)
  return transfer_leader_ != NULL ? *transfer_leader_ : *default_instance_->transfer_leader_;
}
inline ::raft_messagepb::TransferLeaderResponse* AdminResponse::mutable_transfer_leader() {
  
  if (transfer_leader_ == NULL) {
    transfer_leader_ = new ::raft_messagepb::TransferLeaderResponse;
  }
  // @@protoc_insertion_point(field_mutable:raft_messagepb.AdminResponse.transfer_leader)
  return transfer_leader_;
}
inline ::raft_messagepb::TransferLeaderResponse* AdminResponse::release_transfer_leader() {
  // @@protoc_insertion_point(field_release:raft_messagepb.AdminResponse.transfer_leader)
  
  ::raft_messagepb::TransferLeaderResponse* temp = transfer_leader_;
  transfer_leader_ = NULL;
  return temp;
}
inline void AdminResponse::set_allocated_transfer_leader(::raft_messagepb::TransferLeaderResponse* transfer_leader) {
  delete transfer_leader_;
  transfer_leader_ = transfer_leader;
  if (transfer_leader) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:raft_messagepb.AdminResponse.transfer_leader)
}

// optional .raft_messagepb.SplitResponse split = 10;
inline bool AdminResponse::has_split() const {
  return !_is_default_instance_ && split_ != NULL;
}
inline void AdminResponse::clear_split() {
  if (GetArenaNoVirtual() == NULL && split_ != NULL) delete split_;
  split_ = NULL;
}
inline const ::raft_messagepb::SplitResponse& AdminResponse::split() const {
  // @@protoc_insertion_point(field_get:raft_messagepb.AdminResponse.split)
  return split_ != NULL ? *split_ : *default_instance_->split_;
}
inline ::raft_messagepb::SplitResponse* AdminResponse::mutable_split() {
  
  if (split_ == NULL) {
    split_ = new ::raft_messagepb::SplitResponse;
  }
  // @@protoc_insertion_point(field_mutable:raft_messagepb.AdminResponse.split)
  return split_;
}
inline ::raft_messagepb::SplitResponse* AdminResponse::release_split() {
  // @@protoc_insertion_point(field_release:raft_messagepb.AdminResponse.split)
  
  ::raft_messagepb::SplitResponse* temp = split_;
  split_ = NULL;
  return temp;
}
inline void AdminResponse::set_allocated_split(::raft_messagepb::SplitResponse* split) {
  delete split_;
  split_ = split;
  if (split) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:raft_messagepb.AdminResponse.split)
}

// -------------------------------------------------------------------

// RaftRequestHeader

// optional uint64 region_id = 1;
inline void RaftRequestHeader::clear_region_id() {
  region_id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 RaftRequestHeader::region_id() const {
  // @@protoc_insertion_point(field_get:raft_messagepb.RaftRequestHeader.region_id)
  return region_id_;
}
inline void RaftRequestHeader::set_region_id(::google::protobuf::uint64 value) {
  
  region_id_ = value;
  // @@protoc_insertion_point(field_set:raft_messagepb.RaftRequestHeader.region_id)
}

// optional .metapb.Peer peer = 2;
inline bool RaftRequestHeader::has_peer() const {
  return !_is_default_instance_ && peer_ != NULL;
}
inline void RaftRequestHeader::clear_peer() {
  if (GetArenaNoVirtual() == NULL && peer_ != NULL) delete peer_;
  peer_ = NULL;
}
inline const ::metapb::Peer& RaftRequestHeader::peer() const {
  // @@protoc_insertion_point(field_get:raft_messagepb.RaftRequestHeader.peer)
  return peer_ != NULL ? *peer_ : *default_instance_->peer_;
}
inline ::metapb::Peer* RaftRequestHeader::mutable_peer() {
  
  if (peer_ == NULL) {
    peer_ = new ::metapb::Peer;
  }
  // @@protoc_insertion_point(field_mutable:raft_messagepb.RaftRequestHeader.peer)
  return peer_;
}
inline ::metapb::Peer* RaftRequestHeader::release_peer() {
  // @@protoc_insertion_point(field_release:raft_messagepb.RaftRequestHeader.peer)
  
  ::metapb::Peer* temp = peer_;
  peer_ = NULL;
  return temp;
}
inline void RaftRequestHeader::set_allocated_peer(::metapb::Peer* peer) {
  delete peer_;
  peer_ = peer;
  if (peer) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:raft_messagepb.RaftRequestHeader.peer)
}

// optional .metapb.RegionEpoch region_epoch = 4;
inline bool RaftRequestHeader::has_region_epoch() const {
  return !_is_default_instance_ && region_epoch_ != NULL;
}
inline void RaftRequestHeader::clear_region_epoch() {
  if (GetArenaNoVirtual() == NULL && region_epoch_ != NULL) delete region_epoch_;
  region_epoch_ = NULL;
}
inline const ::metapb::RegionEpoch& RaftRequestHeader::region_epoch() const {
  // @@protoc_insertion_point(field_get:raft_messagepb.RaftRequestHeader.region_epoch)
  return region_epoch_ != NULL ? *region_epoch_ : *default_instance_->region_epoch_;
}
inline ::metapb::RegionEpoch* RaftRequestHeader::mutable_region_epoch() {
  
  if (region_epoch_ == NULL) {
    region_epoch_ = new ::metapb::RegionEpoch;
  }
  // @@protoc_insertion_point(field_mutable:raft_messagepb.RaftRequestHeader.region_epoch)
  return region_epoch_;
}
inline ::metapb::RegionEpoch* RaftRequestHeader::release_region_epoch() {
  // @@protoc_insertion_point(field_release:raft_messagepb.RaftRequestHeader.region_epoch)
  
  ::metapb::RegionEpoch* temp = region_epoch_;
  region_epoch_ = NULL;
  return temp;
}
inline void RaftRequestHeader::set_allocated_region_epoch(::metapb::RegionEpoch* region_epoch) {
  delete region_epoch_;
  region_epoch_ = region_epoch;
  if (region_epoch) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:raft_messagepb.RaftRequestHeader.region_epoch)
}

// optional uint64 term = 5;
inline void RaftRequestHeader::clear_term() {
  term_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 RaftRequestHeader::term() const {
  // @@protoc_insertion_point(field_get:raft_messagepb.RaftRequestHeader.term)
  return term_;
}
inline void RaftRequestHeader::set_term(::google::protobuf::uint64 value) {
  
  term_ = value;
  // @@protoc_insertion_point(field_set:raft_messagepb.RaftRequestHeader.term)
}

// -------------------------------------------------------------------

// RaftResponseHeader

// optional bytes uuid = 2;
inline void RaftResponseHeader::clear_uuid() {
  uuid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RaftResponseHeader::uuid() const {
  // @@protoc_insertion_point(field_get:raft_messagepb.RaftResponseHeader.uuid)
  return uuid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RaftResponseHeader::set_uuid(const ::std::string& value) {
  
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:raft_messagepb.RaftResponseHeader.uuid)
}
inline void RaftResponseHeader::set_uuid(const char* value) {
  
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:raft_messagepb.RaftResponseHeader.uuid)
}
inline void RaftResponseHeader::set_uuid(const void* value, size_t size) {
  
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:raft_messagepb.RaftResponseHeader.uuid)
}
inline ::std::string* RaftResponseHeader::mutable_uuid() {
  
  // @@protoc_insertion_point(field_mutable:raft_messagepb.RaftResponseHeader.uuid)
  return uuid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RaftResponseHeader::release_uuid() {
  // @@protoc_insertion_point(field_release:raft_messagepb.RaftResponseHeader.uuid)
  
  return uuid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RaftResponseHeader::set_allocated_uuid(::std::string* uuid) {
  if (uuid != NULL) {
    
  } else {
    
  }
  uuid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), uuid);
  // @@protoc_insertion_point(field_set_allocated:raft_messagepb.RaftResponseHeader.uuid)
}

// optional uint64 current_term = 3;
inline void RaftResponseHeader::clear_current_term() {
  current_term_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 RaftResponseHeader::current_term() const {
  // @@protoc_insertion_point(field_get:raft_messagepb.RaftResponseHeader.current_term)
  return current_term_;
}
inline void RaftResponseHeader::set_current_term(::google::protobuf::uint64 value) {
  
  current_term_ = value;
  // @@protoc_insertion_point(field_set:raft_messagepb.RaftResponseHeader.current_term)
}

// -------------------------------------------------------------------

// RaftCmdRequest

// optional .raft_messagepb.RaftRequestHeader header = 1;
inline bool RaftCmdRequest::has_header() const {
  return !_is_default_instance_ && header_ != NULL;
}
inline void RaftCmdRequest::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
inline const ::raft_messagepb::RaftRequestHeader& RaftCmdRequest::header() const {
  // @@protoc_insertion_point(field_get:raft_messagepb.RaftCmdRequest.header)
  return header_ != NULL ? *header_ : *default_instance_->header_;
}
inline ::raft_messagepb::RaftRequestHeader* RaftCmdRequest::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::raft_messagepb::RaftRequestHeader;
  }
  // @@protoc_insertion_point(field_mutable:raft_messagepb.RaftCmdRequest.header)
  return header_;
}
inline ::raft_messagepb::RaftRequestHeader* RaftCmdRequest::release_header() {
  // @@protoc_insertion_point(field_release:raft_messagepb.RaftCmdRequest.header)
  
  ::raft_messagepb::RaftRequestHeader* temp = header_;
  header_ = NULL;
  return temp;
}
inline void RaftCmdRequest::set_allocated_header(::raft_messagepb::RaftRequestHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:raft_messagepb.RaftCmdRequest.header)
}

// repeated .raft_messagepb.Request requests = 2;
inline int RaftCmdRequest::requests_size() const {
  return requests_.size();
}
inline void RaftCmdRequest::clear_requests() {
  requests_.Clear();
}
inline const ::raft_messagepb::Request& RaftCmdRequest::requests(int index) const {
  // @@protoc_insertion_point(field_get:raft_messagepb.RaftCmdRequest.requests)
  return requests_.Get(index);
}
inline ::raft_messagepb::Request* RaftCmdRequest::mutable_requests(int index) {
  // @@protoc_insertion_point(field_mutable:raft_messagepb.RaftCmdRequest.requests)
  return requests_.Mutable(index);
}
inline ::raft_messagepb::Request* RaftCmdRequest::add_requests() {
  // @@protoc_insertion_point(field_add:raft_messagepb.RaftCmdRequest.requests)
  return requests_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::raft_messagepb::Request >*
RaftCmdRequest::mutable_requests() {
  // @@protoc_insertion_point(field_mutable_list:raft_messagepb.RaftCmdRequest.requests)
  return &requests_;
}
inline const ::google::protobuf::RepeatedPtrField< ::raft_messagepb::Request >&
RaftCmdRequest::requests() const {
  // @@protoc_insertion_point(field_list:raft_messagepb.RaftCmdRequest.requests)
  return requests_;
}

// -------------------------------------------------------------------

// RaftCmdResponse

// optional .raft_messagepb.RaftResponseHeader header = 1;
inline bool RaftCmdResponse::has_header() const {
  return !_is_default_instance_ && header_ != NULL;
}
inline void RaftCmdResponse::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
inline const ::raft_messagepb::RaftResponseHeader& RaftCmdResponse::header() const {
  // @@protoc_insertion_point(field_get:raft_messagepb.RaftCmdResponse.header)
  return header_ != NULL ? *header_ : *default_instance_->header_;
}
inline ::raft_messagepb::RaftResponseHeader* RaftCmdResponse::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::raft_messagepb::RaftResponseHeader;
  }
  // @@protoc_insertion_point(field_mutable:raft_messagepb.RaftCmdResponse.header)
  return header_;
}
inline ::raft_messagepb::RaftResponseHeader* RaftCmdResponse::release_header() {
  // @@protoc_insertion_point(field_release:raft_messagepb.RaftCmdResponse.header)
  
  ::raft_messagepb::RaftResponseHeader* temp = header_;
  header_ = NULL;
  return temp;
}
inline void RaftCmdResponse::set_allocated_header(::raft_messagepb::RaftResponseHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:raft_messagepb.RaftCmdResponse.header)
}

// repeated .raft_messagepb.Response responses = 2;
inline int RaftCmdResponse::responses_size() const {
  return responses_.size();
}
inline void RaftCmdResponse::clear_responses() {
  responses_.Clear();
}
inline const ::raft_messagepb::Response& RaftCmdResponse::responses(int index) const {
  // @@protoc_insertion_point(field_get:raft_messagepb.RaftCmdResponse.responses)
  return responses_.Get(index);
}
inline ::raft_messagepb::Response* RaftCmdResponse::mutable_responses(int index) {
  // @@protoc_insertion_point(field_mutable:raft_messagepb.RaftCmdResponse.responses)
  return responses_.Mutable(index);
}
inline ::raft_messagepb::Response* RaftCmdResponse::add_responses() {
  // @@protoc_insertion_point(field_add:raft_messagepb.RaftCmdResponse.responses)
  return responses_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::raft_messagepb::Response >*
RaftCmdResponse::mutable_responses() {
  // @@protoc_insertion_point(field_mutable_list:raft_messagepb.RaftCmdResponse.responses)
  return &responses_;
}
inline const ::google::protobuf::RepeatedPtrField< ::raft_messagepb::Response >&
RaftCmdResponse::responses() const {
  // @@protoc_insertion_point(field_list:raft_messagepb.RaftCmdResponse.responses)
  return responses_;
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace raft_messagepb

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::raft_messagepb::RaftMessageType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::raft_messagepb::RaftMessageType>() {
  return ::raft_messagepb::RaftMessageType_descriptor();
}
template <> struct is_proto_enum< ::raft_messagepb::PeerState> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::raft_messagepb::PeerState>() {
  return ::raft_messagepb::PeerState_descriptor();
}
template <> struct is_proto_enum< ::raft_messagepb::CmdType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::raft_messagepb::CmdType>() {
  return ::raft_messagepb::CmdType_descriptor();
}
template <> struct is_proto_enum< ::raft_messagepb::AdminCmdType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::raft_messagepb::AdminCmdType>() {
  return ::raft_messagepb::AdminCmdType_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_raft_5fmessagepb_2eproto__INCLUDED
