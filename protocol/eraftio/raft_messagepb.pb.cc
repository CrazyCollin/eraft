// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: raft_messagepb.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "raft_messagepb.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace raft_messagepb {

namespace {

const ::google::protobuf::Descriptor* RaftMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RaftMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* RaftLocalState_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RaftLocalState_reflection_ = NULL;
const ::google::protobuf::Descriptor* RaftApplyState_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RaftApplyState_reflection_ = NULL;
const ::google::protobuf::Descriptor* RegionLocalState_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RegionLocalState_reflection_ = NULL;
const ::google::protobuf::Descriptor* StoreIdent_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StoreIdent_reflection_ = NULL;
const ::google::protobuf::Descriptor* KeyValue_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  KeyValue_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* PutRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PutRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* PutResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PutResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* DeleteRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DeleteRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* DeleteResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DeleteResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* Request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Request_reflection_ = NULL;
const ::google::protobuf::Descriptor* Response_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Response_reflection_ = NULL;
const ::google::protobuf::Descriptor* ChangePeerRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChangePeerRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* ChangePeerResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChangePeerResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* SplitRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SplitRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* SplitResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SplitResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CompactLogRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CompactLogRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CompactLogResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CompactLogResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* TransferLeaderRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TransferLeaderRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* TransferLeaderResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TransferLeaderResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* AdminRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AdminRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* AdminResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AdminResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* RaftRequestHeader_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RaftRequestHeader_reflection_ = NULL;
const ::google::protobuf::Descriptor* RaftResponseHeader_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RaftResponseHeader_reflection_ = NULL;
const ::google::protobuf::Descriptor* RaftCmdRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RaftCmdRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* RaftCmdResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RaftCmdResponse_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* RaftMessageType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* PeerState_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* CmdType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* AdminCmdType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_raft_5fmessagepb_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_raft_5fmessagepb_2eproto() {
  protobuf_AddDesc_raft_5fmessagepb_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "raft_messagepb.proto");
  GOOGLE_CHECK(file != NULL);
  RaftMessage_descriptor_ = file->message_type(0);
  static const int RaftMessage_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaftMessage, region_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaftMessage, from_peer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaftMessage, to_peer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaftMessage, message_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaftMessage, region_epoch_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaftMessage, is_tombstone_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaftMessage, start_key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaftMessage, end_key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaftMessage, data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaftMessage, raft_msg_type_),
  };
  RaftMessage_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RaftMessage_descriptor_,
      RaftMessage::default_instance_,
      RaftMessage_offsets_,
      -1,
      -1,
      -1,
      sizeof(RaftMessage),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaftMessage, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaftMessage, _is_default_instance_));
  RaftLocalState_descriptor_ = file->message_type(1);
  static const int RaftLocalState_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaftLocalState, hard_state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaftLocalState, last_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaftLocalState, last_term_),
  };
  RaftLocalState_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RaftLocalState_descriptor_,
      RaftLocalState::default_instance_,
      RaftLocalState_offsets_,
      -1,
      -1,
      -1,
      sizeof(RaftLocalState),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaftLocalState, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaftLocalState, _is_default_instance_));
  RaftApplyState_descriptor_ = file->message_type(2);
  static const int RaftApplyState_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaftApplyState, applied_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaftApplyState, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaftApplyState, term_),
  };
  RaftApplyState_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RaftApplyState_descriptor_,
      RaftApplyState::default_instance_,
      RaftApplyState_offsets_,
      -1,
      -1,
      -1,
      sizeof(RaftApplyState),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaftApplyState, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaftApplyState, _is_default_instance_));
  RegionLocalState_descriptor_ = file->message_type(3);
  static const int RegionLocalState_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegionLocalState, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegionLocalState, region_),
  };
  RegionLocalState_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RegionLocalState_descriptor_,
      RegionLocalState::default_instance_,
      RegionLocalState_offsets_,
      -1,
      -1,
      -1,
      sizeof(RegionLocalState),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegionLocalState, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegionLocalState, _is_default_instance_));
  StoreIdent_descriptor_ = file->message_type(4);
  static const int StoreIdent_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoreIdent, cluster_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoreIdent, store_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoreIdent, addr_),
  };
  StoreIdent_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      StoreIdent_descriptor_,
      StoreIdent::default_instance_,
      StoreIdent_offsets_,
      -1,
      -1,
      -1,
      sizeof(StoreIdent),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoreIdent, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoreIdent, _is_default_instance_));
  KeyValue_descriptor_ = file->message_type(5);
  static const int KeyValue_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeyValue, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeyValue, value_),
  };
  KeyValue_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      KeyValue_descriptor_,
      KeyValue::default_instance_,
      KeyValue_offsets_,
      -1,
      -1,
      -1,
      sizeof(KeyValue),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeyValue, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeyValue, _is_default_instance_));
  GetRequest_descriptor_ = file->message_type(6);
  static const int GetRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetRequest, cf_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetRequest, key_),
  };
  GetRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      GetRequest_descriptor_,
      GetRequest::default_instance_,
      GetRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(GetRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetRequest, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetRequest, _is_default_instance_));
  GetResponse_descriptor_ = file->message_type(7);
  static const int GetResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetResponse, value_),
  };
  GetResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      GetResponse_descriptor_,
      GetResponse::default_instance_,
      GetResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(GetResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetResponse, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetResponse, _is_default_instance_));
  PutRequest_descriptor_ = file->message_type(8);
  static const int PutRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PutRequest, cf_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PutRequest, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PutRequest, value_),
  };
  PutRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      PutRequest_descriptor_,
      PutRequest::default_instance_,
      PutRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(PutRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PutRequest, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PutRequest, _is_default_instance_));
  PutResponse_descriptor_ = file->message_type(9);
  static const int PutResponse_offsets_[1] = {
  };
  PutResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      PutResponse_descriptor_,
      PutResponse::default_instance_,
      PutResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(PutResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PutResponse, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PutResponse, _is_default_instance_));
  DeleteRequest_descriptor_ = file->message_type(10);
  static const int DeleteRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteRequest, cf_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteRequest, key_),
  };
  DeleteRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      DeleteRequest_descriptor_,
      DeleteRequest::default_instance_,
      DeleteRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(DeleteRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteRequest, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteRequest, _is_default_instance_));
  DeleteResponse_descriptor_ = file->message_type(11);
  static const int DeleteResponse_offsets_[1] = {
  };
  DeleteResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      DeleteResponse_descriptor_,
      DeleteResponse::default_instance_,
      DeleteResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(DeleteResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteResponse, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteResponse, _is_default_instance_));
  Request_descriptor_ = file->message_type(12);
  static const int Request_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, cmd_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, get_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, put_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, delete__),
  };
  Request_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Request_descriptor_,
      Request::default_instance_,
      Request_offsets_,
      -1,
      -1,
      -1,
      sizeof(Request),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, _is_default_instance_));
  Response_descriptor_ = file->message_type(13);
  static const int Response_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, cmd_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, get_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, put_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, delete__),
  };
  Response_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Response_descriptor_,
      Response::default_instance_,
      Response_offsets_,
      -1,
      -1,
      -1,
      sizeof(Response),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, _is_default_instance_));
  ChangePeerRequest_descriptor_ = file->message_type(14);
  static const int ChangePeerRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangePeerRequest, change_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangePeerRequest, peer_),
  };
  ChangePeerRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ChangePeerRequest_descriptor_,
      ChangePeerRequest::default_instance_,
      ChangePeerRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(ChangePeerRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangePeerRequest, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangePeerRequest, _is_default_instance_));
  ChangePeerResponse_descriptor_ = file->message_type(15);
  static const int ChangePeerResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangePeerResponse, region_),
  };
  ChangePeerResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ChangePeerResponse_descriptor_,
      ChangePeerResponse::default_instance_,
      ChangePeerResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(ChangePeerResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangePeerResponse, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangePeerResponse, _is_default_instance_));
  SplitRequest_descriptor_ = file->message_type(16);
  static const int SplitRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SplitRequest, split_key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SplitRequest, new_region_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SplitRequest, new_peer_ids_),
  };
  SplitRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SplitRequest_descriptor_,
      SplitRequest::default_instance_,
      SplitRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(SplitRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SplitRequest, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SplitRequest, _is_default_instance_));
  SplitResponse_descriptor_ = file->message_type(17);
  static const int SplitResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SplitResponse, regions_),
  };
  SplitResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SplitResponse_descriptor_,
      SplitResponse::default_instance_,
      SplitResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(SplitResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SplitResponse, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SplitResponse, _is_default_instance_));
  CompactLogRequest_descriptor_ = file->message_type(18);
  static const int CompactLogRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CompactLogRequest, compact_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CompactLogRequest, compact_term_),
  };
  CompactLogRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CompactLogRequest_descriptor_,
      CompactLogRequest::default_instance_,
      CompactLogRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(CompactLogRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CompactLogRequest, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CompactLogRequest, _is_default_instance_));
  CompactLogResponse_descriptor_ = file->message_type(19);
  static const int CompactLogResponse_offsets_[1] = {
  };
  CompactLogResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CompactLogResponse_descriptor_,
      CompactLogResponse::default_instance_,
      CompactLogResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(CompactLogResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CompactLogResponse, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CompactLogResponse, _is_default_instance_));
  TransferLeaderRequest_descriptor_ = file->message_type(20);
  static const int TransferLeaderRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransferLeaderRequest, peer_),
  };
  TransferLeaderRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TransferLeaderRequest_descriptor_,
      TransferLeaderRequest::default_instance_,
      TransferLeaderRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(TransferLeaderRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransferLeaderRequest, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransferLeaderRequest, _is_default_instance_));
  TransferLeaderResponse_descriptor_ = file->message_type(21);
  static const int TransferLeaderResponse_offsets_[1] = {
  };
  TransferLeaderResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TransferLeaderResponse_descriptor_,
      TransferLeaderResponse::default_instance_,
      TransferLeaderResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(TransferLeaderResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransferLeaderResponse, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransferLeaderResponse, _is_default_instance_));
  AdminRequest_descriptor_ = file->message_type(22);
  static const int AdminRequest_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdminRequest, cmd_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdminRequest, change_peer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdminRequest, compact_log_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdminRequest, transfer_leader_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdminRequest, split_),
  };
  AdminRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      AdminRequest_descriptor_,
      AdminRequest::default_instance_,
      AdminRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(AdminRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdminRequest, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdminRequest, _is_default_instance_));
  AdminResponse_descriptor_ = file->message_type(23);
  static const int AdminResponse_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdminResponse, cmd_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdminResponse, change_peer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdminResponse, compact_log_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdminResponse, transfer_leader_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdminResponse, split_),
  };
  AdminResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      AdminResponse_descriptor_,
      AdminResponse::default_instance_,
      AdminResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(AdminResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdminResponse, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdminResponse, _is_default_instance_));
  RaftRequestHeader_descriptor_ = file->message_type(24);
  static const int RaftRequestHeader_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaftRequestHeader, region_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaftRequestHeader, peer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaftRequestHeader, region_epoch_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaftRequestHeader, term_),
  };
  RaftRequestHeader_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RaftRequestHeader_descriptor_,
      RaftRequestHeader::default_instance_,
      RaftRequestHeader_offsets_,
      -1,
      -1,
      -1,
      sizeof(RaftRequestHeader),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaftRequestHeader, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaftRequestHeader, _is_default_instance_));
  RaftResponseHeader_descriptor_ = file->message_type(25);
  static const int RaftResponseHeader_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaftResponseHeader, uuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaftResponseHeader, current_term_),
  };
  RaftResponseHeader_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RaftResponseHeader_descriptor_,
      RaftResponseHeader::default_instance_,
      RaftResponseHeader_offsets_,
      -1,
      -1,
      -1,
      sizeof(RaftResponseHeader),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaftResponseHeader, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaftResponseHeader, _is_default_instance_));
  RaftCmdRequest_descriptor_ = file->message_type(26);
  static const int RaftCmdRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaftCmdRequest, header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaftCmdRequest, requests_),
  };
  RaftCmdRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RaftCmdRequest_descriptor_,
      RaftCmdRequest::default_instance_,
      RaftCmdRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(RaftCmdRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaftCmdRequest, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaftCmdRequest, _is_default_instance_));
  RaftCmdResponse_descriptor_ = file->message_type(27);
  static const int RaftCmdResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaftCmdResponse, header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaftCmdResponse, responses_),
  };
  RaftCmdResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RaftCmdResponse_descriptor_,
      RaftCmdResponse::default_instance_,
      RaftCmdResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(RaftCmdResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaftCmdResponse, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaftCmdResponse, _is_default_instance_));
  RaftMessageType_descriptor_ = file->enum_type(0);
  PeerState_descriptor_ = file->enum_type(1);
  CmdType_descriptor_ = file->enum_type(2);
  AdminCmdType_descriptor_ = file->enum_type(3);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_raft_5fmessagepb_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RaftMessage_descriptor_, &RaftMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RaftLocalState_descriptor_, &RaftLocalState::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RaftApplyState_descriptor_, &RaftApplyState::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RegionLocalState_descriptor_, &RegionLocalState::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      StoreIdent_descriptor_, &StoreIdent::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      KeyValue_descriptor_, &KeyValue::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      GetRequest_descriptor_, &GetRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      GetResponse_descriptor_, &GetResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      PutRequest_descriptor_, &PutRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      PutResponse_descriptor_, &PutResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      DeleteRequest_descriptor_, &DeleteRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      DeleteResponse_descriptor_, &DeleteResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Request_descriptor_, &Request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Response_descriptor_, &Response::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ChangePeerRequest_descriptor_, &ChangePeerRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ChangePeerResponse_descriptor_, &ChangePeerResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SplitRequest_descriptor_, &SplitRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SplitResponse_descriptor_, &SplitResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CompactLogRequest_descriptor_, &CompactLogRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CompactLogResponse_descriptor_, &CompactLogResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TransferLeaderRequest_descriptor_, &TransferLeaderRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TransferLeaderResponse_descriptor_, &TransferLeaderResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      AdminRequest_descriptor_, &AdminRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      AdminResponse_descriptor_, &AdminResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RaftRequestHeader_descriptor_, &RaftRequestHeader::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RaftResponseHeader_descriptor_, &RaftResponseHeader::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RaftCmdRequest_descriptor_, &RaftCmdRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RaftCmdResponse_descriptor_, &RaftCmdResponse::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_raft_5fmessagepb_2eproto() {
  delete RaftMessage::default_instance_;
  delete RaftMessage_reflection_;
  delete RaftLocalState::default_instance_;
  delete RaftLocalState_reflection_;
  delete RaftApplyState::default_instance_;
  delete RaftApplyState_reflection_;
  delete RegionLocalState::default_instance_;
  delete RegionLocalState_reflection_;
  delete StoreIdent::default_instance_;
  delete StoreIdent_reflection_;
  delete KeyValue::default_instance_;
  delete KeyValue_reflection_;
  delete GetRequest::default_instance_;
  delete GetRequest_reflection_;
  delete GetResponse::default_instance_;
  delete GetResponse_reflection_;
  delete PutRequest::default_instance_;
  delete PutRequest_reflection_;
  delete PutResponse::default_instance_;
  delete PutResponse_reflection_;
  delete DeleteRequest::default_instance_;
  delete DeleteRequest_reflection_;
  delete DeleteResponse::default_instance_;
  delete DeleteResponse_reflection_;
  delete Request::default_instance_;
  delete Request_reflection_;
  delete Response::default_instance_;
  delete Response_reflection_;
  delete ChangePeerRequest::default_instance_;
  delete ChangePeerRequest_reflection_;
  delete ChangePeerResponse::default_instance_;
  delete ChangePeerResponse_reflection_;
  delete SplitRequest::default_instance_;
  delete SplitRequest_reflection_;
  delete SplitResponse::default_instance_;
  delete SplitResponse_reflection_;
  delete CompactLogRequest::default_instance_;
  delete CompactLogRequest_reflection_;
  delete CompactLogResponse::default_instance_;
  delete CompactLogResponse_reflection_;
  delete TransferLeaderRequest::default_instance_;
  delete TransferLeaderRequest_reflection_;
  delete TransferLeaderResponse::default_instance_;
  delete TransferLeaderResponse_reflection_;
  delete AdminRequest::default_instance_;
  delete AdminRequest_reflection_;
  delete AdminResponse::default_instance_;
  delete AdminResponse_reflection_;
  delete RaftRequestHeader::default_instance_;
  delete RaftRequestHeader_reflection_;
  delete RaftResponseHeader::default_instance_;
  delete RaftResponseHeader_reflection_;
  delete RaftCmdRequest::default_instance_;
  delete RaftCmdRequest_reflection_;
  delete RaftCmdResponse::default_instance_;
  delete RaftCmdResponse_reflection_;
}

void protobuf_AddDesc_raft_5fmessagepb_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_raft_5fmessagepb_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::eraftpb::protobuf_AddDesc_eraftpb_2eproto();
  ::metapb::protobuf_AddDesc_metapb_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\024raft_messagepb.proto\022\016raft_messagepb\032\r"
    "eraftpb.proto\032\014metapb.proto\"\256\002\n\013RaftMess"
    "age\022\021\n\tregion_id\030\001 \001(\004\022\037\n\tfrom_peer\030\002 \001("
    "\0132\014.metapb.Peer\022\035\n\007to_peer\030\003 \001(\0132\014.metap"
    "b.Peer\022!\n\007message\030\004 \001(\0132\020.eraftpb.Messag"
    "e\022)\n\014region_epoch\030\005 \001(\0132\023.metapb.RegionE"
    "poch\022\024\n\014is_tombstone\030\006 \001(\010\022\021\n\tstart_key\030"
    "\007 \001(\014\022\017\n\007end_key\030\010 \001(\014\022\014\n\004data\030\t \001(\014\0226\n\r"
    "raft_msg_type\030\n \001(\0162\037.raft_messagepb.Raf"
    "tMessageType\"_\n\016RaftLocalState\022&\n\nhard_s"
    "tate\030\001 \001(\0132\022.eraftpb.HardState\022\022\n\nlast_i"
    "ndex\030\002 \001(\004\022\021\n\tlast_term\030\003 \001(\004\"D\n\016RaftApp"
    "lyState\022\025\n\rapplied_index\030\001 \001(\004\022\r\n\005index\030"
    "\002 \001(\004\022\014\n\004term\030\003 \001(\004\"\\\n\020RegionLocalState\022"
    "(\n\005state\030\001 \001(\0162\031.raft_messagepb.PeerStat"
    "e\022\036\n\006region\030\002 \001(\0132\016.metapb.Region\"@\n\nSto"
    "reIdent\022\022\n\ncluster_id\030\001 \001(\004\022\020\n\010store_id\030"
    "\002 \001(\004\022\014\n\004addr\030\003 \001(\t\"&\n\010KeyValue\022\013\n\003key\030\001"
    " \001(\014\022\r\n\005value\030\002 \001(\014\"%\n\nGetRequest\022\n\n\002cf\030"
    "\001 \001(\t\022\013\n\003key\030\002 \001(\014\"\034\n\013GetResponse\022\r\n\005val"
    "ue\030\001 \001(\014\"4\n\nPutRequest\022\n\n\002cf\030\001 \001(\t\022\013\n\003ke"
    "y\030\002 \001(\014\022\r\n\005value\030\003 \001(\014\"\r\n\013PutResponse\"(\n"
    "\rDeleteRequest\022\n\n\002cf\030\001 \001(\t\022\013\n\003key\030\002 \001(\014\""
    "\020\n\016DeleteResponse\"\265\001\n\007Request\022)\n\010cmd_typ"
    "e\030\001 \001(\0162\027.raft_messagepb.CmdType\022\'\n\003get\030"
    "\002 \001(\0132\032.raft_messagepb.GetRequest\022\'\n\003put"
    "\030\004 \001(\0132\032.raft_messagepb.PutRequest\022-\n\006de"
    "lete\030\005 \001(\0132\035.raft_messagepb.DeleteReques"
    "t\"\271\001\n\010Response\022)\n\010cmd_type\030\001 \001(\0162\027.raft_"
    "messagepb.CmdType\022(\n\003get\030\002 \001(\0132\033.raft_me"
    "ssagepb.GetResponse\022(\n\003put\030\004 \001(\0132\033.raft_"
    "messagepb.PutResponse\022.\n\006delete\030\005 \001(\0132\036."
    "raft_messagepb.DeleteResponse\"]\n\021ChangeP"
    "eerRequest\022,\n\013change_type\030\001 \001(\0162\027.eraftp"
    "b.ConfChangeType\022\032\n\004peer\030\002 \001(\0132\014.metapb."
    "Peer\"4\n\022ChangePeerResponse\022\036\n\006region\030\001 \001"
    "(\0132\016.metapb.Region\"N\n\014SplitRequest\022\021\n\tsp"
    "lit_key\030\001 \001(\014\022\025\n\rnew_region_id\030\002 \001(\004\022\024\n\014"
    "new_peer_ids\030\003 \003(\004\"0\n\rSplitResponse\022\037\n\007r"
    "egions\030\001 \003(\0132\016.metapb.Region\"@\n\021CompactL"
    "ogRequest\022\025\n\rcompact_index\030\001 \001(\004\022\024\n\014comp"
    "act_term\030\002 \001(\004\"\024\n\022CompactLogResponse\"3\n\025"
    "TransferLeaderRequest\022\032\n\004peer\030\001 \001(\0132\014.me"
    "tapb.Peer\"\030\n\026TransferLeaderResponse\"\233\002\n\014"
    "AdminRequest\022.\n\010cmd_type\030\001 \001(\0162\034.raft_me"
    "ssagepb.AdminCmdType\0226\n\013change_peer\030\002 \001("
    "\0132!.raft_messagepb.ChangePeerRequest\0226\n\013"
    "compact_log\030\004 \001(\0132!.raft_messagepb.Compa"
    "ctLogRequest\022>\n\017transfer_leader\030\005 \001(\0132%."
    "raft_messagepb.TransferLeaderRequest\022+\n\005"
    "split\030\n \001(\0132\034.raft_messagepb.SplitReques"
    "t\"\240\002\n\rAdminResponse\022.\n\010cmd_type\030\001 \001(\0162\034."
    "raft_messagepb.AdminCmdType\0227\n\013change_pe"
    "er\030\002 \001(\0132\".raft_messagepb.ChangePeerResp"
    "onse\0227\n\013compact_log\030\004 \001(\0132\".raft_message"
    "pb.CompactLogResponse\022\?\n\017transfer_leader"
    "\030\005 \001(\0132&.raft_messagepb.TransferLeaderRe"
    "sponse\022,\n\005split\030\n \001(\0132\035.raft_messagepb.S"
    "plitResponse\"{\n\021RaftRequestHeader\022\021\n\treg"
    "ion_id\030\001 \001(\004\022\032\n\004peer\030\002 \001(\0132\014.metapb.Peer"
    "\022)\n\014region_epoch\030\004 \001(\0132\023.metapb.RegionEp"
    "och\022\014\n\004term\030\005 \001(\004\"8\n\022RaftResponseHeader\022"
    "\014\n\004uuid\030\002 \001(\014\022\024\n\014current_term\030\003 \001(\004\"n\n\016R"
    "aftCmdRequest\0221\n\006header\030\001 \001(\0132!.raft_mes"
    "sagepb.RaftRequestHeader\022)\n\010requests\030\002 \003"
    "(\0132\027.raft_messagepb.Request\"r\n\017RaftCmdRe"
    "sponse\0222\n\006header\030\001 \001(\0132\".raft_messagepb."
    "RaftResponseHeader\022+\n\tresponses\030\002 \003(\0132\030."
    "raft_messagepb.Response*{\n\017RaftMessageTy"
    "pe\022\021\n\rRaftMsgNormal\020\000\022\024\n\020RaftMsgClientCm"
    "d\020\001\022\026\n\022RaftTransferLeader\020\002\022\022\n\016RaftConfC"
    "hange\020\003\022\023\n\017RaftSplitRegion\020\004*&\n\tPeerStat"
    "e\022\n\n\006Normal\020\000\022\r\n\tTombstone\020\002*>\n\007CmdType\022"
    "\013\n\007Invalid\020\000\022\007\n\003Get\020\001\022\007\n\003Put\020\003\022\n\n\006Delete"
    "\020\004\022\010\n\004Snap\020\005*_\n\014AdminCmdType\022\020\n\014InvalidA"
    "dmin\020\000\022\016\n\nChangePeer\020\001\022\016\n\nCompactLog\020\003\022\022"
    "\n\016TransferLeader\020\004\022\t\n\005Split\020\nb\006proto3", 3077);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "raft_messagepb.proto", &protobuf_RegisterTypes);
  RaftMessage::default_instance_ = new RaftMessage();
  RaftLocalState::default_instance_ = new RaftLocalState();
  RaftApplyState::default_instance_ = new RaftApplyState();
  RegionLocalState::default_instance_ = new RegionLocalState();
  StoreIdent::default_instance_ = new StoreIdent();
  KeyValue::default_instance_ = new KeyValue();
  GetRequest::default_instance_ = new GetRequest();
  GetResponse::default_instance_ = new GetResponse();
  PutRequest::default_instance_ = new PutRequest();
  PutResponse::default_instance_ = new PutResponse();
  DeleteRequest::default_instance_ = new DeleteRequest();
  DeleteResponse::default_instance_ = new DeleteResponse();
  Request::default_instance_ = new Request();
  Response::default_instance_ = new Response();
  ChangePeerRequest::default_instance_ = new ChangePeerRequest();
  ChangePeerResponse::default_instance_ = new ChangePeerResponse();
  SplitRequest::default_instance_ = new SplitRequest();
  SplitResponse::default_instance_ = new SplitResponse();
  CompactLogRequest::default_instance_ = new CompactLogRequest();
  CompactLogResponse::default_instance_ = new CompactLogResponse();
  TransferLeaderRequest::default_instance_ = new TransferLeaderRequest();
  TransferLeaderResponse::default_instance_ = new TransferLeaderResponse();
  AdminRequest::default_instance_ = new AdminRequest();
  AdminResponse::default_instance_ = new AdminResponse();
  RaftRequestHeader::default_instance_ = new RaftRequestHeader();
  RaftResponseHeader::default_instance_ = new RaftResponseHeader();
  RaftCmdRequest::default_instance_ = new RaftCmdRequest();
  RaftCmdResponse::default_instance_ = new RaftCmdResponse();
  RaftMessage::default_instance_->InitAsDefaultInstance();
  RaftLocalState::default_instance_->InitAsDefaultInstance();
  RaftApplyState::default_instance_->InitAsDefaultInstance();
  RegionLocalState::default_instance_->InitAsDefaultInstance();
  StoreIdent::default_instance_->InitAsDefaultInstance();
  KeyValue::default_instance_->InitAsDefaultInstance();
  GetRequest::default_instance_->InitAsDefaultInstance();
  GetResponse::default_instance_->InitAsDefaultInstance();
  PutRequest::default_instance_->InitAsDefaultInstance();
  PutResponse::default_instance_->InitAsDefaultInstance();
  DeleteRequest::default_instance_->InitAsDefaultInstance();
  DeleteResponse::default_instance_->InitAsDefaultInstance();
  Request::default_instance_->InitAsDefaultInstance();
  Response::default_instance_->InitAsDefaultInstance();
  ChangePeerRequest::default_instance_->InitAsDefaultInstance();
  ChangePeerResponse::default_instance_->InitAsDefaultInstance();
  SplitRequest::default_instance_->InitAsDefaultInstance();
  SplitResponse::default_instance_->InitAsDefaultInstance();
  CompactLogRequest::default_instance_->InitAsDefaultInstance();
  CompactLogResponse::default_instance_->InitAsDefaultInstance();
  TransferLeaderRequest::default_instance_->InitAsDefaultInstance();
  TransferLeaderResponse::default_instance_->InitAsDefaultInstance();
  AdminRequest::default_instance_->InitAsDefaultInstance();
  AdminResponse::default_instance_->InitAsDefaultInstance();
  RaftRequestHeader::default_instance_->InitAsDefaultInstance();
  RaftResponseHeader::default_instance_->InitAsDefaultInstance();
  RaftCmdRequest::default_instance_->InitAsDefaultInstance();
  RaftCmdResponse::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_raft_5fmessagepb_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_raft_5fmessagepb_2eproto {
  StaticDescriptorInitializer_raft_5fmessagepb_2eproto() {
    protobuf_AddDesc_raft_5fmessagepb_2eproto();
  }
} static_descriptor_initializer_raft_5fmessagepb_2eproto_;
const ::google::protobuf::EnumDescriptor* RaftMessageType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RaftMessageType_descriptor_;
}
bool RaftMessageType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* PeerState_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PeerState_descriptor_;
}
bool PeerState_IsValid(int value) {
  switch(value) {
    case 0:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* CmdType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CmdType_descriptor_;
}
bool CmdType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* AdminCmdType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AdminCmdType_descriptor_;
}
bool AdminCmdType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 3:
    case 4:
    case 10:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RaftMessage::kRegionIdFieldNumber;
const int RaftMessage::kFromPeerFieldNumber;
const int RaftMessage::kToPeerFieldNumber;
const int RaftMessage::kMessageFieldNumber;
const int RaftMessage::kRegionEpochFieldNumber;
const int RaftMessage::kIsTombstoneFieldNumber;
const int RaftMessage::kStartKeyFieldNumber;
const int RaftMessage::kEndKeyFieldNumber;
const int RaftMessage::kDataFieldNumber;
const int RaftMessage::kRaftMsgTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RaftMessage::RaftMessage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:raft_messagepb.RaftMessage)
}

void RaftMessage::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  from_peer_ = const_cast< ::metapb::Peer*>(&::metapb::Peer::default_instance());
  to_peer_ = const_cast< ::metapb::Peer*>(&::metapb::Peer::default_instance());
  message_ = const_cast< ::eraftpb::Message*>(&::eraftpb::Message::default_instance());
  region_epoch_ = const_cast< ::metapb::RegionEpoch*>(&::metapb::RegionEpoch::default_instance());
}

RaftMessage::RaftMessage(const RaftMessage& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:raft_messagepb.RaftMessage)
}

void RaftMessage::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  region_id_ = GOOGLE_ULONGLONG(0);
  from_peer_ = NULL;
  to_peer_ = NULL;
  message_ = NULL;
  region_epoch_ = NULL;
  is_tombstone_ = false;
  start_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  end_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  raft_msg_type_ = 0;
}

RaftMessage::~RaftMessage() {
  // @@protoc_insertion_point(destructor:raft_messagepb.RaftMessage)
  SharedDtor();
}

void RaftMessage::SharedDtor() {
  start_key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  end_key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete from_peer_;
    delete to_peer_;
    delete message_;
    delete region_epoch_;
  }
}

void RaftMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RaftMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RaftMessage_descriptor_;
}

const RaftMessage& RaftMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_raft_5fmessagepb_2eproto();
  return *default_instance_;
}

RaftMessage* RaftMessage::default_instance_ = NULL;

RaftMessage* RaftMessage::New(::google::protobuf::Arena* arena) const {
  RaftMessage* n = new RaftMessage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RaftMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:raft_messagepb.RaftMessage)
  region_id_ = GOOGLE_ULONGLONG(0);
  if (GetArenaNoVirtual() == NULL && from_peer_ != NULL) delete from_peer_;
  from_peer_ = NULL;
  if (GetArenaNoVirtual() == NULL && to_peer_ != NULL) delete to_peer_;
  to_peer_ = NULL;
  if (GetArenaNoVirtual() == NULL && message_ != NULL) delete message_;
  message_ = NULL;
  if (GetArenaNoVirtual() == NULL && region_epoch_ != NULL) delete region_epoch_;
  region_epoch_ = NULL;
  is_tombstone_ = false;
  start_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  end_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  raft_msg_type_ = 0;
}

bool RaftMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:raft_messagepb.RaftMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 region_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &region_id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_from_peer;
        break;
      }

      // optional .metapb.Peer from_peer = 2;
      case 2: {
        if (tag == 18) {
         parse_from_peer:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_from_peer()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_to_peer;
        break;
      }

      // optional .metapb.Peer to_peer = 3;
      case 3: {
        if (tag == 26) {
         parse_to_peer:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_to_peer()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_message;
        break;
      }

      // optional .eraftpb.Message message = 4;
      case 4: {
        if (tag == 34) {
         parse_message:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_message()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_region_epoch;
        break;
      }

      // optional .metapb.RegionEpoch region_epoch = 5;
      case 5: {
        if (tag == 42) {
         parse_region_epoch:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_region_epoch()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_is_tombstone;
        break;
      }

      // optional bool is_tombstone = 6;
      case 6: {
        if (tag == 48) {
         parse_is_tombstone:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_tombstone_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_start_key;
        break;
      }

      // optional bytes start_key = 7;
      case 7: {
        if (tag == 58) {
         parse_start_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_start_key()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_end_key;
        break;
      }

      // optional bytes end_key = 8;
      case 8: {
        if (tag == 66) {
         parse_end_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_end_key()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_data;
        break;
      }

      // optional bytes data = 9;
      case 9: {
        if (tag == 74) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_raft_msg_type;
        break;
      }

      // optional .raft_messagepb.RaftMessageType raft_msg_type = 10;
      case 10: {
        if (tag == 80) {
         parse_raft_msg_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_raft_msg_type(static_cast< ::raft_messagepb::RaftMessageType >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:raft_messagepb.RaftMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:raft_messagepb.RaftMessage)
  return false;
#undef DO_
}

void RaftMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:raft_messagepb.RaftMessage)
  // optional uint64 region_id = 1;
  if (this->region_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->region_id(), output);
  }

  // optional .metapb.Peer from_peer = 2;
  if (this->has_from_peer()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->from_peer_, output);
  }

  // optional .metapb.Peer to_peer = 3;
  if (this->has_to_peer()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->to_peer_, output);
  }

  // optional .eraftpb.Message message = 4;
  if (this->has_message()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->message_, output);
  }

  // optional .metapb.RegionEpoch region_epoch = 5;
  if (this->has_region_epoch()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->region_epoch_, output);
  }

  // optional bool is_tombstone = 6;
  if (this->is_tombstone() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->is_tombstone(), output);
  }

  // optional bytes start_key = 7;
  if (this->start_key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      7, this->start_key(), output);
  }

  // optional bytes end_key = 8;
  if (this->end_key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      8, this->end_key(), output);
  }

  // optional bytes data = 9;
  if (this->data().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      9, this->data(), output);
  }

  // optional .raft_messagepb.RaftMessageType raft_msg_type = 10;
  if (this->raft_msg_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      10, this->raft_msg_type(), output);
  }

  // @@protoc_insertion_point(serialize_end:raft_messagepb.RaftMessage)
}

::google::protobuf::uint8* RaftMessage::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:raft_messagepb.RaftMessage)
  // optional uint64 region_id = 1;
  if (this->region_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->region_id(), target);
  }

  // optional .metapb.Peer from_peer = 2;
  if (this->has_from_peer()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->from_peer_, false, target);
  }

  // optional .metapb.Peer to_peer = 3;
  if (this->has_to_peer()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->to_peer_, false, target);
  }

  // optional .eraftpb.Message message = 4;
  if (this->has_message()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->message_, false, target);
  }

  // optional .metapb.RegionEpoch region_epoch = 5;
  if (this->has_region_epoch()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->region_epoch_, false, target);
  }

  // optional bool is_tombstone = 6;
  if (this->is_tombstone() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->is_tombstone(), target);
  }

  // optional bytes start_key = 7;
  if (this->start_key().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        7, this->start_key(), target);
  }

  // optional bytes end_key = 8;
  if (this->end_key().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        8, this->end_key(), target);
  }

  // optional bytes data = 9;
  if (this->data().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        9, this->data(), target);
  }

  // optional .raft_messagepb.RaftMessageType raft_msg_type = 10;
  if (this->raft_msg_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      10, this->raft_msg_type(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:raft_messagepb.RaftMessage)
  return target;
}

int RaftMessage::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:raft_messagepb.RaftMessage)
  int total_size = 0;

  // optional uint64 region_id = 1;
  if (this->region_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->region_id());
  }

  // optional .metapb.Peer from_peer = 2;
  if (this->has_from_peer()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->from_peer_);
  }

  // optional .metapb.Peer to_peer = 3;
  if (this->has_to_peer()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->to_peer_);
  }

  // optional .eraftpb.Message message = 4;
  if (this->has_message()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->message_);
  }

  // optional .metapb.RegionEpoch region_epoch = 5;
  if (this->has_region_epoch()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->region_epoch_);
  }

  // optional bool is_tombstone = 6;
  if (this->is_tombstone() != 0) {
    total_size += 1 + 1;
  }

  // optional bytes start_key = 7;
  if (this->start_key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->start_key());
  }

  // optional bytes end_key = 8;
  if (this->end_key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->end_key());
  }

  // optional bytes data = 9;
  if (this->data().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->data());
  }

  // optional .raft_messagepb.RaftMessageType raft_msg_type = 10;
  if (this->raft_msg_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->raft_msg_type());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RaftMessage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:raft_messagepb.RaftMessage)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const RaftMessage* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const RaftMessage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:raft_messagepb.RaftMessage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:raft_messagepb.RaftMessage)
    MergeFrom(*source);
  }
}

void RaftMessage::MergeFrom(const RaftMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:raft_messagepb.RaftMessage)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.region_id() != 0) {
    set_region_id(from.region_id());
  }
  if (from.has_from_peer()) {
    mutable_from_peer()->::metapb::Peer::MergeFrom(from.from_peer());
  }
  if (from.has_to_peer()) {
    mutable_to_peer()->::metapb::Peer::MergeFrom(from.to_peer());
  }
  if (from.has_message()) {
    mutable_message()->::eraftpb::Message::MergeFrom(from.message());
  }
  if (from.has_region_epoch()) {
    mutable_region_epoch()->::metapb::RegionEpoch::MergeFrom(from.region_epoch());
  }
  if (from.is_tombstone() != 0) {
    set_is_tombstone(from.is_tombstone());
  }
  if (from.start_key().size() > 0) {

    start_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.start_key_);
  }
  if (from.end_key().size() > 0) {

    end_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.end_key_);
  }
  if (from.data().size() > 0) {

    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  if (from.raft_msg_type() != 0) {
    set_raft_msg_type(from.raft_msg_type());
  }
}

void RaftMessage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:raft_messagepb.RaftMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RaftMessage::CopyFrom(const RaftMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:raft_messagepb.RaftMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RaftMessage::IsInitialized() const {

  return true;
}

void RaftMessage::Swap(RaftMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RaftMessage::InternalSwap(RaftMessage* other) {
  std::swap(region_id_, other->region_id_);
  std::swap(from_peer_, other->from_peer_);
  std::swap(to_peer_, other->to_peer_);
  std::swap(message_, other->message_);
  std::swap(region_epoch_, other->region_epoch_);
  std::swap(is_tombstone_, other->is_tombstone_);
  start_key_.Swap(&other->start_key_);
  end_key_.Swap(&other->end_key_);
  data_.Swap(&other->data_);
  std::swap(raft_msg_type_, other->raft_msg_type_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RaftMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RaftMessage_descriptor_;
  metadata.reflection = RaftMessage_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RaftMessage

// optional uint64 region_id = 1;
void RaftMessage::clear_region_id() {
  region_id_ = GOOGLE_ULONGLONG(0);
}
 ::google::protobuf::uint64 RaftMessage::region_id() const {
  // @@protoc_insertion_point(field_get:raft_messagepb.RaftMessage.region_id)
  return region_id_;
}
 void RaftMessage::set_region_id(::google::protobuf::uint64 value) {
  
  region_id_ = value;
  // @@protoc_insertion_point(field_set:raft_messagepb.RaftMessage.region_id)
}

// optional .metapb.Peer from_peer = 2;
bool RaftMessage::has_from_peer() const {
  return !_is_default_instance_ && from_peer_ != NULL;
}
void RaftMessage::clear_from_peer() {
  if (GetArenaNoVirtual() == NULL && from_peer_ != NULL) delete from_peer_;
  from_peer_ = NULL;
}
const ::metapb::Peer& RaftMessage::from_peer() const {
  // @@protoc_insertion_point(field_get:raft_messagepb.RaftMessage.from_peer)
  return from_peer_ != NULL ? *from_peer_ : *default_instance_->from_peer_;
}
::metapb::Peer* RaftMessage::mutable_from_peer() {
  
  if (from_peer_ == NULL) {
    from_peer_ = new ::metapb::Peer;
  }
  // @@protoc_insertion_point(field_mutable:raft_messagepb.RaftMessage.from_peer)
  return from_peer_;
}
::metapb::Peer* RaftMessage::release_from_peer() {
  // @@protoc_insertion_point(field_release:raft_messagepb.RaftMessage.from_peer)
  
  ::metapb::Peer* temp = from_peer_;
  from_peer_ = NULL;
  return temp;
}
void RaftMessage::set_allocated_from_peer(::metapb::Peer* from_peer) {
  delete from_peer_;
  from_peer_ = from_peer;
  if (from_peer) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:raft_messagepb.RaftMessage.from_peer)
}

// optional .metapb.Peer to_peer = 3;
bool RaftMessage::has_to_peer() const {
  return !_is_default_instance_ && to_peer_ != NULL;
}
void RaftMessage::clear_to_peer() {
  if (GetArenaNoVirtual() == NULL && to_peer_ != NULL) delete to_peer_;
  to_peer_ = NULL;
}
const ::metapb::Peer& RaftMessage::to_peer() const {
  // @@protoc_insertion_point(field_get:raft_messagepb.RaftMessage.to_peer)
  return to_peer_ != NULL ? *to_peer_ : *default_instance_->to_peer_;
}
::metapb::Peer* RaftMessage::mutable_to_peer() {
  
  if (to_peer_ == NULL) {
    to_peer_ = new ::metapb::Peer;
  }
  // @@protoc_insertion_point(field_mutable:raft_messagepb.RaftMessage.to_peer)
  return to_peer_;
}
::metapb::Peer* RaftMessage::release_to_peer() {
  // @@protoc_insertion_point(field_release:raft_messagepb.RaftMessage.to_peer)
  
  ::metapb::Peer* temp = to_peer_;
  to_peer_ = NULL;
  return temp;
}
void RaftMessage::set_allocated_to_peer(::metapb::Peer* to_peer) {
  delete to_peer_;
  to_peer_ = to_peer;
  if (to_peer) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:raft_messagepb.RaftMessage.to_peer)
}

// optional .eraftpb.Message message = 4;
bool RaftMessage::has_message() const {
  return !_is_default_instance_ && message_ != NULL;
}
void RaftMessage::clear_message() {
  if (GetArenaNoVirtual() == NULL && message_ != NULL) delete message_;
  message_ = NULL;
}
const ::eraftpb::Message& RaftMessage::message() const {
  // @@protoc_insertion_point(field_get:raft_messagepb.RaftMessage.message)
  return message_ != NULL ? *message_ : *default_instance_->message_;
}
::eraftpb::Message* RaftMessage::mutable_message() {
  
  if (message_ == NULL) {
    message_ = new ::eraftpb::Message;
  }
  // @@protoc_insertion_point(field_mutable:raft_messagepb.RaftMessage.message)
  return message_;
}
::eraftpb::Message* RaftMessage::release_message() {
  // @@protoc_insertion_point(field_release:raft_messagepb.RaftMessage.message)
  
  ::eraftpb::Message* temp = message_;
  message_ = NULL;
  return temp;
}
void RaftMessage::set_allocated_message(::eraftpb::Message* message) {
  delete message_;
  message_ = message;
  if (message) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:raft_messagepb.RaftMessage.message)
}

// optional .metapb.RegionEpoch region_epoch = 5;
bool RaftMessage::has_region_epoch() const {
  return !_is_default_instance_ && region_epoch_ != NULL;
}
void RaftMessage::clear_region_epoch() {
  if (GetArenaNoVirtual() == NULL && region_epoch_ != NULL) delete region_epoch_;
  region_epoch_ = NULL;
}
const ::metapb::RegionEpoch& RaftMessage::region_epoch() const {
  // @@protoc_insertion_point(field_get:raft_messagepb.RaftMessage.region_epoch)
  return region_epoch_ != NULL ? *region_epoch_ : *default_instance_->region_epoch_;
}
::metapb::RegionEpoch* RaftMessage::mutable_region_epoch() {
  
  if (region_epoch_ == NULL) {
    region_epoch_ = new ::metapb::RegionEpoch;
  }
  // @@protoc_insertion_point(field_mutable:raft_messagepb.RaftMessage.region_epoch)
  return region_epoch_;
}
::metapb::RegionEpoch* RaftMessage::release_region_epoch() {
  // @@protoc_insertion_point(field_release:raft_messagepb.RaftMessage.region_epoch)
  
  ::metapb::RegionEpoch* temp = region_epoch_;
  region_epoch_ = NULL;
  return temp;
}
void RaftMessage::set_allocated_region_epoch(::metapb::RegionEpoch* region_epoch) {
  delete region_epoch_;
  region_epoch_ = region_epoch;
  if (region_epoch) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:raft_messagepb.RaftMessage.region_epoch)
}

// optional bool is_tombstone = 6;
void RaftMessage::clear_is_tombstone() {
  is_tombstone_ = false;
}
 bool RaftMessage::is_tombstone() const {
  // @@protoc_insertion_point(field_get:raft_messagepb.RaftMessage.is_tombstone)
  return is_tombstone_;
}
 void RaftMessage::set_is_tombstone(bool value) {
  
  is_tombstone_ = value;
  // @@protoc_insertion_point(field_set:raft_messagepb.RaftMessage.is_tombstone)
}

// optional bytes start_key = 7;
void RaftMessage::clear_start_key() {
  start_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& RaftMessage::start_key() const {
  // @@protoc_insertion_point(field_get:raft_messagepb.RaftMessage.start_key)
  return start_key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RaftMessage::set_start_key(const ::std::string& value) {
  
  start_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:raft_messagepb.RaftMessage.start_key)
}
 void RaftMessage::set_start_key(const char* value) {
  
  start_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:raft_messagepb.RaftMessage.start_key)
}
 void RaftMessage::set_start_key(const void* value, size_t size) {
  
  start_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:raft_messagepb.RaftMessage.start_key)
}
 ::std::string* RaftMessage::mutable_start_key() {
  
  // @@protoc_insertion_point(field_mutable:raft_messagepb.RaftMessage.start_key)
  return start_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* RaftMessage::release_start_key() {
  // @@protoc_insertion_point(field_release:raft_messagepb.RaftMessage.start_key)
  
  return start_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RaftMessage::set_allocated_start_key(::std::string* start_key) {
  if (start_key != NULL) {
    
  } else {
    
  }
  start_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), start_key);
  // @@protoc_insertion_point(field_set_allocated:raft_messagepb.RaftMessage.start_key)
}

// optional bytes end_key = 8;
void RaftMessage::clear_end_key() {
  end_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& RaftMessage::end_key() const {
  // @@protoc_insertion_point(field_get:raft_messagepb.RaftMessage.end_key)
  return end_key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RaftMessage::set_end_key(const ::std::string& value) {
  
  end_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:raft_messagepb.RaftMessage.end_key)
}
 void RaftMessage::set_end_key(const char* value) {
  
  end_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:raft_messagepb.RaftMessage.end_key)
}
 void RaftMessage::set_end_key(const void* value, size_t size) {
  
  end_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:raft_messagepb.RaftMessage.end_key)
}
 ::std::string* RaftMessage::mutable_end_key() {
  
  // @@protoc_insertion_point(field_mutable:raft_messagepb.RaftMessage.end_key)
  return end_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* RaftMessage::release_end_key() {
  // @@protoc_insertion_point(field_release:raft_messagepb.RaftMessage.end_key)
  
  return end_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RaftMessage::set_allocated_end_key(::std::string* end_key) {
  if (end_key != NULL) {
    
  } else {
    
  }
  end_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), end_key);
  // @@protoc_insertion_point(field_set_allocated:raft_messagepb.RaftMessage.end_key)
}

// optional bytes data = 9;
void RaftMessage::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& RaftMessage::data() const {
  // @@protoc_insertion_point(field_get:raft_messagepb.RaftMessage.data)
  return data_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RaftMessage::set_data(const ::std::string& value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:raft_messagepb.RaftMessage.data)
}
 void RaftMessage::set_data(const char* value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:raft_messagepb.RaftMessage.data)
}
 void RaftMessage::set_data(const void* value, size_t size) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:raft_messagepb.RaftMessage.data)
}
 ::std::string* RaftMessage::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:raft_messagepb.RaftMessage.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* RaftMessage::release_data() {
  // @@protoc_insertion_point(field_release:raft_messagepb.RaftMessage.data)
  
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RaftMessage::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:raft_messagepb.RaftMessage.data)
}

// optional .raft_messagepb.RaftMessageType raft_msg_type = 10;
void RaftMessage::clear_raft_msg_type() {
  raft_msg_type_ = 0;
}
 ::raft_messagepb::RaftMessageType RaftMessage::raft_msg_type() const {
  // @@protoc_insertion_point(field_get:raft_messagepb.RaftMessage.raft_msg_type)
  return static_cast< ::raft_messagepb::RaftMessageType >(raft_msg_type_);
}
 void RaftMessage::set_raft_msg_type(::raft_messagepb::RaftMessageType value) {
  
  raft_msg_type_ = value;
  // @@protoc_insertion_point(field_set:raft_messagepb.RaftMessage.raft_msg_type)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RaftLocalState::kHardStateFieldNumber;
const int RaftLocalState::kLastIndexFieldNumber;
const int RaftLocalState::kLastTermFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RaftLocalState::RaftLocalState()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:raft_messagepb.RaftLocalState)
}

void RaftLocalState::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  hard_state_ = const_cast< ::eraftpb::HardState*>(&::eraftpb::HardState::default_instance());
}

RaftLocalState::RaftLocalState(const RaftLocalState& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:raft_messagepb.RaftLocalState)
}

void RaftLocalState::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  hard_state_ = NULL;
  last_index_ = GOOGLE_ULONGLONG(0);
  last_term_ = GOOGLE_ULONGLONG(0);
}

RaftLocalState::~RaftLocalState() {
  // @@protoc_insertion_point(destructor:raft_messagepb.RaftLocalState)
  SharedDtor();
}

void RaftLocalState::SharedDtor() {
  if (this != default_instance_) {
    delete hard_state_;
  }
}

void RaftLocalState::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RaftLocalState::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RaftLocalState_descriptor_;
}

const RaftLocalState& RaftLocalState::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_raft_5fmessagepb_2eproto();
  return *default_instance_;
}

RaftLocalState* RaftLocalState::default_instance_ = NULL;

RaftLocalState* RaftLocalState::New(::google::protobuf::Arena* arena) const {
  RaftLocalState* n = new RaftLocalState;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RaftLocalState::Clear() {
// @@protoc_insertion_point(message_clear_start:raft_messagepb.RaftLocalState)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(RaftLocalState, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<RaftLocalState*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(last_index_, last_term_);
  if (GetArenaNoVirtual() == NULL && hard_state_ != NULL) delete hard_state_;
  hard_state_ = NULL;

#undef ZR_HELPER_
#undef ZR_

}

bool RaftLocalState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:raft_messagepb.RaftLocalState)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .eraftpb.HardState hard_state = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_hard_state()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_last_index;
        break;
      }

      // optional uint64 last_index = 2;
      case 2: {
        if (tag == 16) {
         parse_last_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &last_index_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_last_term;
        break;
      }

      // optional uint64 last_term = 3;
      case 3: {
        if (tag == 24) {
         parse_last_term:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &last_term_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:raft_messagepb.RaftLocalState)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:raft_messagepb.RaftLocalState)
  return false;
#undef DO_
}

void RaftLocalState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:raft_messagepb.RaftLocalState)
  // optional .eraftpb.HardState hard_state = 1;
  if (this->has_hard_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->hard_state_, output);
  }

  // optional uint64 last_index = 2;
  if (this->last_index() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->last_index(), output);
  }

  // optional uint64 last_term = 3;
  if (this->last_term() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->last_term(), output);
  }

  // @@protoc_insertion_point(serialize_end:raft_messagepb.RaftLocalState)
}

::google::protobuf::uint8* RaftLocalState::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:raft_messagepb.RaftLocalState)
  // optional .eraftpb.HardState hard_state = 1;
  if (this->has_hard_state()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->hard_state_, false, target);
  }

  // optional uint64 last_index = 2;
  if (this->last_index() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->last_index(), target);
  }

  // optional uint64 last_term = 3;
  if (this->last_term() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->last_term(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:raft_messagepb.RaftLocalState)
  return target;
}

int RaftLocalState::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:raft_messagepb.RaftLocalState)
  int total_size = 0;

  // optional .eraftpb.HardState hard_state = 1;
  if (this->has_hard_state()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->hard_state_);
  }

  // optional uint64 last_index = 2;
  if (this->last_index() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->last_index());
  }

  // optional uint64 last_term = 3;
  if (this->last_term() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->last_term());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RaftLocalState::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:raft_messagepb.RaftLocalState)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const RaftLocalState* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const RaftLocalState>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:raft_messagepb.RaftLocalState)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:raft_messagepb.RaftLocalState)
    MergeFrom(*source);
  }
}

void RaftLocalState::MergeFrom(const RaftLocalState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:raft_messagepb.RaftLocalState)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.has_hard_state()) {
    mutable_hard_state()->::eraftpb::HardState::MergeFrom(from.hard_state());
  }
  if (from.last_index() != 0) {
    set_last_index(from.last_index());
  }
  if (from.last_term() != 0) {
    set_last_term(from.last_term());
  }
}

void RaftLocalState::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:raft_messagepb.RaftLocalState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RaftLocalState::CopyFrom(const RaftLocalState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:raft_messagepb.RaftLocalState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RaftLocalState::IsInitialized() const {

  return true;
}

void RaftLocalState::Swap(RaftLocalState* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RaftLocalState::InternalSwap(RaftLocalState* other) {
  std::swap(hard_state_, other->hard_state_);
  std::swap(last_index_, other->last_index_);
  std::swap(last_term_, other->last_term_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RaftLocalState::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RaftLocalState_descriptor_;
  metadata.reflection = RaftLocalState_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RaftLocalState

// optional .eraftpb.HardState hard_state = 1;
bool RaftLocalState::has_hard_state() const {
  return !_is_default_instance_ && hard_state_ != NULL;
}
void RaftLocalState::clear_hard_state() {
  if (GetArenaNoVirtual() == NULL && hard_state_ != NULL) delete hard_state_;
  hard_state_ = NULL;
}
const ::eraftpb::HardState& RaftLocalState::hard_state() const {
  // @@protoc_insertion_point(field_get:raft_messagepb.RaftLocalState.hard_state)
  return hard_state_ != NULL ? *hard_state_ : *default_instance_->hard_state_;
}
::eraftpb::HardState* RaftLocalState::mutable_hard_state() {
  
  if (hard_state_ == NULL) {
    hard_state_ = new ::eraftpb::HardState;
  }
  // @@protoc_insertion_point(field_mutable:raft_messagepb.RaftLocalState.hard_state)
  return hard_state_;
}
::eraftpb::HardState* RaftLocalState::release_hard_state() {
  // @@protoc_insertion_point(field_release:raft_messagepb.RaftLocalState.hard_state)
  
  ::eraftpb::HardState* temp = hard_state_;
  hard_state_ = NULL;
  return temp;
}
void RaftLocalState::set_allocated_hard_state(::eraftpb::HardState* hard_state) {
  delete hard_state_;
  hard_state_ = hard_state;
  if (hard_state) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:raft_messagepb.RaftLocalState.hard_state)
}

// optional uint64 last_index = 2;
void RaftLocalState::clear_last_index() {
  last_index_ = GOOGLE_ULONGLONG(0);
}
 ::google::protobuf::uint64 RaftLocalState::last_index() const {
  // @@protoc_insertion_point(field_get:raft_messagepb.RaftLocalState.last_index)
  return last_index_;
}
 void RaftLocalState::set_last_index(::google::protobuf::uint64 value) {
  
  last_index_ = value;
  // @@protoc_insertion_point(field_set:raft_messagepb.RaftLocalState.last_index)
}

// optional uint64 last_term = 3;
void RaftLocalState::clear_last_term() {
  last_term_ = GOOGLE_ULONGLONG(0);
}
 ::google::protobuf::uint64 RaftLocalState::last_term() const {
  // @@protoc_insertion_point(field_get:raft_messagepb.RaftLocalState.last_term)
  return last_term_;
}
 void RaftLocalState::set_last_term(::google::protobuf::uint64 value) {
  
  last_term_ = value;
  // @@protoc_insertion_point(field_set:raft_messagepb.RaftLocalState.last_term)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RaftApplyState::kAppliedIndexFieldNumber;
const int RaftApplyState::kIndexFieldNumber;
const int RaftApplyState::kTermFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RaftApplyState::RaftApplyState()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:raft_messagepb.RaftApplyState)
}

void RaftApplyState::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

RaftApplyState::RaftApplyState(const RaftApplyState& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:raft_messagepb.RaftApplyState)
}

void RaftApplyState::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  applied_index_ = GOOGLE_ULONGLONG(0);
  index_ = GOOGLE_ULONGLONG(0);
  term_ = GOOGLE_ULONGLONG(0);
}

RaftApplyState::~RaftApplyState() {
  // @@protoc_insertion_point(destructor:raft_messagepb.RaftApplyState)
  SharedDtor();
}

void RaftApplyState::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RaftApplyState::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RaftApplyState::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RaftApplyState_descriptor_;
}

const RaftApplyState& RaftApplyState::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_raft_5fmessagepb_2eproto();
  return *default_instance_;
}

RaftApplyState* RaftApplyState::default_instance_ = NULL;

RaftApplyState* RaftApplyState::New(::google::protobuf::Arena* arena) const {
  RaftApplyState* n = new RaftApplyState;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RaftApplyState::Clear() {
// @@protoc_insertion_point(message_clear_start:raft_messagepb.RaftApplyState)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(RaftApplyState, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<RaftApplyState*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(applied_index_, term_);

#undef ZR_HELPER_
#undef ZR_

}

bool RaftApplyState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:raft_messagepb.RaftApplyState)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 applied_index = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &applied_index_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_index;
        break;
      }

      // optional uint64 index = 2;
      case 2: {
        if (tag == 16) {
         parse_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &index_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_term;
        break;
      }

      // optional uint64 term = 3;
      case 3: {
        if (tag == 24) {
         parse_term:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &term_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:raft_messagepb.RaftApplyState)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:raft_messagepb.RaftApplyState)
  return false;
#undef DO_
}

void RaftApplyState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:raft_messagepb.RaftApplyState)
  // optional uint64 applied_index = 1;
  if (this->applied_index() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->applied_index(), output);
  }

  // optional uint64 index = 2;
  if (this->index() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->index(), output);
  }

  // optional uint64 term = 3;
  if (this->term() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->term(), output);
  }

  // @@protoc_insertion_point(serialize_end:raft_messagepb.RaftApplyState)
}

::google::protobuf::uint8* RaftApplyState::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:raft_messagepb.RaftApplyState)
  // optional uint64 applied_index = 1;
  if (this->applied_index() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->applied_index(), target);
  }

  // optional uint64 index = 2;
  if (this->index() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->index(), target);
  }

  // optional uint64 term = 3;
  if (this->term() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->term(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:raft_messagepb.RaftApplyState)
  return target;
}

int RaftApplyState::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:raft_messagepb.RaftApplyState)
  int total_size = 0;

  // optional uint64 applied_index = 1;
  if (this->applied_index() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->applied_index());
  }

  // optional uint64 index = 2;
  if (this->index() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->index());
  }

  // optional uint64 term = 3;
  if (this->term() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->term());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RaftApplyState::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:raft_messagepb.RaftApplyState)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const RaftApplyState* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const RaftApplyState>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:raft_messagepb.RaftApplyState)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:raft_messagepb.RaftApplyState)
    MergeFrom(*source);
  }
}

void RaftApplyState::MergeFrom(const RaftApplyState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:raft_messagepb.RaftApplyState)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.applied_index() != 0) {
    set_applied_index(from.applied_index());
  }
  if (from.index() != 0) {
    set_index(from.index());
  }
  if (from.term() != 0) {
    set_term(from.term());
  }
}

void RaftApplyState::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:raft_messagepb.RaftApplyState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RaftApplyState::CopyFrom(const RaftApplyState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:raft_messagepb.RaftApplyState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RaftApplyState::IsInitialized() const {

  return true;
}

void RaftApplyState::Swap(RaftApplyState* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RaftApplyState::InternalSwap(RaftApplyState* other) {
  std::swap(applied_index_, other->applied_index_);
  std::swap(index_, other->index_);
  std::swap(term_, other->term_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RaftApplyState::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RaftApplyState_descriptor_;
  metadata.reflection = RaftApplyState_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RaftApplyState

// optional uint64 applied_index = 1;
void RaftApplyState::clear_applied_index() {
  applied_index_ = GOOGLE_ULONGLONG(0);
}
 ::google::protobuf::uint64 RaftApplyState::applied_index() const {
  // @@protoc_insertion_point(field_get:raft_messagepb.RaftApplyState.applied_index)
  return applied_index_;
}
 void RaftApplyState::set_applied_index(::google::protobuf::uint64 value) {
  
  applied_index_ = value;
  // @@protoc_insertion_point(field_set:raft_messagepb.RaftApplyState.applied_index)
}

// optional uint64 index = 2;
void RaftApplyState::clear_index() {
  index_ = GOOGLE_ULONGLONG(0);
}
 ::google::protobuf::uint64 RaftApplyState::index() const {
  // @@protoc_insertion_point(field_get:raft_messagepb.RaftApplyState.index)
  return index_;
}
 void RaftApplyState::set_index(::google::protobuf::uint64 value) {
  
  index_ = value;
  // @@protoc_insertion_point(field_set:raft_messagepb.RaftApplyState.index)
}

// optional uint64 term = 3;
void RaftApplyState::clear_term() {
  term_ = GOOGLE_ULONGLONG(0);
}
 ::google::protobuf::uint64 RaftApplyState::term() const {
  // @@protoc_insertion_point(field_get:raft_messagepb.RaftApplyState.term)
  return term_;
}
 void RaftApplyState::set_term(::google::protobuf::uint64 value) {
  
  term_ = value;
  // @@protoc_insertion_point(field_set:raft_messagepb.RaftApplyState.term)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RegionLocalState::kStateFieldNumber;
const int RegionLocalState::kRegionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RegionLocalState::RegionLocalState()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:raft_messagepb.RegionLocalState)
}

void RegionLocalState::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  region_ = const_cast< ::metapb::Region*>(&::metapb::Region::default_instance());
}

RegionLocalState::RegionLocalState(const RegionLocalState& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:raft_messagepb.RegionLocalState)
}

void RegionLocalState::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  state_ = 0;
  region_ = NULL;
}

RegionLocalState::~RegionLocalState() {
  // @@protoc_insertion_point(destructor:raft_messagepb.RegionLocalState)
  SharedDtor();
}

void RegionLocalState::SharedDtor() {
  if (this != default_instance_) {
    delete region_;
  }
}

void RegionLocalState::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RegionLocalState::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RegionLocalState_descriptor_;
}

const RegionLocalState& RegionLocalState::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_raft_5fmessagepb_2eproto();
  return *default_instance_;
}

RegionLocalState* RegionLocalState::default_instance_ = NULL;

RegionLocalState* RegionLocalState::New(::google::protobuf::Arena* arena) const {
  RegionLocalState* n = new RegionLocalState;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RegionLocalState::Clear() {
// @@protoc_insertion_point(message_clear_start:raft_messagepb.RegionLocalState)
  state_ = 0;
  if (GetArenaNoVirtual() == NULL && region_ != NULL) delete region_;
  region_ = NULL;
}

bool RegionLocalState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:raft_messagepb.RegionLocalState)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .raft_messagepb.PeerState state = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_state(static_cast< ::raft_messagepb::PeerState >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_region;
        break;
      }

      // optional .metapb.Region region = 2;
      case 2: {
        if (tag == 18) {
         parse_region:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_region()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:raft_messagepb.RegionLocalState)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:raft_messagepb.RegionLocalState)
  return false;
#undef DO_
}

void RegionLocalState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:raft_messagepb.RegionLocalState)
  // optional .raft_messagepb.PeerState state = 1;
  if (this->state() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->state(), output);
  }

  // optional .metapb.Region region = 2;
  if (this->has_region()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->region_, output);
  }

  // @@protoc_insertion_point(serialize_end:raft_messagepb.RegionLocalState)
}

::google::protobuf::uint8* RegionLocalState::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:raft_messagepb.RegionLocalState)
  // optional .raft_messagepb.PeerState state = 1;
  if (this->state() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->state(), target);
  }

  // optional .metapb.Region region = 2;
  if (this->has_region()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->region_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:raft_messagepb.RegionLocalState)
  return target;
}

int RegionLocalState::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:raft_messagepb.RegionLocalState)
  int total_size = 0;

  // optional .raft_messagepb.PeerState state = 1;
  if (this->state() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->state());
  }

  // optional .metapb.Region region = 2;
  if (this->has_region()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->region_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RegionLocalState::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:raft_messagepb.RegionLocalState)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const RegionLocalState* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const RegionLocalState>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:raft_messagepb.RegionLocalState)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:raft_messagepb.RegionLocalState)
    MergeFrom(*source);
  }
}

void RegionLocalState::MergeFrom(const RegionLocalState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:raft_messagepb.RegionLocalState)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.state() != 0) {
    set_state(from.state());
  }
  if (from.has_region()) {
    mutable_region()->::metapb::Region::MergeFrom(from.region());
  }
}

void RegionLocalState::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:raft_messagepb.RegionLocalState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RegionLocalState::CopyFrom(const RegionLocalState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:raft_messagepb.RegionLocalState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegionLocalState::IsInitialized() const {

  return true;
}

void RegionLocalState::Swap(RegionLocalState* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RegionLocalState::InternalSwap(RegionLocalState* other) {
  std::swap(state_, other->state_);
  std::swap(region_, other->region_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RegionLocalState::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RegionLocalState_descriptor_;
  metadata.reflection = RegionLocalState_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RegionLocalState

// optional .raft_messagepb.PeerState state = 1;
void RegionLocalState::clear_state() {
  state_ = 0;
}
 ::raft_messagepb::PeerState RegionLocalState::state() const {
  // @@protoc_insertion_point(field_get:raft_messagepb.RegionLocalState.state)
  return static_cast< ::raft_messagepb::PeerState >(state_);
}
 void RegionLocalState::set_state(::raft_messagepb::PeerState value) {
  
  state_ = value;
  // @@protoc_insertion_point(field_set:raft_messagepb.RegionLocalState.state)
}

// optional .metapb.Region region = 2;
bool RegionLocalState::has_region() const {
  return !_is_default_instance_ && region_ != NULL;
}
void RegionLocalState::clear_region() {
  if (GetArenaNoVirtual() == NULL && region_ != NULL) delete region_;
  region_ = NULL;
}
const ::metapb::Region& RegionLocalState::region() const {
  // @@protoc_insertion_point(field_get:raft_messagepb.RegionLocalState.region)
  return region_ != NULL ? *region_ : *default_instance_->region_;
}
::metapb::Region* RegionLocalState::mutable_region() {
  
  if (region_ == NULL) {
    region_ = new ::metapb::Region;
  }
  // @@protoc_insertion_point(field_mutable:raft_messagepb.RegionLocalState.region)
  return region_;
}
::metapb::Region* RegionLocalState::release_region() {
  // @@protoc_insertion_point(field_release:raft_messagepb.RegionLocalState.region)
  
  ::metapb::Region* temp = region_;
  region_ = NULL;
  return temp;
}
void RegionLocalState::set_allocated_region(::metapb::Region* region) {
  delete region_;
  region_ = region;
  if (region) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:raft_messagepb.RegionLocalState.region)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StoreIdent::kClusterIdFieldNumber;
const int StoreIdent::kStoreIdFieldNumber;
const int StoreIdent::kAddrFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StoreIdent::StoreIdent()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:raft_messagepb.StoreIdent)
}

void StoreIdent::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

StoreIdent::StoreIdent(const StoreIdent& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:raft_messagepb.StoreIdent)
}

void StoreIdent::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  cluster_id_ = GOOGLE_ULONGLONG(0);
  store_id_ = GOOGLE_ULONGLONG(0);
  addr_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

StoreIdent::~StoreIdent() {
  // @@protoc_insertion_point(destructor:raft_messagepb.StoreIdent)
  SharedDtor();
}

void StoreIdent::SharedDtor() {
  addr_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void StoreIdent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StoreIdent::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StoreIdent_descriptor_;
}

const StoreIdent& StoreIdent::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_raft_5fmessagepb_2eproto();
  return *default_instance_;
}

StoreIdent* StoreIdent::default_instance_ = NULL;

StoreIdent* StoreIdent::New(::google::protobuf::Arena* arena) const {
  StoreIdent* n = new StoreIdent;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void StoreIdent::Clear() {
// @@protoc_insertion_point(message_clear_start:raft_messagepb.StoreIdent)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(StoreIdent, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<StoreIdent*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(cluster_id_, store_id_);
  addr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

}

bool StoreIdent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:raft_messagepb.StoreIdent)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 cluster_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cluster_id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_store_id;
        break;
      }

      // optional uint64 store_id = 2;
      case 2: {
        if (tag == 16) {
         parse_store_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &store_id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_addr;
        break;
      }

      // optional string addr = 3;
      case 3: {
        if (tag == 26) {
         parse_addr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_addr()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->addr().data(), this->addr().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "raft_messagepb.StoreIdent.addr"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:raft_messagepb.StoreIdent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:raft_messagepb.StoreIdent)
  return false;
#undef DO_
}

void StoreIdent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:raft_messagepb.StoreIdent)
  // optional uint64 cluster_id = 1;
  if (this->cluster_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->cluster_id(), output);
  }

  // optional uint64 store_id = 2;
  if (this->store_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->store_id(), output);
  }

  // optional string addr = 3;
  if (this->addr().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->addr().data(), this->addr().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "raft_messagepb.StoreIdent.addr");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->addr(), output);
  }

  // @@protoc_insertion_point(serialize_end:raft_messagepb.StoreIdent)
}

::google::protobuf::uint8* StoreIdent::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:raft_messagepb.StoreIdent)
  // optional uint64 cluster_id = 1;
  if (this->cluster_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->cluster_id(), target);
  }

  // optional uint64 store_id = 2;
  if (this->store_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->store_id(), target);
  }

  // optional string addr = 3;
  if (this->addr().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->addr().data(), this->addr().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "raft_messagepb.StoreIdent.addr");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->addr(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:raft_messagepb.StoreIdent)
  return target;
}

int StoreIdent::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:raft_messagepb.StoreIdent)
  int total_size = 0;

  // optional uint64 cluster_id = 1;
  if (this->cluster_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->cluster_id());
  }

  // optional uint64 store_id = 2;
  if (this->store_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->store_id());
  }

  // optional string addr = 3;
  if (this->addr().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->addr());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StoreIdent::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:raft_messagepb.StoreIdent)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const StoreIdent* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const StoreIdent>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:raft_messagepb.StoreIdent)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:raft_messagepb.StoreIdent)
    MergeFrom(*source);
  }
}

void StoreIdent::MergeFrom(const StoreIdent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:raft_messagepb.StoreIdent)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.cluster_id() != 0) {
    set_cluster_id(from.cluster_id());
  }
  if (from.store_id() != 0) {
    set_store_id(from.store_id());
  }
  if (from.addr().size() > 0) {

    addr_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.addr_);
  }
}

void StoreIdent::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:raft_messagepb.StoreIdent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StoreIdent::CopyFrom(const StoreIdent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:raft_messagepb.StoreIdent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StoreIdent::IsInitialized() const {

  return true;
}

void StoreIdent::Swap(StoreIdent* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StoreIdent::InternalSwap(StoreIdent* other) {
  std::swap(cluster_id_, other->cluster_id_);
  std::swap(store_id_, other->store_id_);
  addr_.Swap(&other->addr_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata StoreIdent::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StoreIdent_descriptor_;
  metadata.reflection = StoreIdent_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// StoreIdent

// optional uint64 cluster_id = 1;
void StoreIdent::clear_cluster_id() {
  cluster_id_ = GOOGLE_ULONGLONG(0);
}
 ::google::protobuf::uint64 StoreIdent::cluster_id() const {
  // @@protoc_insertion_point(field_get:raft_messagepb.StoreIdent.cluster_id)
  return cluster_id_;
}
 void StoreIdent::set_cluster_id(::google::protobuf::uint64 value) {
  
  cluster_id_ = value;
  // @@protoc_insertion_point(field_set:raft_messagepb.StoreIdent.cluster_id)
}

// optional uint64 store_id = 2;
void StoreIdent::clear_store_id() {
  store_id_ = GOOGLE_ULONGLONG(0);
}
 ::google::protobuf::uint64 StoreIdent::store_id() const {
  // @@protoc_insertion_point(field_get:raft_messagepb.StoreIdent.store_id)
  return store_id_;
}
 void StoreIdent::set_store_id(::google::protobuf::uint64 value) {
  
  store_id_ = value;
  // @@protoc_insertion_point(field_set:raft_messagepb.StoreIdent.store_id)
}

// optional string addr = 3;
void StoreIdent::clear_addr() {
  addr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& StoreIdent::addr() const {
  // @@protoc_insertion_point(field_get:raft_messagepb.StoreIdent.addr)
  return addr_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void StoreIdent::set_addr(const ::std::string& value) {
  
  addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:raft_messagepb.StoreIdent.addr)
}
 void StoreIdent::set_addr(const char* value) {
  
  addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:raft_messagepb.StoreIdent.addr)
}
 void StoreIdent::set_addr(const char* value, size_t size) {
  
  addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:raft_messagepb.StoreIdent.addr)
}
 ::std::string* StoreIdent::mutable_addr() {
  
  // @@protoc_insertion_point(field_mutable:raft_messagepb.StoreIdent.addr)
  return addr_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* StoreIdent::release_addr() {
  // @@protoc_insertion_point(field_release:raft_messagepb.StoreIdent.addr)
  
  return addr_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void StoreIdent::set_allocated_addr(::std::string* addr) {
  if (addr != NULL) {
    
  } else {
    
  }
  addr_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), addr);
  // @@protoc_insertion_point(field_set_allocated:raft_messagepb.StoreIdent.addr)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int KeyValue::kKeyFieldNumber;
const int KeyValue::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

KeyValue::KeyValue()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:raft_messagepb.KeyValue)
}

void KeyValue::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

KeyValue::KeyValue(const KeyValue& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:raft_messagepb.KeyValue)
}

void KeyValue::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

KeyValue::~KeyValue() {
  // @@protoc_insertion_point(destructor:raft_messagepb.KeyValue)
  SharedDtor();
}

void KeyValue::SharedDtor() {
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void KeyValue::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* KeyValue::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return KeyValue_descriptor_;
}

const KeyValue& KeyValue::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_raft_5fmessagepb_2eproto();
  return *default_instance_;
}

KeyValue* KeyValue::default_instance_ = NULL;

KeyValue* KeyValue::New(::google::protobuf::Arena* arena) const {
  KeyValue* n = new KeyValue;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void KeyValue::Clear() {
// @@protoc_insertion_point(message_clear_start:raft_messagepb.KeyValue)
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool KeyValue::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:raft_messagepb.KeyValue)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes key = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_key()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_value;
        break;
      }

      // optional bytes value = 2;
      case 2: {
        if (tag == 18) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_value()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:raft_messagepb.KeyValue)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:raft_messagepb.KeyValue)
  return false;
#undef DO_
}

void KeyValue::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:raft_messagepb.KeyValue)
  // optional bytes key = 1;
  if (this->key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->key(), output);
  }

  // optional bytes value = 2;
  if (this->value().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->value(), output);
  }

  // @@protoc_insertion_point(serialize_end:raft_messagepb.KeyValue)
}

::google::protobuf::uint8* KeyValue::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:raft_messagepb.KeyValue)
  // optional bytes key = 1;
  if (this->key().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->key(), target);
  }

  // optional bytes value = 2;
  if (this->value().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->value(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:raft_messagepb.KeyValue)
  return target;
}

int KeyValue::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:raft_messagepb.KeyValue)
  int total_size = 0;

  // optional bytes key = 1;
  if (this->key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->key());
  }

  // optional bytes value = 2;
  if (this->value().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->value());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void KeyValue::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:raft_messagepb.KeyValue)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const KeyValue* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const KeyValue>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:raft_messagepb.KeyValue)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:raft_messagepb.KeyValue)
    MergeFrom(*source);
  }
}

void KeyValue::MergeFrom(const KeyValue& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:raft_messagepb.KeyValue)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.key().size() > 0) {

    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  if (from.value().size() > 0) {

    value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
}

void KeyValue::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:raft_messagepb.KeyValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KeyValue::CopyFrom(const KeyValue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:raft_messagepb.KeyValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KeyValue::IsInitialized() const {

  return true;
}

void KeyValue::Swap(KeyValue* other) {
  if (other == this) return;
  InternalSwap(other);
}
void KeyValue::InternalSwap(KeyValue* other) {
  key_.Swap(&other->key_);
  value_.Swap(&other->value_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata KeyValue::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = KeyValue_descriptor_;
  metadata.reflection = KeyValue_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// KeyValue

// optional bytes key = 1;
void KeyValue::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& KeyValue::key() const {
  // @@protoc_insertion_point(field_get:raft_messagepb.KeyValue.key)
  return key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void KeyValue::set_key(const ::std::string& value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:raft_messagepb.KeyValue.key)
}
 void KeyValue::set_key(const char* value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:raft_messagepb.KeyValue.key)
}
 void KeyValue::set_key(const void* value, size_t size) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:raft_messagepb.KeyValue.key)
}
 ::std::string* KeyValue::mutable_key() {
  
  // @@protoc_insertion_point(field_mutable:raft_messagepb.KeyValue.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* KeyValue::release_key() {
  // @@protoc_insertion_point(field_release:raft_messagepb.KeyValue.key)
  
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void KeyValue::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    
  } else {
    
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:raft_messagepb.KeyValue.key)
}

// optional bytes value = 2;
void KeyValue::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& KeyValue::value() const {
  // @@protoc_insertion_point(field_get:raft_messagepb.KeyValue.value)
  return value_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void KeyValue::set_value(const ::std::string& value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:raft_messagepb.KeyValue.value)
}
 void KeyValue::set_value(const char* value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:raft_messagepb.KeyValue.value)
}
 void KeyValue::set_value(const void* value, size_t size) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:raft_messagepb.KeyValue.value)
}
 ::std::string* KeyValue::mutable_value() {
  
  // @@protoc_insertion_point(field_mutable:raft_messagepb.KeyValue.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* KeyValue::release_value() {
  // @@protoc_insertion_point(field_release:raft_messagepb.KeyValue.value)
  
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void KeyValue::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    
  } else {
    
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:raft_messagepb.KeyValue.value)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetRequest::kCfFieldNumber;
const int GetRequest::kKeyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetRequest::GetRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:raft_messagepb.GetRequest)
}

void GetRequest::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

GetRequest::GetRequest(const GetRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:raft_messagepb.GetRequest)
}

void GetRequest::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  cf_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

GetRequest::~GetRequest() {
  // @@protoc_insertion_point(destructor:raft_messagepb.GetRequest)
  SharedDtor();
}

void GetRequest::SharedDtor() {
  cf_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void GetRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetRequest_descriptor_;
}

const GetRequest& GetRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_raft_5fmessagepb_2eproto();
  return *default_instance_;
}

GetRequest* GetRequest::default_instance_ = NULL;

GetRequest* GetRequest::New(::google::protobuf::Arena* arena) const {
  GetRequest* n = new GetRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:raft_messagepb.GetRequest)
  cf_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool GetRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:raft_messagepb.GetRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string cf = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cf()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->cf().data(), this->cf().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "raft_messagepb.GetRequest.cf"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_key;
        break;
      }

      // optional bytes key = 2;
      case 2: {
        if (tag == 18) {
         parse_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_key()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:raft_messagepb.GetRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:raft_messagepb.GetRequest)
  return false;
#undef DO_
}

void GetRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:raft_messagepb.GetRequest)
  // optional string cf = 1;
  if (this->cf().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cf().data(), this->cf().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "raft_messagepb.GetRequest.cf");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->cf(), output);
  }

  // optional bytes key = 2;
  if (this->key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->key(), output);
  }

  // @@protoc_insertion_point(serialize_end:raft_messagepb.GetRequest)
}

::google::protobuf::uint8* GetRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:raft_messagepb.GetRequest)
  // optional string cf = 1;
  if (this->cf().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cf().data(), this->cf().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "raft_messagepb.GetRequest.cf");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->cf(), target);
  }

  // optional bytes key = 2;
  if (this->key().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->key(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:raft_messagepb.GetRequest)
  return target;
}

int GetRequest::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:raft_messagepb.GetRequest)
  int total_size = 0;

  // optional string cf = 1;
  if (this->cf().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->cf());
  }

  // optional bytes key = 2;
  if (this->key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->key());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:raft_messagepb.GetRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const GetRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const GetRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:raft_messagepb.GetRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:raft_messagepb.GetRequest)
    MergeFrom(*source);
  }
}

void GetRequest::MergeFrom(const GetRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:raft_messagepb.GetRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.cf().size() > 0) {

    cf_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cf_);
  }
  if (from.key().size() > 0) {

    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
}

void GetRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:raft_messagepb.GetRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetRequest::CopyFrom(const GetRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:raft_messagepb.GetRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetRequest::IsInitialized() const {

  return true;
}

void GetRequest::Swap(GetRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetRequest::InternalSwap(GetRequest* other) {
  cf_.Swap(&other->cf_);
  key_.Swap(&other->key_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetRequest_descriptor_;
  metadata.reflection = GetRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetRequest

// optional string cf = 1;
void GetRequest::clear_cf() {
  cf_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& GetRequest::cf() const {
  // @@protoc_insertion_point(field_get:raft_messagepb.GetRequest.cf)
  return cf_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GetRequest::set_cf(const ::std::string& value) {
  
  cf_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:raft_messagepb.GetRequest.cf)
}
 void GetRequest::set_cf(const char* value) {
  
  cf_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:raft_messagepb.GetRequest.cf)
}
 void GetRequest::set_cf(const char* value, size_t size) {
  
  cf_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:raft_messagepb.GetRequest.cf)
}
 ::std::string* GetRequest::mutable_cf() {
  
  // @@protoc_insertion_point(field_mutable:raft_messagepb.GetRequest.cf)
  return cf_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* GetRequest::release_cf() {
  // @@protoc_insertion_point(field_release:raft_messagepb.GetRequest.cf)
  
  return cf_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GetRequest::set_allocated_cf(::std::string* cf) {
  if (cf != NULL) {
    
  } else {
    
  }
  cf_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cf);
  // @@protoc_insertion_point(field_set_allocated:raft_messagepb.GetRequest.cf)
}

// optional bytes key = 2;
void GetRequest::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& GetRequest::key() const {
  // @@protoc_insertion_point(field_get:raft_messagepb.GetRequest.key)
  return key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GetRequest::set_key(const ::std::string& value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:raft_messagepb.GetRequest.key)
}
 void GetRequest::set_key(const char* value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:raft_messagepb.GetRequest.key)
}
 void GetRequest::set_key(const void* value, size_t size) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:raft_messagepb.GetRequest.key)
}
 ::std::string* GetRequest::mutable_key() {
  
  // @@protoc_insertion_point(field_mutable:raft_messagepb.GetRequest.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* GetRequest::release_key() {
  // @@protoc_insertion_point(field_release:raft_messagepb.GetRequest.key)
  
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GetRequest::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    
  } else {
    
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:raft_messagepb.GetRequest.key)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetResponse::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetResponse::GetResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:raft_messagepb.GetResponse)
}

void GetResponse::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

GetResponse::GetResponse(const GetResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:raft_messagepb.GetResponse)
}

void GetResponse::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

GetResponse::~GetResponse() {
  // @@protoc_insertion_point(destructor:raft_messagepb.GetResponse)
  SharedDtor();
}

void GetResponse::SharedDtor() {
  value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void GetResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetResponse_descriptor_;
}

const GetResponse& GetResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_raft_5fmessagepb_2eproto();
  return *default_instance_;
}

GetResponse* GetResponse::default_instance_ = NULL;

GetResponse* GetResponse::New(::google::protobuf::Arena* arena) const {
  GetResponse* n = new GetResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:raft_messagepb.GetResponse)
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool GetResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:raft_messagepb.GetResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes value = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_value()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:raft_messagepb.GetResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:raft_messagepb.GetResponse)
  return false;
#undef DO_
}

void GetResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:raft_messagepb.GetResponse)
  // optional bytes value = 1;
  if (this->value().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->value(), output);
  }

  // @@protoc_insertion_point(serialize_end:raft_messagepb.GetResponse)
}

::google::protobuf::uint8* GetResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:raft_messagepb.GetResponse)
  // optional bytes value = 1;
  if (this->value().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->value(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:raft_messagepb.GetResponse)
  return target;
}

int GetResponse::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:raft_messagepb.GetResponse)
  int total_size = 0;

  // optional bytes value = 1;
  if (this->value().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->value());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:raft_messagepb.GetResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const GetResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const GetResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:raft_messagepb.GetResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:raft_messagepb.GetResponse)
    MergeFrom(*source);
  }
}

void GetResponse::MergeFrom(const GetResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:raft_messagepb.GetResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.value().size() > 0) {

    value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
}

void GetResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:raft_messagepb.GetResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetResponse::CopyFrom(const GetResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:raft_messagepb.GetResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetResponse::IsInitialized() const {

  return true;
}

void GetResponse::Swap(GetResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetResponse::InternalSwap(GetResponse* other) {
  value_.Swap(&other->value_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetResponse_descriptor_;
  metadata.reflection = GetResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetResponse

// optional bytes value = 1;
void GetResponse::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& GetResponse::value() const {
  // @@protoc_insertion_point(field_get:raft_messagepb.GetResponse.value)
  return value_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GetResponse::set_value(const ::std::string& value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:raft_messagepb.GetResponse.value)
}
 void GetResponse::set_value(const char* value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:raft_messagepb.GetResponse.value)
}
 void GetResponse::set_value(const void* value, size_t size) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:raft_messagepb.GetResponse.value)
}
 ::std::string* GetResponse::mutable_value() {
  
  // @@protoc_insertion_point(field_mutable:raft_messagepb.GetResponse.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* GetResponse::release_value() {
  // @@protoc_insertion_point(field_release:raft_messagepb.GetResponse.value)
  
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GetResponse::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    
  } else {
    
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:raft_messagepb.GetResponse.value)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PutRequest::kCfFieldNumber;
const int PutRequest::kKeyFieldNumber;
const int PutRequest::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PutRequest::PutRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:raft_messagepb.PutRequest)
}

void PutRequest::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

PutRequest::PutRequest(const PutRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:raft_messagepb.PutRequest)
}

void PutRequest::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  cf_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

PutRequest::~PutRequest() {
  // @@protoc_insertion_point(destructor:raft_messagepb.PutRequest)
  SharedDtor();
}

void PutRequest::SharedDtor() {
  cf_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void PutRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PutRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PutRequest_descriptor_;
}

const PutRequest& PutRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_raft_5fmessagepb_2eproto();
  return *default_instance_;
}

PutRequest* PutRequest::default_instance_ = NULL;

PutRequest* PutRequest::New(::google::protobuf::Arena* arena) const {
  PutRequest* n = new PutRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PutRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:raft_messagepb.PutRequest)
  cf_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool PutRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:raft_messagepb.PutRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string cf = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cf()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->cf().data(), this->cf().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "raft_messagepb.PutRequest.cf"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_key;
        break;
      }

      // optional bytes key = 2;
      case 2: {
        if (tag == 18) {
         parse_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_key()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_value;
        break;
      }

      // optional bytes value = 3;
      case 3: {
        if (tag == 26) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_value()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:raft_messagepb.PutRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:raft_messagepb.PutRequest)
  return false;
#undef DO_
}

void PutRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:raft_messagepb.PutRequest)
  // optional string cf = 1;
  if (this->cf().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cf().data(), this->cf().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "raft_messagepb.PutRequest.cf");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->cf(), output);
  }

  // optional bytes key = 2;
  if (this->key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->key(), output);
  }

  // optional bytes value = 3;
  if (this->value().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->value(), output);
  }

  // @@protoc_insertion_point(serialize_end:raft_messagepb.PutRequest)
}

::google::protobuf::uint8* PutRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:raft_messagepb.PutRequest)
  // optional string cf = 1;
  if (this->cf().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cf().data(), this->cf().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "raft_messagepb.PutRequest.cf");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->cf(), target);
  }

  // optional bytes key = 2;
  if (this->key().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->key(), target);
  }

  // optional bytes value = 3;
  if (this->value().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->value(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:raft_messagepb.PutRequest)
  return target;
}

int PutRequest::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:raft_messagepb.PutRequest)
  int total_size = 0;

  // optional string cf = 1;
  if (this->cf().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->cf());
  }

  // optional bytes key = 2;
  if (this->key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->key());
  }

  // optional bytes value = 3;
  if (this->value().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->value());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PutRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:raft_messagepb.PutRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const PutRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const PutRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:raft_messagepb.PutRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:raft_messagepb.PutRequest)
    MergeFrom(*source);
  }
}

void PutRequest::MergeFrom(const PutRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:raft_messagepb.PutRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.cf().size() > 0) {

    cf_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cf_);
  }
  if (from.key().size() > 0) {

    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  if (from.value().size() > 0) {

    value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
}

void PutRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:raft_messagepb.PutRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PutRequest::CopyFrom(const PutRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:raft_messagepb.PutRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PutRequest::IsInitialized() const {

  return true;
}

void PutRequest::Swap(PutRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PutRequest::InternalSwap(PutRequest* other) {
  cf_.Swap(&other->cf_);
  key_.Swap(&other->key_);
  value_.Swap(&other->value_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PutRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PutRequest_descriptor_;
  metadata.reflection = PutRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PutRequest

// optional string cf = 1;
void PutRequest::clear_cf() {
  cf_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& PutRequest::cf() const {
  // @@protoc_insertion_point(field_get:raft_messagepb.PutRequest.cf)
  return cf_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PutRequest::set_cf(const ::std::string& value) {
  
  cf_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:raft_messagepb.PutRequest.cf)
}
 void PutRequest::set_cf(const char* value) {
  
  cf_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:raft_messagepb.PutRequest.cf)
}
 void PutRequest::set_cf(const char* value, size_t size) {
  
  cf_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:raft_messagepb.PutRequest.cf)
}
 ::std::string* PutRequest::mutable_cf() {
  
  // @@protoc_insertion_point(field_mutable:raft_messagepb.PutRequest.cf)
  return cf_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PutRequest::release_cf() {
  // @@protoc_insertion_point(field_release:raft_messagepb.PutRequest.cf)
  
  return cf_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PutRequest::set_allocated_cf(::std::string* cf) {
  if (cf != NULL) {
    
  } else {
    
  }
  cf_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cf);
  // @@protoc_insertion_point(field_set_allocated:raft_messagepb.PutRequest.cf)
}

// optional bytes key = 2;
void PutRequest::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& PutRequest::key() const {
  // @@protoc_insertion_point(field_get:raft_messagepb.PutRequest.key)
  return key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PutRequest::set_key(const ::std::string& value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:raft_messagepb.PutRequest.key)
}
 void PutRequest::set_key(const char* value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:raft_messagepb.PutRequest.key)
}
 void PutRequest::set_key(const void* value, size_t size) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:raft_messagepb.PutRequest.key)
}
 ::std::string* PutRequest::mutable_key() {
  
  // @@protoc_insertion_point(field_mutable:raft_messagepb.PutRequest.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PutRequest::release_key() {
  // @@protoc_insertion_point(field_release:raft_messagepb.PutRequest.key)
  
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PutRequest::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    
  } else {
    
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:raft_messagepb.PutRequest.key)
}

// optional bytes value = 3;
void PutRequest::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& PutRequest::value() const {
  // @@protoc_insertion_point(field_get:raft_messagepb.PutRequest.value)
  return value_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PutRequest::set_value(const ::std::string& value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:raft_messagepb.PutRequest.value)
}
 void PutRequest::set_value(const char* value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:raft_messagepb.PutRequest.value)
}
 void PutRequest::set_value(const void* value, size_t size) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:raft_messagepb.PutRequest.value)
}
 ::std::string* PutRequest::mutable_value() {
  
  // @@protoc_insertion_point(field_mutable:raft_messagepb.PutRequest.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PutRequest::release_value() {
  // @@protoc_insertion_point(field_release:raft_messagepb.PutRequest.value)
  
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PutRequest::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    
  } else {
    
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:raft_messagepb.PutRequest.value)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PutResponse::PutResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:raft_messagepb.PutResponse)
}

void PutResponse::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

PutResponse::PutResponse(const PutResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:raft_messagepb.PutResponse)
}

void PutResponse::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

PutResponse::~PutResponse() {
  // @@protoc_insertion_point(destructor:raft_messagepb.PutResponse)
  SharedDtor();
}

void PutResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PutResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PutResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PutResponse_descriptor_;
}

const PutResponse& PutResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_raft_5fmessagepb_2eproto();
  return *default_instance_;
}

PutResponse* PutResponse::default_instance_ = NULL;

PutResponse* PutResponse::New(::google::protobuf::Arena* arena) const {
  PutResponse* n = new PutResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PutResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:raft_messagepb.PutResponse)
}

bool PutResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:raft_messagepb.PutResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
success:
  // @@protoc_insertion_point(parse_success:raft_messagepb.PutResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:raft_messagepb.PutResponse)
  return false;
#undef DO_
}

void PutResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:raft_messagepb.PutResponse)
  // @@protoc_insertion_point(serialize_end:raft_messagepb.PutResponse)
}

::google::protobuf::uint8* PutResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:raft_messagepb.PutResponse)
  // @@protoc_insertion_point(serialize_to_array_end:raft_messagepb.PutResponse)
  return target;
}

int PutResponse::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:raft_messagepb.PutResponse)
  int total_size = 0;

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PutResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:raft_messagepb.PutResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const PutResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const PutResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:raft_messagepb.PutResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:raft_messagepb.PutResponse)
    MergeFrom(*source);
  }
}

void PutResponse::MergeFrom(const PutResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:raft_messagepb.PutResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
}

void PutResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:raft_messagepb.PutResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PutResponse::CopyFrom(const PutResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:raft_messagepb.PutResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PutResponse::IsInitialized() const {

  return true;
}

void PutResponse::Swap(PutResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PutResponse::InternalSwap(PutResponse* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PutResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PutResponse_descriptor_;
  metadata.reflection = PutResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PutResponse

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DeleteRequest::kCfFieldNumber;
const int DeleteRequest::kKeyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DeleteRequest::DeleteRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:raft_messagepb.DeleteRequest)
}

void DeleteRequest::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

DeleteRequest::DeleteRequest(const DeleteRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:raft_messagepb.DeleteRequest)
}

void DeleteRequest::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  cf_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

DeleteRequest::~DeleteRequest() {
  // @@protoc_insertion_point(destructor:raft_messagepb.DeleteRequest)
  SharedDtor();
}

void DeleteRequest::SharedDtor() {
  cf_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void DeleteRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DeleteRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DeleteRequest_descriptor_;
}

const DeleteRequest& DeleteRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_raft_5fmessagepb_2eproto();
  return *default_instance_;
}

DeleteRequest* DeleteRequest::default_instance_ = NULL;

DeleteRequest* DeleteRequest::New(::google::protobuf::Arena* arena) const {
  DeleteRequest* n = new DeleteRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DeleteRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:raft_messagepb.DeleteRequest)
  cf_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool DeleteRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:raft_messagepb.DeleteRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string cf = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cf()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->cf().data(), this->cf().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "raft_messagepb.DeleteRequest.cf"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_key;
        break;
      }

      // optional bytes key = 2;
      case 2: {
        if (tag == 18) {
         parse_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_key()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:raft_messagepb.DeleteRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:raft_messagepb.DeleteRequest)
  return false;
#undef DO_
}

void DeleteRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:raft_messagepb.DeleteRequest)
  // optional string cf = 1;
  if (this->cf().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cf().data(), this->cf().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "raft_messagepb.DeleteRequest.cf");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->cf(), output);
  }

  // optional bytes key = 2;
  if (this->key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->key(), output);
  }

  // @@protoc_insertion_point(serialize_end:raft_messagepb.DeleteRequest)
}

::google::protobuf::uint8* DeleteRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:raft_messagepb.DeleteRequest)
  // optional string cf = 1;
  if (this->cf().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cf().data(), this->cf().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "raft_messagepb.DeleteRequest.cf");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->cf(), target);
  }

  // optional bytes key = 2;
  if (this->key().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->key(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:raft_messagepb.DeleteRequest)
  return target;
}

int DeleteRequest::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:raft_messagepb.DeleteRequest)
  int total_size = 0;

  // optional string cf = 1;
  if (this->cf().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->cf());
  }

  // optional bytes key = 2;
  if (this->key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->key());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeleteRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:raft_messagepb.DeleteRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const DeleteRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const DeleteRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:raft_messagepb.DeleteRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:raft_messagepb.DeleteRequest)
    MergeFrom(*source);
  }
}

void DeleteRequest::MergeFrom(const DeleteRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:raft_messagepb.DeleteRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.cf().size() > 0) {

    cf_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cf_);
  }
  if (from.key().size() > 0) {

    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
}

void DeleteRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:raft_messagepb.DeleteRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteRequest::CopyFrom(const DeleteRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:raft_messagepb.DeleteRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteRequest::IsInitialized() const {

  return true;
}

void DeleteRequest::Swap(DeleteRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DeleteRequest::InternalSwap(DeleteRequest* other) {
  cf_.Swap(&other->cf_);
  key_.Swap(&other->key_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DeleteRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DeleteRequest_descriptor_;
  metadata.reflection = DeleteRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DeleteRequest

// optional string cf = 1;
void DeleteRequest::clear_cf() {
  cf_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& DeleteRequest::cf() const {
  // @@protoc_insertion_point(field_get:raft_messagepb.DeleteRequest.cf)
  return cf_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void DeleteRequest::set_cf(const ::std::string& value) {
  
  cf_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:raft_messagepb.DeleteRequest.cf)
}
 void DeleteRequest::set_cf(const char* value) {
  
  cf_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:raft_messagepb.DeleteRequest.cf)
}
 void DeleteRequest::set_cf(const char* value, size_t size) {
  
  cf_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:raft_messagepb.DeleteRequest.cf)
}
 ::std::string* DeleteRequest::mutable_cf() {
  
  // @@protoc_insertion_point(field_mutable:raft_messagepb.DeleteRequest.cf)
  return cf_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* DeleteRequest::release_cf() {
  // @@protoc_insertion_point(field_release:raft_messagepb.DeleteRequest.cf)
  
  return cf_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void DeleteRequest::set_allocated_cf(::std::string* cf) {
  if (cf != NULL) {
    
  } else {
    
  }
  cf_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cf);
  // @@protoc_insertion_point(field_set_allocated:raft_messagepb.DeleteRequest.cf)
}

// optional bytes key = 2;
void DeleteRequest::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& DeleteRequest::key() const {
  // @@protoc_insertion_point(field_get:raft_messagepb.DeleteRequest.key)
  return key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void DeleteRequest::set_key(const ::std::string& value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:raft_messagepb.DeleteRequest.key)
}
 void DeleteRequest::set_key(const char* value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:raft_messagepb.DeleteRequest.key)
}
 void DeleteRequest::set_key(const void* value, size_t size) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:raft_messagepb.DeleteRequest.key)
}
 ::std::string* DeleteRequest::mutable_key() {
  
  // @@protoc_insertion_point(field_mutable:raft_messagepb.DeleteRequest.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* DeleteRequest::release_key() {
  // @@protoc_insertion_point(field_release:raft_messagepb.DeleteRequest.key)
  
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void DeleteRequest::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    
  } else {
    
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:raft_messagepb.DeleteRequest.key)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DeleteResponse::DeleteResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:raft_messagepb.DeleteResponse)
}

void DeleteResponse::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

DeleteResponse::DeleteResponse(const DeleteResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:raft_messagepb.DeleteResponse)
}

void DeleteResponse::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

DeleteResponse::~DeleteResponse() {
  // @@protoc_insertion_point(destructor:raft_messagepb.DeleteResponse)
  SharedDtor();
}

void DeleteResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DeleteResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DeleteResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DeleteResponse_descriptor_;
}

const DeleteResponse& DeleteResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_raft_5fmessagepb_2eproto();
  return *default_instance_;
}

DeleteResponse* DeleteResponse::default_instance_ = NULL;

DeleteResponse* DeleteResponse::New(::google::protobuf::Arena* arena) const {
  DeleteResponse* n = new DeleteResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DeleteResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:raft_messagepb.DeleteResponse)
}

bool DeleteResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:raft_messagepb.DeleteResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
success:
  // @@protoc_insertion_point(parse_success:raft_messagepb.DeleteResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:raft_messagepb.DeleteResponse)
  return false;
#undef DO_
}

void DeleteResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:raft_messagepb.DeleteResponse)
  // @@protoc_insertion_point(serialize_end:raft_messagepb.DeleteResponse)
}

::google::protobuf::uint8* DeleteResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:raft_messagepb.DeleteResponse)
  // @@protoc_insertion_point(serialize_to_array_end:raft_messagepb.DeleteResponse)
  return target;
}

int DeleteResponse::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:raft_messagepb.DeleteResponse)
  int total_size = 0;

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeleteResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:raft_messagepb.DeleteResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const DeleteResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const DeleteResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:raft_messagepb.DeleteResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:raft_messagepb.DeleteResponse)
    MergeFrom(*source);
  }
}

void DeleteResponse::MergeFrom(const DeleteResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:raft_messagepb.DeleteResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
}

void DeleteResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:raft_messagepb.DeleteResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteResponse::CopyFrom(const DeleteResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:raft_messagepb.DeleteResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteResponse::IsInitialized() const {

  return true;
}

void DeleteResponse::Swap(DeleteResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DeleteResponse::InternalSwap(DeleteResponse* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DeleteResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DeleteResponse_descriptor_;
  metadata.reflection = DeleteResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DeleteResponse

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Request::kCmdTypeFieldNumber;
const int Request::kGetFieldNumber;
const int Request::kPutFieldNumber;
const int Request::kDeleteFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Request::Request()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:raft_messagepb.Request)
}

void Request::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  get_ = const_cast< ::raft_messagepb::GetRequest*>(&::raft_messagepb::GetRequest::default_instance());
  put_ = const_cast< ::raft_messagepb::PutRequest*>(&::raft_messagepb::PutRequest::default_instance());
  delete__ = const_cast< ::raft_messagepb::DeleteRequest*>(&::raft_messagepb::DeleteRequest::default_instance());
}

Request::Request(const Request& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:raft_messagepb.Request)
}

void Request::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  cmd_type_ = 0;
  get_ = NULL;
  put_ = NULL;
  delete__ = NULL;
}

Request::~Request() {
  // @@protoc_insertion_point(destructor:raft_messagepb.Request)
  SharedDtor();
}

void Request::SharedDtor() {
  if (this != default_instance_) {
    delete get_;
    delete put_;
    delete delete__;
  }
}

void Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Request_descriptor_;
}

const Request& Request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_raft_5fmessagepb_2eproto();
  return *default_instance_;
}

Request* Request::default_instance_ = NULL;

Request* Request::New(::google::protobuf::Arena* arena) const {
  Request* n = new Request;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Request::Clear() {
// @@protoc_insertion_point(message_clear_start:raft_messagepb.Request)
  cmd_type_ = 0;
  if (GetArenaNoVirtual() == NULL && get_ != NULL) delete get_;
  get_ = NULL;
  if (GetArenaNoVirtual() == NULL && put_ != NULL) delete put_;
  put_ = NULL;
  if (GetArenaNoVirtual() == NULL && delete__ != NULL) delete delete__;
  delete__ = NULL;
}

bool Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:raft_messagepb.Request)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .raft_messagepb.CmdType cmd_type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_cmd_type(static_cast< ::raft_messagepb::CmdType >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_get;
        break;
      }

      // optional .raft_messagepb.GetRequest get = 2;
      case 2: {
        if (tag == 18) {
         parse_get:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_get()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_put;
        break;
      }

      // optional .raft_messagepb.PutRequest put = 4;
      case 4: {
        if (tag == 34) {
         parse_put:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_put()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_delete;
        break;
      }

      // optional .raft_messagepb.DeleteRequest delete = 5;
      case 5: {
        if (tag == 42) {
         parse_delete:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_delete_()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:raft_messagepb.Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:raft_messagepb.Request)
  return false;
#undef DO_
}

void Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:raft_messagepb.Request)
  // optional .raft_messagepb.CmdType cmd_type = 1;
  if (this->cmd_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd_type(), output);
  }

  // optional .raft_messagepb.GetRequest get = 2;
  if (this->has_get()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->get_, output);
  }

  // optional .raft_messagepb.PutRequest put = 4;
  if (this->has_put()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->put_, output);
  }

  // optional .raft_messagepb.DeleteRequest delete = 5;
  if (this->has_delete_()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->delete__, output);
  }

  // @@protoc_insertion_point(serialize_end:raft_messagepb.Request)
}

::google::protobuf::uint8* Request::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:raft_messagepb.Request)
  // optional .raft_messagepb.CmdType cmd_type = 1;
  if (this->cmd_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd_type(), target);
  }

  // optional .raft_messagepb.GetRequest get = 2;
  if (this->has_get()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->get_, false, target);
  }

  // optional .raft_messagepb.PutRequest put = 4;
  if (this->has_put()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->put_, false, target);
  }

  // optional .raft_messagepb.DeleteRequest delete = 5;
  if (this->has_delete_()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->delete__, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:raft_messagepb.Request)
  return target;
}

int Request::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:raft_messagepb.Request)
  int total_size = 0;

  // optional .raft_messagepb.CmdType cmd_type = 1;
  if (this->cmd_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd_type());
  }

  // optional .raft_messagepb.GetRequest get = 2;
  if (this->has_get()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->get_);
  }

  // optional .raft_messagepb.PutRequest put = 4;
  if (this->has_put()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->put_);
  }

  // optional .raft_messagepb.DeleteRequest delete = 5;
  if (this->has_delete_()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->delete__);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:raft_messagepb.Request)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Request* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Request>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:raft_messagepb.Request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:raft_messagepb.Request)
    MergeFrom(*source);
  }
}

void Request::MergeFrom(const Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:raft_messagepb.Request)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.cmd_type() != 0) {
    set_cmd_type(from.cmd_type());
  }
  if (from.has_get()) {
    mutable_get()->::raft_messagepb::GetRequest::MergeFrom(from.get());
  }
  if (from.has_put()) {
    mutable_put()->::raft_messagepb::PutRequest::MergeFrom(from.put());
  }
  if (from.has_delete_()) {
    mutable_delete_()->::raft_messagepb::DeleteRequest::MergeFrom(from.delete_());
  }
}

void Request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:raft_messagepb.Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Request::CopyFrom(const Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:raft_messagepb.Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Request::IsInitialized() const {

  return true;
}

void Request::Swap(Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Request::InternalSwap(Request* other) {
  std::swap(cmd_type_, other->cmd_type_);
  std::swap(get_, other->get_);
  std::swap(put_, other->put_);
  std::swap(delete__, other->delete__);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Request_descriptor_;
  metadata.reflection = Request_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Request

// optional .raft_messagepb.CmdType cmd_type = 1;
void Request::clear_cmd_type() {
  cmd_type_ = 0;
}
 ::raft_messagepb::CmdType Request::cmd_type() const {
  // @@protoc_insertion_point(field_get:raft_messagepb.Request.cmd_type)
  return static_cast< ::raft_messagepb::CmdType >(cmd_type_);
}
 void Request::set_cmd_type(::raft_messagepb::CmdType value) {
  
  cmd_type_ = value;
  // @@protoc_insertion_point(field_set:raft_messagepb.Request.cmd_type)
}

// optional .raft_messagepb.GetRequest get = 2;
bool Request::has_get() const {
  return !_is_default_instance_ && get_ != NULL;
}
void Request::clear_get() {
  if (GetArenaNoVirtual() == NULL && get_ != NULL) delete get_;
  get_ = NULL;
}
const ::raft_messagepb::GetRequest& Request::get() const {
  // @@protoc_insertion_point(field_get:raft_messagepb.Request.get)
  return get_ != NULL ? *get_ : *default_instance_->get_;
}
::raft_messagepb::GetRequest* Request::mutable_get() {
  
  if (get_ == NULL) {
    get_ = new ::raft_messagepb::GetRequest;
  }
  // @@protoc_insertion_point(field_mutable:raft_messagepb.Request.get)
  return get_;
}
::raft_messagepb::GetRequest* Request::release_get() {
  // @@protoc_insertion_point(field_release:raft_messagepb.Request.get)
  
  ::raft_messagepb::GetRequest* temp = get_;
  get_ = NULL;
  return temp;
}
void Request::set_allocated_get(::raft_messagepb::GetRequest* get) {
  delete get_;
  get_ = get;
  if (get) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:raft_messagepb.Request.get)
}

// optional .raft_messagepb.PutRequest put = 4;
bool Request::has_put() const {
  return !_is_default_instance_ && put_ != NULL;
}
void Request::clear_put() {
  if (GetArenaNoVirtual() == NULL && put_ != NULL) delete put_;
  put_ = NULL;
}
const ::raft_messagepb::PutRequest& Request::put() const {
  // @@protoc_insertion_point(field_get:raft_messagepb.Request.put)
  return put_ != NULL ? *put_ : *default_instance_->put_;
}
::raft_messagepb::PutRequest* Request::mutable_put() {
  
  if (put_ == NULL) {
    put_ = new ::raft_messagepb::PutRequest;
  }
  // @@protoc_insertion_point(field_mutable:raft_messagepb.Request.put)
  return put_;
}
::raft_messagepb::PutRequest* Request::release_put() {
  // @@protoc_insertion_point(field_release:raft_messagepb.Request.put)
  
  ::raft_messagepb::PutRequest* temp = put_;
  put_ = NULL;
  return temp;
}
void Request::set_allocated_put(::raft_messagepb::PutRequest* put) {
  delete put_;
  put_ = put;
  if (put) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:raft_messagepb.Request.put)
}

// optional .raft_messagepb.DeleteRequest delete = 5;
bool Request::has_delete_() const {
  return !_is_default_instance_ && delete__ != NULL;
}
void Request::clear_delete_() {
  if (GetArenaNoVirtual() == NULL && delete__ != NULL) delete delete__;
  delete__ = NULL;
}
const ::raft_messagepb::DeleteRequest& Request::delete_() const {
  // @@protoc_insertion_point(field_get:raft_messagepb.Request.delete)
  return delete__ != NULL ? *delete__ : *default_instance_->delete__;
}
::raft_messagepb::DeleteRequest* Request::mutable_delete_() {
  
  if (delete__ == NULL) {
    delete__ = new ::raft_messagepb::DeleteRequest;
  }
  // @@protoc_insertion_point(field_mutable:raft_messagepb.Request.delete)
  return delete__;
}
::raft_messagepb::DeleteRequest* Request::release_delete_() {
  // @@protoc_insertion_point(field_release:raft_messagepb.Request.delete)
  
  ::raft_messagepb::DeleteRequest* temp = delete__;
  delete__ = NULL;
  return temp;
}
void Request::set_allocated_delete_(::raft_messagepb::DeleteRequest* delete_) {
  delete delete__;
  delete__ = delete_;
  if (delete_) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:raft_messagepb.Request.delete)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Response::kCmdTypeFieldNumber;
const int Response::kGetFieldNumber;
const int Response::kPutFieldNumber;
const int Response::kDeleteFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Response::Response()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:raft_messagepb.Response)
}

void Response::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  get_ = const_cast< ::raft_messagepb::GetResponse*>(&::raft_messagepb::GetResponse::default_instance());
  put_ = const_cast< ::raft_messagepb::PutResponse*>(&::raft_messagepb::PutResponse::default_instance());
  delete__ = const_cast< ::raft_messagepb::DeleteResponse*>(&::raft_messagepb::DeleteResponse::default_instance());
}

Response::Response(const Response& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:raft_messagepb.Response)
}

void Response::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  cmd_type_ = 0;
  get_ = NULL;
  put_ = NULL;
  delete__ = NULL;
}

Response::~Response() {
  // @@protoc_insertion_point(destructor:raft_messagepb.Response)
  SharedDtor();
}

void Response::SharedDtor() {
  if (this != default_instance_) {
    delete get_;
    delete put_;
    delete delete__;
  }
}

void Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Response::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Response_descriptor_;
}

const Response& Response::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_raft_5fmessagepb_2eproto();
  return *default_instance_;
}

Response* Response::default_instance_ = NULL;

Response* Response::New(::google::protobuf::Arena* arena) const {
  Response* n = new Response;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Response::Clear() {
// @@protoc_insertion_point(message_clear_start:raft_messagepb.Response)
  cmd_type_ = 0;
  if (GetArenaNoVirtual() == NULL && get_ != NULL) delete get_;
  get_ = NULL;
  if (GetArenaNoVirtual() == NULL && put_ != NULL) delete put_;
  put_ = NULL;
  if (GetArenaNoVirtual() == NULL && delete__ != NULL) delete delete__;
  delete__ = NULL;
}

bool Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:raft_messagepb.Response)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .raft_messagepb.CmdType cmd_type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_cmd_type(static_cast< ::raft_messagepb::CmdType >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_get;
        break;
      }

      // optional .raft_messagepb.GetResponse get = 2;
      case 2: {
        if (tag == 18) {
         parse_get:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_get()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_put;
        break;
      }

      // optional .raft_messagepb.PutResponse put = 4;
      case 4: {
        if (tag == 34) {
         parse_put:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_put()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_delete;
        break;
      }

      // optional .raft_messagepb.DeleteResponse delete = 5;
      case 5: {
        if (tag == 42) {
         parse_delete:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_delete_()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:raft_messagepb.Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:raft_messagepb.Response)
  return false;
#undef DO_
}

void Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:raft_messagepb.Response)
  // optional .raft_messagepb.CmdType cmd_type = 1;
  if (this->cmd_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd_type(), output);
  }

  // optional .raft_messagepb.GetResponse get = 2;
  if (this->has_get()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->get_, output);
  }

  // optional .raft_messagepb.PutResponse put = 4;
  if (this->has_put()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->put_, output);
  }

  // optional .raft_messagepb.DeleteResponse delete = 5;
  if (this->has_delete_()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->delete__, output);
  }

  // @@protoc_insertion_point(serialize_end:raft_messagepb.Response)
}

::google::protobuf::uint8* Response::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:raft_messagepb.Response)
  // optional .raft_messagepb.CmdType cmd_type = 1;
  if (this->cmd_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd_type(), target);
  }

  // optional .raft_messagepb.GetResponse get = 2;
  if (this->has_get()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->get_, false, target);
  }

  // optional .raft_messagepb.PutResponse put = 4;
  if (this->has_put()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->put_, false, target);
  }

  // optional .raft_messagepb.DeleteResponse delete = 5;
  if (this->has_delete_()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->delete__, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:raft_messagepb.Response)
  return target;
}

int Response::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:raft_messagepb.Response)
  int total_size = 0;

  // optional .raft_messagepb.CmdType cmd_type = 1;
  if (this->cmd_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd_type());
  }

  // optional .raft_messagepb.GetResponse get = 2;
  if (this->has_get()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->get_);
  }

  // optional .raft_messagepb.PutResponse put = 4;
  if (this->has_put()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->put_);
  }

  // optional .raft_messagepb.DeleteResponse delete = 5;
  if (this->has_delete_()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->delete__);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:raft_messagepb.Response)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Response* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Response>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:raft_messagepb.Response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:raft_messagepb.Response)
    MergeFrom(*source);
  }
}

void Response::MergeFrom(const Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:raft_messagepb.Response)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.cmd_type() != 0) {
    set_cmd_type(from.cmd_type());
  }
  if (from.has_get()) {
    mutable_get()->::raft_messagepb::GetResponse::MergeFrom(from.get());
  }
  if (from.has_put()) {
    mutable_put()->::raft_messagepb::PutResponse::MergeFrom(from.put());
  }
  if (from.has_delete_()) {
    mutable_delete_()->::raft_messagepb::DeleteResponse::MergeFrom(from.delete_());
  }
}

void Response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:raft_messagepb.Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Response::CopyFrom(const Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:raft_messagepb.Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Response::IsInitialized() const {

  return true;
}

void Response::Swap(Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Response::InternalSwap(Response* other) {
  std::swap(cmd_type_, other->cmd_type_);
  std::swap(get_, other->get_);
  std::swap(put_, other->put_);
  std::swap(delete__, other->delete__);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Response::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Response_descriptor_;
  metadata.reflection = Response_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Response

// optional .raft_messagepb.CmdType cmd_type = 1;
void Response::clear_cmd_type() {
  cmd_type_ = 0;
}
 ::raft_messagepb::CmdType Response::cmd_type() const {
  // @@protoc_insertion_point(field_get:raft_messagepb.Response.cmd_type)
  return static_cast< ::raft_messagepb::CmdType >(cmd_type_);
}
 void Response::set_cmd_type(::raft_messagepb::CmdType value) {
  
  cmd_type_ = value;
  // @@protoc_insertion_point(field_set:raft_messagepb.Response.cmd_type)
}

// optional .raft_messagepb.GetResponse get = 2;
bool Response::has_get() const {
  return !_is_default_instance_ && get_ != NULL;
}
void Response::clear_get() {
  if (GetArenaNoVirtual() == NULL && get_ != NULL) delete get_;
  get_ = NULL;
}
const ::raft_messagepb::GetResponse& Response::get() const {
  // @@protoc_insertion_point(field_get:raft_messagepb.Response.get)
  return get_ != NULL ? *get_ : *default_instance_->get_;
}
::raft_messagepb::GetResponse* Response::mutable_get() {
  
  if (get_ == NULL) {
    get_ = new ::raft_messagepb::GetResponse;
  }
  // @@protoc_insertion_point(field_mutable:raft_messagepb.Response.get)
  return get_;
}
::raft_messagepb::GetResponse* Response::release_get() {
  // @@protoc_insertion_point(field_release:raft_messagepb.Response.get)
  
  ::raft_messagepb::GetResponse* temp = get_;
  get_ = NULL;
  return temp;
}
void Response::set_allocated_get(::raft_messagepb::GetResponse* get) {
  delete get_;
  get_ = get;
  if (get) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:raft_messagepb.Response.get)
}

// optional .raft_messagepb.PutResponse put = 4;
bool Response::has_put() const {
  return !_is_default_instance_ && put_ != NULL;
}
void Response::clear_put() {
  if (GetArenaNoVirtual() == NULL && put_ != NULL) delete put_;
  put_ = NULL;
}
const ::raft_messagepb::PutResponse& Response::put() const {
  // @@protoc_insertion_point(field_get:raft_messagepb.Response.put)
  return put_ != NULL ? *put_ : *default_instance_->put_;
}
::raft_messagepb::PutResponse* Response::mutable_put() {
  
  if (put_ == NULL) {
    put_ = new ::raft_messagepb::PutResponse;
  }
  // @@protoc_insertion_point(field_mutable:raft_messagepb.Response.put)
  return put_;
}
::raft_messagepb::PutResponse* Response::release_put() {
  // @@protoc_insertion_point(field_release:raft_messagepb.Response.put)
  
  ::raft_messagepb::PutResponse* temp = put_;
  put_ = NULL;
  return temp;
}
void Response::set_allocated_put(::raft_messagepb::PutResponse* put) {
  delete put_;
  put_ = put;
  if (put) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:raft_messagepb.Response.put)
}

// optional .raft_messagepb.DeleteResponse delete = 5;
bool Response::has_delete_() const {
  return !_is_default_instance_ && delete__ != NULL;
}
void Response::clear_delete_() {
  if (GetArenaNoVirtual() == NULL && delete__ != NULL) delete delete__;
  delete__ = NULL;
}
const ::raft_messagepb::DeleteResponse& Response::delete_() const {
  // @@protoc_insertion_point(field_get:raft_messagepb.Response.delete)
  return delete__ != NULL ? *delete__ : *default_instance_->delete__;
}
::raft_messagepb::DeleteResponse* Response::mutable_delete_() {
  
  if (delete__ == NULL) {
    delete__ = new ::raft_messagepb::DeleteResponse;
  }
  // @@protoc_insertion_point(field_mutable:raft_messagepb.Response.delete)
  return delete__;
}
::raft_messagepb::DeleteResponse* Response::release_delete_() {
  // @@protoc_insertion_point(field_release:raft_messagepb.Response.delete)
  
  ::raft_messagepb::DeleteResponse* temp = delete__;
  delete__ = NULL;
  return temp;
}
void Response::set_allocated_delete_(::raft_messagepb::DeleteResponse* delete_) {
  delete delete__;
  delete__ = delete_;
  if (delete_) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:raft_messagepb.Response.delete)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ChangePeerRequest::kChangeTypeFieldNumber;
const int ChangePeerRequest::kPeerFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ChangePeerRequest::ChangePeerRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:raft_messagepb.ChangePeerRequest)
}

void ChangePeerRequest::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  peer_ = const_cast< ::metapb::Peer*>(&::metapb::Peer::default_instance());
}

ChangePeerRequest::ChangePeerRequest(const ChangePeerRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:raft_messagepb.ChangePeerRequest)
}

void ChangePeerRequest::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  change_type_ = 0;
  peer_ = NULL;
}

ChangePeerRequest::~ChangePeerRequest() {
  // @@protoc_insertion_point(destructor:raft_messagepb.ChangePeerRequest)
  SharedDtor();
}

void ChangePeerRequest::SharedDtor() {
  if (this != default_instance_) {
    delete peer_;
  }
}

void ChangePeerRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChangePeerRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChangePeerRequest_descriptor_;
}

const ChangePeerRequest& ChangePeerRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_raft_5fmessagepb_2eproto();
  return *default_instance_;
}

ChangePeerRequest* ChangePeerRequest::default_instance_ = NULL;

ChangePeerRequest* ChangePeerRequest::New(::google::protobuf::Arena* arena) const {
  ChangePeerRequest* n = new ChangePeerRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ChangePeerRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:raft_messagepb.ChangePeerRequest)
  change_type_ = 0;
  if (GetArenaNoVirtual() == NULL && peer_ != NULL) delete peer_;
  peer_ = NULL;
}

bool ChangePeerRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:raft_messagepb.ChangePeerRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .eraftpb.ConfChangeType change_type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_change_type(static_cast< ::eraftpb::ConfChangeType >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_peer;
        break;
      }

      // optional .metapb.Peer peer = 2;
      case 2: {
        if (tag == 18) {
         parse_peer:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_peer()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:raft_messagepb.ChangePeerRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:raft_messagepb.ChangePeerRequest)
  return false;
#undef DO_
}

void ChangePeerRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:raft_messagepb.ChangePeerRequest)
  // optional .eraftpb.ConfChangeType change_type = 1;
  if (this->change_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->change_type(), output);
  }

  // optional .metapb.Peer peer = 2;
  if (this->has_peer()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->peer_, output);
  }

  // @@protoc_insertion_point(serialize_end:raft_messagepb.ChangePeerRequest)
}

::google::protobuf::uint8* ChangePeerRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:raft_messagepb.ChangePeerRequest)
  // optional .eraftpb.ConfChangeType change_type = 1;
  if (this->change_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->change_type(), target);
  }

  // optional .metapb.Peer peer = 2;
  if (this->has_peer()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->peer_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:raft_messagepb.ChangePeerRequest)
  return target;
}

int ChangePeerRequest::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:raft_messagepb.ChangePeerRequest)
  int total_size = 0;

  // optional .eraftpb.ConfChangeType change_type = 1;
  if (this->change_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->change_type());
  }

  // optional .metapb.Peer peer = 2;
  if (this->has_peer()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->peer_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChangePeerRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:raft_messagepb.ChangePeerRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ChangePeerRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ChangePeerRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:raft_messagepb.ChangePeerRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:raft_messagepb.ChangePeerRequest)
    MergeFrom(*source);
  }
}

void ChangePeerRequest::MergeFrom(const ChangePeerRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:raft_messagepb.ChangePeerRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.change_type() != 0) {
    set_change_type(from.change_type());
  }
  if (from.has_peer()) {
    mutable_peer()->::metapb::Peer::MergeFrom(from.peer());
  }
}

void ChangePeerRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:raft_messagepb.ChangePeerRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChangePeerRequest::CopyFrom(const ChangePeerRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:raft_messagepb.ChangePeerRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChangePeerRequest::IsInitialized() const {

  return true;
}

void ChangePeerRequest::Swap(ChangePeerRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ChangePeerRequest::InternalSwap(ChangePeerRequest* other) {
  std::swap(change_type_, other->change_type_);
  std::swap(peer_, other->peer_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ChangePeerRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChangePeerRequest_descriptor_;
  metadata.reflection = ChangePeerRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ChangePeerRequest

// optional .eraftpb.ConfChangeType change_type = 1;
void ChangePeerRequest::clear_change_type() {
  change_type_ = 0;
}
 ::eraftpb::ConfChangeType ChangePeerRequest::change_type() const {
  // @@protoc_insertion_point(field_get:raft_messagepb.ChangePeerRequest.change_type)
  return static_cast< ::eraftpb::ConfChangeType >(change_type_);
}
 void ChangePeerRequest::set_change_type(::eraftpb::ConfChangeType value) {
  
  change_type_ = value;
  // @@protoc_insertion_point(field_set:raft_messagepb.ChangePeerRequest.change_type)
}

// optional .metapb.Peer peer = 2;
bool ChangePeerRequest::has_peer() const {
  return !_is_default_instance_ && peer_ != NULL;
}
void ChangePeerRequest::clear_peer() {
  if (GetArenaNoVirtual() == NULL && peer_ != NULL) delete peer_;
  peer_ = NULL;
}
const ::metapb::Peer& ChangePeerRequest::peer() const {
  // @@protoc_insertion_point(field_get:raft_messagepb.ChangePeerRequest.peer)
  return peer_ != NULL ? *peer_ : *default_instance_->peer_;
}
::metapb::Peer* ChangePeerRequest::mutable_peer() {
  
  if (peer_ == NULL) {
    peer_ = new ::metapb::Peer;
  }
  // @@protoc_insertion_point(field_mutable:raft_messagepb.ChangePeerRequest.peer)
  return peer_;
}
::metapb::Peer* ChangePeerRequest::release_peer() {
  // @@protoc_insertion_point(field_release:raft_messagepb.ChangePeerRequest.peer)
  
  ::metapb::Peer* temp = peer_;
  peer_ = NULL;
  return temp;
}
void ChangePeerRequest::set_allocated_peer(::metapb::Peer* peer) {
  delete peer_;
  peer_ = peer;
  if (peer) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:raft_messagepb.ChangePeerRequest.peer)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ChangePeerResponse::kRegionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ChangePeerResponse::ChangePeerResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:raft_messagepb.ChangePeerResponse)
}

void ChangePeerResponse::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  region_ = const_cast< ::metapb::Region*>(&::metapb::Region::default_instance());
}

ChangePeerResponse::ChangePeerResponse(const ChangePeerResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:raft_messagepb.ChangePeerResponse)
}

void ChangePeerResponse::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  region_ = NULL;
}

ChangePeerResponse::~ChangePeerResponse() {
  // @@protoc_insertion_point(destructor:raft_messagepb.ChangePeerResponse)
  SharedDtor();
}

void ChangePeerResponse::SharedDtor() {
  if (this != default_instance_) {
    delete region_;
  }
}

void ChangePeerResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChangePeerResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChangePeerResponse_descriptor_;
}

const ChangePeerResponse& ChangePeerResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_raft_5fmessagepb_2eproto();
  return *default_instance_;
}

ChangePeerResponse* ChangePeerResponse::default_instance_ = NULL;

ChangePeerResponse* ChangePeerResponse::New(::google::protobuf::Arena* arena) const {
  ChangePeerResponse* n = new ChangePeerResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ChangePeerResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:raft_messagepb.ChangePeerResponse)
  if (GetArenaNoVirtual() == NULL && region_ != NULL) delete region_;
  region_ = NULL;
}

bool ChangePeerResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:raft_messagepb.ChangePeerResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .metapb.Region region = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_region()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:raft_messagepb.ChangePeerResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:raft_messagepb.ChangePeerResponse)
  return false;
#undef DO_
}

void ChangePeerResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:raft_messagepb.ChangePeerResponse)
  // optional .metapb.Region region = 1;
  if (this->has_region()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->region_, output);
  }

  // @@protoc_insertion_point(serialize_end:raft_messagepb.ChangePeerResponse)
}

::google::protobuf::uint8* ChangePeerResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:raft_messagepb.ChangePeerResponse)
  // optional .metapb.Region region = 1;
  if (this->has_region()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->region_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:raft_messagepb.ChangePeerResponse)
  return target;
}

int ChangePeerResponse::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:raft_messagepb.ChangePeerResponse)
  int total_size = 0;

  // optional .metapb.Region region = 1;
  if (this->has_region()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->region_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChangePeerResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:raft_messagepb.ChangePeerResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ChangePeerResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ChangePeerResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:raft_messagepb.ChangePeerResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:raft_messagepb.ChangePeerResponse)
    MergeFrom(*source);
  }
}

void ChangePeerResponse::MergeFrom(const ChangePeerResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:raft_messagepb.ChangePeerResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.has_region()) {
    mutable_region()->::metapb::Region::MergeFrom(from.region());
  }
}

void ChangePeerResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:raft_messagepb.ChangePeerResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChangePeerResponse::CopyFrom(const ChangePeerResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:raft_messagepb.ChangePeerResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChangePeerResponse::IsInitialized() const {

  return true;
}

void ChangePeerResponse::Swap(ChangePeerResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ChangePeerResponse::InternalSwap(ChangePeerResponse* other) {
  std::swap(region_, other->region_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ChangePeerResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChangePeerResponse_descriptor_;
  metadata.reflection = ChangePeerResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ChangePeerResponse

// optional .metapb.Region region = 1;
bool ChangePeerResponse::has_region() const {
  return !_is_default_instance_ && region_ != NULL;
}
void ChangePeerResponse::clear_region() {
  if (GetArenaNoVirtual() == NULL && region_ != NULL) delete region_;
  region_ = NULL;
}
const ::metapb::Region& ChangePeerResponse::region() const {
  // @@protoc_insertion_point(field_get:raft_messagepb.ChangePeerResponse.region)
  return region_ != NULL ? *region_ : *default_instance_->region_;
}
::metapb::Region* ChangePeerResponse::mutable_region() {
  
  if (region_ == NULL) {
    region_ = new ::metapb::Region;
  }
  // @@protoc_insertion_point(field_mutable:raft_messagepb.ChangePeerResponse.region)
  return region_;
}
::metapb::Region* ChangePeerResponse::release_region() {
  // @@protoc_insertion_point(field_release:raft_messagepb.ChangePeerResponse.region)
  
  ::metapb::Region* temp = region_;
  region_ = NULL;
  return temp;
}
void ChangePeerResponse::set_allocated_region(::metapb::Region* region) {
  delete region_;
  region_ = region;
  if (region) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:raft_messagepb.ChangePeerResponse.region)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SplitRequest::kSplitKeyFieldNumber;
const int SplitRequest::kNewRegionIdFieldNumber;
const int SplitRequest::kNewPeerIdsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SplitRequest::SplitRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:raft_messagepb.SplitRequest)
}

void SplitRequest::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

SplitRequest::SplitRequest(const SplitRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:raft_messagepb.SplitRequest)
}

void SplitRequest::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  split_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  new_region_id_ = GOOGLE_ULONGLONG(0);
}

SplitRequest::~SplitRequest() {
  // @@protoc_insertion_point(destructor:raft_messagepb.SplitRequest)
  SharedDtor();
}

void SplitRequest::SharedDtor() {
  split_key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void SplitRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SplitRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SplitRequest_descriptor_;
}

const SplitRequest& SplitRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_raft_5fmessagepb_2eproto();
  return *default_instance_;
}

SplitRequest* SplitRequest::default_instance_ = NULL;

SplitRequest* SplitRequest::New(::google::protobuf::Arena* arena) const {
  SplitRequest* n = new SplitRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SplitRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:raft_messagepb.SplitRequest)
  split_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  new_region_id_ = GOOGLE_ULONGLONG(0);
  new_peer_ids_.Clear();
}

bool SplitRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:raft_messagepb.SplitRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes split_key = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_split_key()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_new_region_id;
        break;
      }

      // optional uint64 new_region_id = 2;
      case 2: {
        if (tag == 16) {
         parse_new_region_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &new_region_id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_new_peer_ids;
        break;
      }

      // repeated uint64 new_peer_ids = 3;
      case 3: {
        if (tag == 26) {
         parse_new_peer_ids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_new_peer_ids())));
        } else if (tag == 24) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 26, input, this->mutable_new_peer_ids())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:raft_messagepb.SplitRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:raft_messagepb.SplitRequest)
  return false;
#undef DO_
}

void SplitRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:raft_messagepb.SplitRequest)
  // optional bytes split_key = 1;
  if (this->split_key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->split_key(), output);
  }

  // optional uint64 new_region_id = 2;
  if (this->new_region_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->new_region_id(), output);
  }

  // repeated uint64 new_peer_ids = 3;
  if (this->new_peer_ids_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(3, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_new_peer_ids_cached_byte_size_);
  }
  for (int i = 0; i < this->new_peer_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64NoTag(
      this->new_peer_ids(i), output);
  }

  // @@protoc_insertion_point(serialize_end:raft_messagepb.SplitRequest)
}

::google::protobuf::uint8* SplitRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:raft_messagepb.SplitRequest)
  // optional bytes split_key = 1;
  if (this->split_key().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->split_key(), target);
  }

  // optional uint64 new_region_id = 2;
  if (this->new_region_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->new_region_id(), target);
  }

  // repeated uint64 new_peer_ids = 3;
  if (this->new_peer_ids_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      3,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _new_peer_ids_cached_byte_size_, target);
  }
  for (int i = 0; i < this->new_peer_ids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64NoTagToArray(this->new_peer_ids(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:raft_messagepb.SplitRequest)
  return target;
}

int SplitRequest::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:raft_messagepb.SplitRequest)
  int total_size = 0;

  // optional bytes split_key = 1;
  if (this->split_key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->split_key());
  }

  // optional uint64 new_region_id = 2;
  if (this->new_region_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->new_region_id());
  }

  // repeated uint64 new_peer_ids = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->new_peer_ids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->new_peer_ids(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _new_peer_ids_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SplitRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:raft_messagepb.SplitRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const SplitRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const SplitRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:raft_messagepb.SplitRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:raft_messagepb.SplitRequest)
    MergeFrom(*source);
  }
}

void SplitRequest::MergeFrom(const SplitRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:raft_messagepb.SplitRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  new_peer_ids_.MergeFrom(from.new_peer_ids_);
  if (from.split_key().size() > 0) {

    split_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.split_key_);
  }
  if (from.new_region_id() != 0) {
    set_new_region_id(from.new_region_id());
  }
}

void SplitRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:raft_messagepb.SplitRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SplitRequest::CopyFrom(const SplitRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:raft_messagepb.SplitRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SplitRequest::IsInitialized() const {

  return true;
}

void SplitRequest::Swap(SplitRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SplitRequest::InternalSwap(SplitRequest* other) {
  split_key_.Swap(&other->split_key_);
  std::swap(new_region_id_, other->new_region_id_);
  new_peer_ids_.UnsafeArenaSwap(&other->new_peer_ids_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SplitRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SplitRequest_descriptor_;
  metadata.reflection = SplitRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SplitRequest

// optional bytes split_key = 1;
void SplitRequest::clear_split_key() {
  split_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& SplitRequest::split_key() const {
  // @@protoc_insertion_point(field_get:raft_messagepb.SplitRequest.split_key)
  return split_key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SplitRequest::set_split_key(const ::std::string& value) {
  
  split_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:raft_messagepb.SplitRequest.split_key)
}
 void SplitRequest::set_split_key(const char* value) {
  
  split_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:raft_messagepb.SplitRequest.split_key)
}
 void SplitRequest::set_split_key(const void* value, size_t size) {
  
  split_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:raft_messagepb.SplitRequest.split_key)
}
 ::std::string* SplitRequest::mutable_split_key() {
  
  // @@protoc_insertion_point(field_mutable:raft_messagepb.SplitRequest.split_key)
  return split_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* SplitRequest::release_split_key() {
  // @@protoc_insertion_point(field_release:raft_messagepb.SplitRequest.split_key)
  
  return split_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SplitRequest::set_allocated_split_key(::std::string* split_key) {
  if (split_key != NULL) {
    
  } else {
    
  }
  split_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), split_key);
  // @@protoc_insertion_point(field_set_allocated:raft_messagepb.SplitRequest.split_key)
}

// optional uint64 new_region_id = 2;
void SplitRequest::clear_new_region_id() {
  new_region_id_ = GOOGLE_ULONGLONG(0);
}
 ::google::protobuf::uint64 SplitRequest::new_region_id() const {
  // @@protoc_insertion_point(field_get:raft_messagepb.SplitRequest.new_region_id)
  return new_region_id_;
}
 void SplitRequest::set_new_region_id(::google::protobuf::uint64 value) {
  
  new_region_id_ = value;
  // @@protoc_insertion_point(field_set:raft_messagepb.SplitRequest.new_region_id)
}

// repeated uint64 new_peer_ids = 3;
int SplitRequest::new_peer_ids_size() const {
  return new_peer_ids_.size();
}
void SplitRequest::clear_new_peer_ids() {
  new_peer_ids_.Clear();
}
 ::google::protobuf::uint64 SplitRequest::new_peer_ids(int index) const {
  // @@protoc_insertion_point(field_get:raft_messagepb.SplitRequest.new_peer_ids)
  return new_peer_ids_.Get(index);
}
 void SplitRequest::set_new_peer_ids(int index, ::google::protobuf::uint64 value) {
  new_peer_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:raft_messagepb.SplitRequest.new_peer_ids)
}
 void SplitRequest::add_new_peer_ids(::google::protobuf::uint64 value) {
  new_peer_ids_.Add(value);
  // @@protoc_insertion_point(field_add:raft_messagepb.SplitRequest.new_peer_ids)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
SplitRequest::new_peer_ids() const {
  // @@protoc_insertion_point(field_list:raft_messagepb.SplitRequest.new_peer_ids)
  return new_peer_ids_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
SplitRequest::mutable_new_peer_ids() {
  // @@protoc_insertion_point(field_mutable_list:raft_messagepb.SplitRequest.new_peer_ids)
  return &new_peer_ids_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SplitResponse::kRegionsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SplitResponse::SplitResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:raft_messagepb.SplitResponse)
}

void SplitResponse::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

SplitResponse::SplitResponse(const SplitResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:raft_messagepb.SplitResponse)
}

void SplitResponse::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

SplitResponse::~SplitResponse() {
  // @@protoc_insertion_point(destructor:raft_messagepb.SplitResponse)
  SharedDtor();
}

void SplitResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SplitResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SplitResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SplitResponse_descriptor_;
}

const SplitResponse& SplitResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_raft_5fmessagepb_2eproto();
  return *default_instance_;
}

SplitResponse* SplitResponse::default_instance_ = NULL;

SplitResponse* SplitResponse::New(::google::protobuf::Arena* arena) const {
  SplitResponse* n = new SplitResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SplitResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:raft_messagepb.SplitResponse)
  regions_.Clear();
}

bool SplitResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:raft_messagepb.SplitResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .metapb.Region regions = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_regions:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_regions()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_regions;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:raft_messagepb.SplitResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:raft_messagepb.SplitResponse)
  return false;
#undef DO_
}

void SplitResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:raft_messagepb.SplitResponse)
  // repeated .metapb.Region regions = 1;
  for (unsigned int i = 0, n = this->regions_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->regions(i), output);
  }

  // @@protoc_insertion_point(serialize_end:raft_messagepb.SplitResponse)
}

::google::protobuf::uint8* SplitResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:raft_messagepb.SplitResponse)
  // repeated .metapb.Region regions = 1;
  for (unsigned int i = 0, n = this->regions_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->regions(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:raft_messagepb.SplitResponse)
  return target;
}

int SplitResponse::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:raft_messagepb.SplitResponse)
  int total_size = 0;

  // repeated .metapb.Region regions = 1;
  total_size += 1 * this->regions_size();
  for (int i = 0; i < this->regions_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->regions(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SplitResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:raft_messagepb.SplitResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const SplitResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const SplitResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:raft_messagepb.SplitResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:raft_messagepb.SplitResponse)
    MergeFrom(*source);
  }
}

void SplitResponse::MergeFrom(const SplitResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:raft_messagepb.SplitResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  regions_.MergeFrom(from.regions_);
}

void SplitResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:raft_messagepb.SplitResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SplitResponse::CopyFrom(const SplitResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:raft_messagepb.SplitResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SplitResponse::IsInitialized() const {

  return true;
}

void SplitResponse::Swap(SplitResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SplitResponse::InternalSwap(SplitResponse* other) {
  regions_.UnsafeArenaSwap(&other->regions_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SplitResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SplitResponse_descriptor_;
  metadata.reflection = SplitResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SplitResponse

// repeated .metapb.Region regions = 1;
int SplitResponse::regions_size() const {
  return regions_.size();
}
void SplitResponse::clear_regions() {
  regions_.Clear();
}
const ::metapb::Region& SplitResponse::regions(int index) const {
  // @@protoc_insertion_point(field_get:raft_messagepb.SplitResponse.regions)
  return regions_.Get(index);
}
::metapb::Region* SplitResponse::mutable_regions(int index) {
  // @@protoc_insertion_point(field_mutable:raft_messagepb.SplitResponse.regions)
  return regions_.Mutable(index);
}
::metapb::Region* SplitResponse::add_regions() {
  // @@protoc_insertion_point(field_add:raft_messagepb.SplitResponse.regions)
  return regions_.Add();
}
::google::protobuf::RepeatedPtrField< ::metapb::Region >*
SplitResponse::mutable_regions() {
  // @@protoc_insertion_point(field_mutable_list:raft_messagepb.SplitResponse.regions)
  return &regions_;
}
const ::google::protobuf::RepeatedPtrField< ::metapb::Region >&
SplitResponse::regions() const {
  // @@protoc_insertion_point(field_list:raft_messagepb.SplitResponse.regions)
  return regions_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CompactLogRequest::kCompactIndexFieldNumber;
const int CompactLogRequest::kCompactTermFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CompactLogRequest::CompactLogRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:raft_messagepb.CompactLogRequest)
}

void CompactLogRequest::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

CompactLogRequest::CompactLogRequest(const CompactLogRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:raft_messagepb.CompactLogRequest)
}

void CompactLogRequest::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  compact_index_ = GOOGLE_ULONGLONG(0);
  compact_term_ = GOOGLE_ULONGLONG(0);
}

CompactLogRequest::~CompactLogRequest() {
  // @@protoc_insertion_point(destructor:raft_messagepb.CompactLogRequest)
  SharedDtor();
}

void CompactLogRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CompactLogRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CompactLogRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CompactLogRequest_descriptor_;
}

const CompactLogRequest& CompactLogRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_raft_5fmessagepb_2eproto();
  return *default_instance_;
}

CompactLogRequest* CompactLogRequest::default_instance_ = NULL;

CompactLogRequest* CompactLogRequest::New(::google::protobuf::Arena* arena) const {
  CompactLogRequest* n = new CompactLogRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CompactLogRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:raft_messagepb.CompactLogRequest)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(CompactLogRequest, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<CompactLogRequest*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(compact_index_, compact_term_);

#undef ZR_HELPER_
#undef ZR_

}

bool CompactLogRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:raft_messagepb.CompactLogRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 compact_index = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &compact_index_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_compact_term;
        break;
      }

      // optional uint64 compact_term = 2;
      case 2: {
        if (tag == 16) {
         parse_compact_term:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &compact_term_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:raft_messagepb.CompactLogRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:raft_messagepb.CompactLogRequest)
  return false;
#undef DO_
}

void CompactLogRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:raft_messagepb.CompactLogRequest)
  // optional uint64 compact_index = 1;
  if (this->compact_index() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->compact_index(), output);
  }

  // optional uint64 compact_term = 2;
  if (this->compact_term() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->compact_term(), output);
  }

  // @@protoc_insertion_point(serialize_end:raft_messagepb.CompactLogRequest)
}

::google::protobuf::uint8* CompactLogRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:raft_messagepb.CompactLogRequest)
  // optional uint64 compact_index = 1;
  if (this->compact_index() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->compact_index(), target);
  }

  // optional uint64 compact_term = 2;
  if (this->compact_term() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->compact_term(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:raft_messagepb.CompactLogRequest)
  return target;
}

int CompactLogRequest::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:raft_messagepb.CompactLogRequest)
  int total_size = 0;

  // optional uint64 compact_index = 1;
  if (this->compact_index() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->compact_index());
  }

  // optional uint64 compact_term = 2;
  if (this->compact_term() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->compact_term());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CompactLogRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:raft_messagepb.CompactLogRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const CompactLogRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CompactLogRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:raft_messagepb.CompactLogRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:raft_messagepb.CompactLogRequest)
    MergeFrom(*source);
  }
}

void CompactLogRequest::MergeFrom(const CompactLogRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:raft_messagepb.CompactLogRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.compact_index() != 0) {
    set_compact_index(from.compact_index());
  }
  if (from.compact_term() != 0) {
    set_compact_term(from.compact_term());
  }
}

void CompactLogRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:raft_messagepb.CompactLogRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CompactLogRequest::CopyFrom(const CompactLogRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:raft_messagepb.CompactLogRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CompactLogRequest::IsInitialized() const {

  return true;
}

void CompactLogRequest::Swap(CompactLogRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CompactLogRequest::InternalSwap(CompactLogRequest* other) {
  std::swap(compact_index_, other->compact_index_);
  std::swap(compact_term_, other->compact_term_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CompactLogRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CompactLogRequest_descriptor_;
  metadata.reflection = CompactLogRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CompactLogRequest

// optional uint64 compact_index = 1;
void CompactLogRequest::clear_compact_index() {
  compact_index_ = GOOGLE_ULONGLONG(0);
}
 ::google::protobuf::uint64 CompactLogRequest::compact_index() const {
  // @@protoc_insertion_point(field_get:raft_messagepb.CompactLogRequest.compact_index)
  return compact_index_;
}
 void CompactLogRequest::set_compact_index(::google::protobuf::uint64 value) {
  
  compact_index_ = value;
  // @@protoc_insertion_point(field_set:raft_messagepb.CompactLogRequest.compact_index)
}

// optional uint64 compact_term = 2;
void CompactLogRequest::clear_compact_term() {
  compact_term_ = GOOGLE_ULONGLONG(0);
}
 ::google::protobuf::uint64 CompactLogRequest::compact_term() const {
  // @@protoc_insertion_point(field_get:raft_messagepb.CompactLogRequest.compact_term)
  return compact_term_;
}
 void CompactLogRequest::set_compact_term(::google::protobuf::uint64 value) {
  
  compact_term_ = value;
  // @@protoc_insertion_point(field_set:raft_messagepb.CompactLogRequest.compact_term)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CompactLogResponse::CompactLogResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:raft_messagepb.CompactLogResponse)
}

void CompactLogResponse::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

CompactLogResponse::CompactLogResponse(const CompactLogResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:raft_messagepb.CompactLogResponse)
}

void CompactLogResponse::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

CompactLogResponse::~CompactLogResponse() {
  // @@protoc_insertion_point(destructor:raft_messagepb.CompactLogResponse)
  SharedDtor();
}

void CompactLogResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CompactLogResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CompactLogResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CompactLogResponse_descriptor_;
}

const CompactLogResponse& CompactLogResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_raft_5fmessagepb_2eproto();
  return *default_instance_;
}

CompactLogResponse* CompactLogResponse::default_instance_ = NULL;

CompactLogResponse* CompactLogResponse::New(::google::protobuf::Arena* arena) const {
  CompactLogResponse* n = new CompactLogResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CompactLogResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:raft_messagepb.CompactLogResponse)
}

bool CompactLogResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:raft_messagepb.CompactLogResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
success:
  // @@protoc_insertion_point(parse_success:raft_messagepb.CompactLogResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:raft_messagepb.CompactLogResponse)
  return false;
#undef DO_
}

void CompactLogResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:raft_messagepb.CompactLogResponse)
  // @@protoc_insertion_point(serialize_end:raft_messagepb.CompactLogResponse)
}

::google::protobuf::uint8* CompactLogResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:raft_messagepb.CompactLogResponse)
  // @@protoc_insertion_point(serialize_to_array_end:raft_messagepb.CompactLogResponse)
  return target;
}

int CompactLogResponse::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:raft_messagepb.CompactLogResponse)
  int total_size = 0;

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CompactLogResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:raft_messagepb.CompactLogResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const CompactLogResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CompactLogResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:raft_messagepb.CompactLogResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:raft_messagepb.CompactLogResponse)
    MergeFrom(*source);
  }
}

void CompactLogResponse::MergeFrom(const CompactLogResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:raft_messagepb.CompactLogResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
}

void CompactLogResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:raft_messagepb.CompactLogResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CompactLogResponse::CopyFrom(const CompactLogResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:raft_messagepb.CompactLogResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CompactLogResponse::IsInitialized() const {

  return true;
}

void CompactLogResponse::Swap(CompactLogResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CompactLogResponse::InternalSwap(CompactLogResponse* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CompactLogResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CompactLogResponse_descriptor_;
  metadata.reflection = CompactLogResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CompactLogResponse

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TransferLeaderRequest::kPeerFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TransferLeaderRequest::TransferLeaderRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:raft_messagepb.TransferLeaderRequest)
}

void TransferLeaderRequest::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  peer_ = const_cast< ::metapb::Peer*>(&::metapb::Peer::default_instance());
}

TransferLeaderRequest::TransferLeaderRequest(const TransferLeaderRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:raft_messagepb.TransferLeaderRequest)
}

void TransferLeaderRequest::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  peer_ = NULL;
}

TransferLeaderRequest::~TransferLeaderRequest() {
  // @@protoc_insertion_point(destructor:raft_messagepb.TransferLeaderRequest)
  SharedDtor();
}

void TransferLeaderRequest::SharedDtor() {
  if (this != default_instance_) {
    delete peer_;
  }
}

void TransferLeaderRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TransferLeaderRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TransferLeaderRequest_descriptor_;
}

const TransferLeaderRequest& TransferLeaderRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_raft_5fmessagepb_2eproto();
  return *default_instance_;
}

TransferLeaderRequest* TransferLeaderRequest::default_instance_ = NULL;

TransferLeaderRequest* TransferLeaderRequest::New(::google::protobuf::Arena* arena) const {
  TransferLeaderRequest* n = new TransferLeaderRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TransferLeaderRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:raft_messagepb.TransferLeaderRequest)
  if (GetArenaNoVirtual() == NULL && peer_ != NULL) delete peer_;
  peer_ = NULL;
}

bool TransferLeaderRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:raft_messagepb.TransferLeaderRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .metapb.Peer peer = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_peer()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:raft_messagepb.TransferLeaderRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:raft_messagepb.TransferLeaderRequest)
  return false;
#undef DO_
}

void TransferLeaderRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:raft_messagepb.TransferLeaderRequest)
  // optional .metapb.Peer peer = 1;
  if (this->has_peer()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->peer_, output);
  }

  // @@protoc_insertion_point(serialize_end:raft_messagepb.TransferLeaderRequest)
}

::google::protobuf::uint8* TransferLeaderRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:raft_messagepb.TransferLeaderRequest)
  // optional .metapb.Peer peer = 1;
  if (this->has_peer()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->peer_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:raft_messagepb.TransferLeaderRequest)
  return target;
}

int TransferLeaderRequest::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:raft_messagepb.TransferLeaderRequest)
  int total_size = 0;

  // optional .metapb.Peer peer = 1;
  if (this->has_peer()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->peer_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TransferLeaderRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:raft_messagepb.TransferLeaderRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const TransferLeaderRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const TransferLeaderRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:raft_messagepb.TransferLeaderRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:raft_messagepb.TransferLeaderRequest)
    MergeFrom(*source);
  }
}

void TransferLeaderRequest::MergeFrom(const TransferLeaderRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:raft_messagepb.TransferLeaderRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.has_peer()) {
    mutable_peer()->::metapb::Peer::MergeFrom(from.peer());
  }
}

void TransferLeaderRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:raft_messagepb.TransferLeaderRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransferLeaderRequest::CopyFrom(const TransferLeaderRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:raft_messagepb.TransferLeaderRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransferLeaderRequest::IsInitialized() const {

  return true;
}

void TransferLeaderRequest::Swap(TransferLeaderRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TransferLeaderRequest::InternalSwap(TransferLeaderRequest* other) {
  std::swap(peer_, other->peer_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TransferLeaderRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TransferLeaderRequest_descriptor_;
  metadata.reflection = TransferLeaderRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TransferLeaderRequest

// optional .metapb.Peer peer = 1;
bool TransferLeaderRequest::has_peer() const {
  return !_is_default_instance_ && peer_ != NULL;
}
void TransferLeaderRequest::clear_peer() {
  if (GetArenaNoVirtual() == NULL && peer_ != NULL) delete peer_;
  peer_ = NULL;
}
const ::metapb::Peer& TransferLeaderRequest::peer() const {
  // @@protoc_insertion_point(field_get:raft_messagepb.TransferLeaderRequest.peer)
  return peer_ != NULL ? *peer_ : *default_instance_->peer_;
}
::metapb::Peer* TransferLeaderRequest::mutable_peer() {
  
  if (peer_ == NULL) {
    peer_ = new ::metapb::Peer;
  }
  // @@protoc_insertion_point(field_mutable:raft_messagepb.TransferLeaderRequest.peer)
  return peer_;
}
::metapb::Peer* TransferLeaderRequest::release_peer() {
  // @@protoc_insertion_point(field_release:raft_messagepb.TransferLeaderRequest.peer)
  
  ::metapb::Peer* temp = peer_;
  peer_ = NULL;
  return temp;
}
void TransferLeaderRequest::set_allocated_peer(::metapb::Peer* peer) {
  delete peer_;
  peer_ = peer;
  if (peer) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:raft_messagepb.TransferLeaderRequest.peer)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TransferLeaderResponse::TransferLeaderResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:raft_messagepb.TransferLeaderResponse)
}

void TransferLeaderResponse::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

TransferLeaderResponse::TransferLeaderResponse(const TransferLeaderResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:raft_messagepb.TransferLeaderResponse)
}

void TransferLeaderResponse::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

TransferLeaderResponse::~TransferLeaderResponse() {
  // @@protoc_insertion_point(destructor:raft_messagepb.TransferLeaderResponse)
  SharedDtor();
}

void TransferLeaderResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TransferLeaderResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TransferLeaderResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TransferLeaderResponse_descriptor_;
}

const TransferLeaderResponse& TransferLeaderResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_raft_5fmessagepb_2eproto();
  return *default_instance_;
}

TransferLeaderResponse* TransferLeaderResponse::default_instance_ = NULL;

TransferLeaderResponse* TransferLeaderResponse::New(::google::protobuf::Arena* arena) const {
  TransferLeaderResponse* n = new TransferLeaderResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TransferLeaderResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:raft_messagepb.TransferLeaderResponse)
}

bool TransferLeaderResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:raft_messagepb.TransferLeaderResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
success:
  // @@protoc_insertion_point(parse_success:raft_messagepb.TransferLeaderResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:raft_messagepb.TransferLeaderResponse)
  return false;
#undef DO_
}

void TransferLeaderResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:raft_messagepb.TransferLeaderResponse)
  // @@protoc_insertion_point(serialize_end:raft_messagepb.TransferLeaderResponse)
}

::google::protobuf::uint8* TransferLeaderResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:raft_messagepb.TransferLeaderResponse)
  // @@protoc_insertion_point(serialize_to_array_end:raft_messagepb.TransferLeaderResponse)
  return target;
}

int TransferLeaderResponse::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:raft_messagepb.TransferLeaderResponse)
  int total_size = 0;

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TransferLeaderResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:raft_messagepb.TransferLeaderResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const TransferLeaderResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const TransferLeaderResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:raft_messagepb.TransferLeaderResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:raft_messagepb.TransferLeaderResponse)
    MergeFrom(*source);
  }
}

void TransferLeaderResponse::MergeFrom(const TransferLeaderResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:raft_messagepb.TransferLeaderResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
}

void TransferLeaderResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:raft_messagepb.TransferLeaderResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransferLeaderResponse::CopyFrom(const TransferLeaderResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:raft_messagepb.TransferLeaderResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransferLeaderResponse::IsInitialized() const {

  return true;
}

void TransferLeaderResponse::Swap(TransferLeaderResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TransferLeaderResponse::InternalSwap(TransferLeaderResponse* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TransferLeaderResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TransferLeaderResponse_descriptor_;
  metadata.reflection = TransferLeaderResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TransferLeaderResponse

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AdminRequest::kCmdTypeFieldNumber;
const int AdminRequest::kChangePeerFieldNumber;
const int AdminRequest::kCompactLogFieldNumber;
const int AdminRequest::kTransferLeaderFieldNumber;
const int AdminRequest::kSplitFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AdminRequest::AdminRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:raft_messagepb.AdminRequest)
}

void AdminRequest::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  change_peer_ = const_cast< ::raft_messagepb::ChangePeerRequest*>(&::raft_messagepb::ChangePeerRequest::default_instance());
  compact_log_ = const_cast< ::raft_messagepb::CompactLogRequest*>(&::raft_messagepb::CompactLogRequest::default_instance());
  transfer_leader_ = const_cast< ::raft_messagepb::TransferLeaderRequest*>(&::raft_messagepb::TransferLeaderRequest::default_instance());
  split_ = const_cast< ::raft_messagepb::SplitRequest*>(&::raft_messagepb::SplitRequest::default_instance());
}

AdminRequest::AdminRequest(const AdminRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:raft_messagepb.AdminRequest)
}

void AdminRequest::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  cmd_type_ = 0;
  change_peer_ = NULL;
  compact_log_ = NULL;
  transfer_leader_ = NULL;
  split_ = NULL;
}

AdminRequest::~AdminRequest() {
  // @@protoc_insertion_point(destructor:raft_messagepb.AdminRequest)
  SharedDtor();
}

void AdminRequest::SharedDtor() {
  if (this != default_instance_) {
    delete change_peer_;
    delete compact_log_;
    delete transfer_leader_;
    delete split_;
  }
}

void AdminRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AdminRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AdminRequest_descriptor_;
}

const AdminRequest& AdminRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_raft_5fmessagepb_2eproto();
  return *default_instance_;
}

AdminRequest* AdminRequest::default_instance_ = NULL;

AdminRequest* AdminRequest::New(::google::protobuf::Arena* arena) const {
  AdminRequest* n = new AdminRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AdminRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:raft_messagepb.AdminRequest)
  cmd_type_ = 0;
  if (GetArenaNoVirtual() == NULL && change_peer_ != NULL) delete change_peer_;
  change_peer_ = NULL;
  if (GetArenaNoVirtual() == NULL && compact_log_ != NULL) delete compact_log_;
  compact_log_ = NULL;
  if (GetArenaNoVirtual() == NULL && transfer_leader_ != NULL) delete transfer_leader_;
  transfer_leader_ = NULL;
  if (GetArenaNoVirtual() == NULL && split_ != NULL) delete split_;
  split_ = NULL;
}

bool AdminRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:raft_messagepb.AdminRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .raft_messagepb.AdminCmdType cmd_type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_cmd_type(static_cast< ::raft_messagepb::AdminCmdType >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_change_peer;
        break;
      }

      // optional .raft_messagepb.ChangePeerRequest change_peer = 2;
      case 2: {
        if (tag == 18) {
         parse_change_peer:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_change_peer()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_compact_log;
        break;
      }

      // optional .raft_messagepb.CompactLogRequest compact_log = 4;
      case 4: {
        if (tag == 34) {
         parse_compact_log:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_compact_log()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_transfer_leader;
        break;
      }

      // optional .raft_messagepb.TransferLeaderRequest transfer_leader = 5;
      case 5: {
        if (tag == 42) {
         parse_transfer_leader:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_transfer_leader()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_split;
        break;
      }

      // optional .raft_messagepb.SplitRequest split = 10;
      case 10: {
        if (tag == 82) {
         parse_split:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_split()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:raft_messagepb.AdminRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:raft_messagepb.AdminRequest)
  return false;
#undef DO_
}

void AdminRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:raft_messagepb.AdminRequest)
  // optional .raft_messagepb.AdminCmdType cmd_type = 1;
  if (this->cmd_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd_type(), output);
  }

  // optional .raft_messagepb.ChangePeerRequest change_peer = 2;
  if (this->has_change_peer()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->change_peer_, output);
  }

  // optional .raft_messagepb.CompactLogRequest compact_log = 4;
  if (this->has_compact_log()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->compact_log_, output);
  }

  // optional .raft_messagepb.TransferLeaderRequest transfer_leader = 5;
  if (this->has_transfer_leader()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->transfer_leader_, output);
  }

  // optional .raft_messagepb.SplitRequest split = 10;
  if (this->has_split()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, *this->split_, output);
  }

  // @@protoc_insertion_point(serialize_end:raft_messagepb.AdminRequest)
}

::google::protobuf::uint8* AdminRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:raft_messagepb.AdminRequest)
  // optional .raft_messagepb.AdminCmdType cmd_type = 1;
  if (this->cmd_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd_type(), target);
  }

  // optional .raft_messagepb.ChangePeerRequest change_peer = 2;
  if (this->has_change_peer()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->change_peer_, false, target);
  }

  // optional .raft_messagepb.CompactLogRequest compact_log = 4;
  if (this->has_compact_log()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->compact_log_, false, target);
  }

  // optional .raft_messagepb.TransferLeaderRequest transfer_leader = 5;
  if (this->has_transfer_leader()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->transfer_leader_, false, target);
  }

  // optional .raft_messagepb.SplitRequest split = 10;
  if (this->has_split()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        10, *this->split_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:raft_messagepb.AdminRequest)
  return target;
}

int AdminRequest::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:raft_messagepb.AdminRequest)
  int total_size = 0;

  // optional .raft_messagepb.AdminCmdType cmd_type = 1;
  if (this->cmd_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd_type());
  }

  // optional .raft_messagepb.ChangePeerRequest change_peer = 2;
  if (this->has_change_peer()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->change_peer_);
  }

  // optional .raft_messagepb.CompactLogRequest compact_log = 4;
  if (this->has_compact_log()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->compact_log_);
  }

  // optional .raft_messagepb.TransferLeaderRequest transfer_leader = 5;
  if (this->has_transfer_leader()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->transfer_leader_);
  }

  // optional .raft_messagepb.SplitRequest split = 10;
  if (this->has_split()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->split_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AdminRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:raft_messagepb.AdminRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const AdminRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const AdminRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:raft_messagepb.AdminRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:raft_messagepb.AdminRequest)
    MergeFrom(*source);
  }
}

void AdminRequest::MergeFrom(const AdminRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:raft_messagepb.AdminRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.cmd_type() != 0) {
    set_cmd_type(from.cmd_type());
  }
  if (from.has_change_peer()) {
    mutable_change_peer()->::raft_messagepb::ChangePeerRequest::MergeFrom(from.change_peer());
  }
  if (from.has_compact_log()) {
    mutable_compact_log()->::raft_messagepb::CompactLogRequest::MergeFrom(from.compact_log());
  }
  if (from.has_transfer_leader()) {
    mutable_transfer_leader()->::raft_messagepb::TransferLeaderRequest::MergeFrom(from.transfer_leader());
  }
  if (from.has_split()) {
    mutable_split()->::raft_messagepb::SplitRequest::MergeFrom(from.split());
  }
}

void AdminRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:raft_messagepb.AdminRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AdminRequest::CopyFrom(const AdminRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:raft_messagepb.AdminRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AdminRequest::IsInitialized() const {

  return true;
}

void AdminRequest::Swap(AdminRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AdminRequest::InternalSwap(AdminRequest* other) {
  std::swap(cmd_type_, other->cmd_type_);
  std::swap(change_peer_, other->change_peer_);
  std::swap(compact_log_, other->compact_log_);
  std::swap(transfer_leader_, other->transfer_leader_);
  std::swap(split_, other->split_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AdminRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AdminRequest_descriptor_;
  metadata.reflection = AdminRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AdminRequest

// optional .raft_messagepb.AdminCmdType cmd_type = 1;
void AdminRequest::clear_cmd_type() {
  cmd_type_ = 0;
}
 ::raft_messagepb::AdminCmdType AdminRequest::cmd_type() const {
  // @@protoc_insertion_point(field_get:raft_messagepb.AdminRequest.cmd_type)
  return static_cast< ::raft_messagepb::AdminCmdType >(cmd_type_);
}
 void AdminRequest::set_cmd_type(::raft_messagepb::AdminCmdType value) {
  
  cmd_type_ = value;
  // @@protoc_insertion_point(field_set:raft_messagepb.AdminRequest.cmd_type)
}

// optional .raft_messagepb.ChangePeerRequest change_peer = 2;
bool AdminRequest::has_change_peer() const {
  return !_is_default_instance_ && change_peer_ != NULL;
}
void AdminRequest::clear_change_peer() {
  if (GetArenaNoVirtual() == NULL && change_peer_ != NULL) delete change_peer_;
  change_peer_ = NULL;
}
const ::raft_messagepb::ChangePeerRequest& AdminRequest::change_peer() const {
  // @@protoc_insertion_point(field_get:raft_messagepb.AdminRequest.change_peer)
  return change_peer_ != NULL ? *change_peer_ : *default_instance_->change_peer_;
}
::raft_messagepb::ChangePeerRequest* AdminRequest::mutable_change_peer() {
  
  if (change_peer_ == NULL) {
    change_peer_ = new ::raft_messagepb::ChangePeerRequest;
  }
  // @@protoc_insertion_point(field_mutable:raft_messagepb.AdminRequest.change_peer)
  return change_peer_;
}
::raft_messagepb::ChangePeerRequest* AdminRequest::release_change_peer() {
  // @@protoc_insertion_point(field_release:raft_messagepb.AdminRequest.change_peer)
  
  ::raft_messagepb::ChangePeerRequest* temp = change_peer_;
  change_peer_ = NULL;
  return temp;
}
void AdminRequest::set_allocated_change_peer(::raft_messagepb::ChangePeerRequest* change_peer) {
  delete change_peer_;
  change_peer_ = change_peer;
  if (change_peer) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:raft_messagepb.AdminRequest.change_peer)
}

// optional .raft_messagepb.CompactLogRequest compact_log = 4;
bool AdminRequest::has_compact_log() const {
  return !_is_default_instance_ && compact_log_ != NULL;
}
void AdminRequest::clear_compact_log() {
  if (GetArenaNoVirtual() == NULL && compact_log_ != NULL) delete compact_log_;
  compact_log_ = NULL;
}
const ::raft_messagepb::CompactLogRequest& AdminRequest::compact_log() const {
  // @@protoc_insertion_point(field_get:raft_messagepb.AdminRequest.compact_log)
  return compact_log_ != NULL ? *compact_log_ : *default_instance_->compact_log_;
}
::raft_messagepb::CompactLogRequest* AdminRequest::mutable_compact_log() {
  
  if (compact_log_ == NULL) {
    compact_log_ = new ::raft_messagepb::CompactLogRequest;
  }
  // @@protoc_insertion_point(field_mutable:raft_messagepb.AdminRequest.compact_log)
  return compact_log_;
}
::raft_messagepb::CompactLogRequest* AdminRequest::release_compact_log() {
  // @@protoc_insertion_point(field_release:raft_messagepb.AdminRequest.compact_log)
  
  ::raft_messagepb::CompactLogRequest* temp = compact_log_;
  compact_log_ = NULL;
  return temp;
}
void AdminRequest::set_allocated_compact_log(::raft_messagepb::CompactLogRequest* compact_log) {
  delete compact_log_;
  compact_log_ = compact_log;
  if (compact_log) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:raft_messagepb.AdminRequest.compact_log)
}

// optional .raft_messagepb.TransferLeaderRequest transfer_leader = 5;
bool AdminRequest::has_transfer_leader() const {
  return !_is_default_instance_ && transfer_leader_ != NULL;
}
void AdminRequest::clear_transfer_leader() {
  if (GetArenaNoVirtual() == NULL && transfer_leader_ != NULL) delete transfer_leader_;
  transfer_leader_ = NULL;
}
const ::raft_messagepb::TransferLeaderRequest& AdminRequest::transfer_leader() const {
  // @@protoc_insertion_point(field_get:raft_messagepb.AdminRequest.transfer_leader)
  return transfer_leader_ != NULL ? *transfer_leader_ : *default_instance_->transfer_leader_;
}
::raft_messagepb::TransferLeaderRequest* AdminRequest::mutable_transfer_leader() {
  
  if (transfer_leader_ == NULL) {
    transfer_leader_ = new ::raft_messagepb::TransferLeaderRequest;
  }
  // @@protoc_insertion_point(field_mutable:raft_messagepb.AdminRequest.transfer_leader)
  return transfer_leader_;
}
::raft_messagepb::TransferLeaderRequest* AdminRequest::release_transfer_leader() {
  // @@protoc_insertion_point(field_release:raft_messagepb.AdminRequest.transfer_leader)
  
  ::raft_messagepb::TransferLeaderRequest* temp = transfer_leader_;
  transfer_leader_ = NULL;
  return temp;
}
void AdminRequest::set_allocated_transfer_leader(::raft_messagepb::TransferLeaderRequest* transfer_leader) {
  delete transfer_leader_;
  transfer_leader_ = transfer_leader;
  if (transfer_leader) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:raft_messagepb.AdminRequest.transfer_leader)
}

// optional .raft_messagepb.SplitRequest split = 10;
bool AdminRequest::has_split() const {
  return !_is_default_instance_ && split_ != NULL;
}
void AdminRequest::clear_split() {
  if (GetArenaNoVirtual() == NULL && split_ != NULL) delete split_;
  split_ = NULL;
}
const ::raft_messagepb::SplitRequest& AdminRequest::split() const {
  // @@protoc_insertion_point(field_get:raft_messagepb.AdminRequest.split)
  return split_ != NULL ? *split_ : *default_instance_->split_;
}
::raft_messagepb::SplitRequest* AdminRequest::mutable_split() {
  
  if (split_ == NULL) {
    split_ = new ::raft_messagepb::SplitRequest;
  }
  // @@protoc_insertion_point(field_mutable:raft_messagepb.AdminRequest.split)
  return split_;
}
::raft_messagepb::SplitRequest* AdminRequest::release_split() {
  // @@protoc_insertion_point(field_release:raft_messagepb.AdminRequest.split)
  
  ::raft_messagepb::SplitRequest* temp = split_;
  split_ = NULL;
  return temp;
}
void AdminRequest::set_allocated_split(::raft_messagepb::SplitRequest* split) {
  delete split_;
  split_ = split;
  if (split) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:raft_messagepb.AdminRequest.split)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AdminResponse::kCmdTypeFieldNumber;
const int AdminResponse::kChangePeerFieldNumber;
const int AdminResponse::kCompactLogFieldNumber;
const int AdminResponse::kTransferLeaderFieldNumber;
const int AdminResponse::kSplitFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AdminResponse::AdminResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:raft_messagepb.AdminResponse)
}

void AdminResponse::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  change_peer_ = const_cast< ::raft_messagepb::ChangePeerResponse*>(&::raft_messagepb::ChangePeerResponse::default_instance());
  compact_log_ = const_cast< ::raft_messagepb::CompactLogResponse*>(&::raft_messagepb::CompactLogResponse::default_instance());
  transfer_leader_ = const_cast< ::raft_messagepb::TransferLeaderResponse*>(&::raft_messagepb::TransferLeaderResponse::default_instance());
  split_ = const_cast< ::raft_messagepb::SplitResponse*>(&::raft_messagepb::SplitResponse::default_instance());
}

AdminResponse::AdminResponse(const AdminResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:raft_messagepb.AdminResponse)
}

void AdminResponse::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  cmd_type_ = 0;
  change_peer_ = NULL;
  compact_log_ = NULL;
  transfer_leader_ = NULL;
  split_ = NULL;
}

AdminResponse::~AdminResponse() {
  // @@protoc_insertion_point(destructor:raft_messagepb.AdminResponse)
  SharedDtor();
}

void AdminResponse::SharedDtor() {
  if (this != default_instance_) {
    delete change_peer_;
    delete compact_log_;
    delete transfer_leader_;
    delete split_;
  }
}

void AdminResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AdminResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AdminResponse_descriptor_;
}

const AdminResponse& AdminResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_raft_5fmessagepb_2eproto();
  return *default_instance_;
}

AdminResponse* AdminResponse::default_instance_ = NULL;

AdminResponse* AdminResponse::New(::google::protobuf::Arena* arena) const {
  AdminResponse* n = new AdminResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AdminResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:raft_messagepb.AdminResponse)
  cmd_type_ = 0;
  if (GetArenaNoVirtual() == NULL && change_peer_ != NULL) delete change_peer_;
  change_peer_ = NULL;
  if (GetArenaNoVirtual() == NULL && compact_log_ != NULL) delete compact_log_;
  compact_log_ = NULL;
  if (GetArenaNoVirtual() == NULL && transfer_leader_ != NULL) delete transfer_leader_;
  transfer_leader_ = NULL;
  if (GetArenaNoVirtual() == NULL && split_ != NULL) delete split_;
  split_ = NULL;
}

bool AdminResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:raft_messagepb.AdminResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .raft_messagepb.AdminCmdType cmd_type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_cmd_type(static_cast< ::raft_messagepb::AdminCmdType >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_change_peer;
        break;
      }

      // optional .raft_messagepb.ChangePeerResponse change_peer = 2;
      case 2: {
        if (tag == 18) {
         parse_change_peer:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_change_peer()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_compact_log;
        break;
      }

      // optional .raft_messagepb.CompactLogResponse compact_log = 4;
      case 4: {
        if (tag == 34) {
         parse_compact_log:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_compact_log()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_transfer_leader;
        break;
      }

      // optional .raft_messagepb.TransferLeaderResponse transfer_leader = 5;
      case 5: {
        if (tag == 42) {
         parse_transfer_leader:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_transfer_leader()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_split;
        break;
      }

      // optional .raft_messagepb.SplitResponse split = 10;
      case 10: {
        if (tag == 82) {
         parse_split:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_split()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:raft_messagepb.AdminResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:raft_messagepb.AdminResponse)
  return false;
#undef DO_
}

void AdminResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:raft_messagepb.AdminResponse)
  // optional .raft_messagepb.AdminCmdType cmd_type = 1;
  if (this->cmd_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd_type(), output);
  }

  // optional .raft_messagepb.ChangePeerResponse change_peer = 2;
  if (this->has_change_peer()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->change_peer_, output);
  }

  // optional .raft_messagepb.CompactLogResponse compact_log = 4;
  if (this->has_compact_log()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->compact_log_, output);
  }

  // optional .raft_messagepb.TransferLeaderResponse transfer_leader = 5;
  if (this->has_transfer_leader()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->transfer_leader_, output);
  }

  // optional .raft_messagepb.SplitResponse split = 10;
  if (this->has_split()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, *this->split_, output);
  }

  // @@protoc_insertion_point(serialize_end:raft_messagepb.AdminResponse)
}

::google::protobuf::uint8* AdminResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:raft_messagepb.AdminResponse)
  // optional .raft_messagepb.AdminCmdType cmd_type = 1;
  if (this->cmd_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd_type(), target);
  }

  // optional .raft_messagepb.ChangePeerResponse change_peer = 2;
  if (this->has_change_peer()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->change_peer_, false, target);
  }

  // optional .raft_messagepb.CompactLogResponse compact_log = 4;
  if (this->has_compact_log()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->compact_log_, false, target);
  }

  // optional .raft_messagepb.TransferLeaderResponse transfer_leader = 5;
  if (this->has_transfer_leader()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->transfer_leader_, false, target);
  }

  // optional .raft_messagepb.SplitResponse split = 10;
  if (this->has_split()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        10, *this->split_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:raft_messagepb.AdminResponse)
  return target;
}

int AdminResponse::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:raft_messagepb.AdminResponse)
  int total_size = 0;

  // optional .raft_messagepb.AdminCmdType cmd_type = 1;
  if (this->cmd_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd_type());
  }

  // optional .raft_messagepb.ChangePeerResponse change_peer = 2;
  if (this->has_change_peer()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->change_peer_);
  }

  // optional .raft_messagepb.CompactLogResponse compact_log = 4;
  if (this->has_compact_log()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->compact_log_);
  }

  // optional .raft_messagepb.TransferLeaderResponse transfer_leader = 5;
  if (this->has_transfer_leader()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->transfer_leader_);
  }

  // optional .raft_messagepb.SplitResponse split = 10;
  if (this->has_split()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->split_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AdminResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:raft_messagepb.AdminResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const AdminResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const AdminResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:raft_messagepb.AdminResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:raft_messagepb.AdminResponse)
    MergeFrom(*source);
  }
}

void AdminResponse::MergeFrom(const AdminResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:raft_messagepb.AdminResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.cmd_type() != 0) {
    set_cmd_type(from.cmd_type());
  }
  if (from.has_change_peer()) {
    mutable_change_peer()->::raft_messagepb::ChangePeerResponse::MergeFrom(from.change_peer());
  }
  if (from.has_compact_log()) {
    mutable_compact_log()->::raft_messagepb::CompactLogResponse::MergeFrom(from.compact_log());
  }
  if (from.has_transfer_leader()) {
    mutable_transfer_leader()->::raft_messagepb::TransferLeaderResponse::MergeFrom(from.transfer_leader());
  }
  if (from.has_split()) {
    mutable_split()->::raft_messagepb::SplitResponse::MergeFrom(from.split());
  }
}

void AdminResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:raft_messagepb.AdminResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AdminResponse::CopyFrom(const AdminResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:raft_messagepb.AdminResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AdminResponse::IsInitialized() const {

  return true;
}

void AdminResponse::Swap(AdminResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AdminResponse::InternalSwap(AdminResponse* other) {
  std::swap(cmd_type_, other->cmd_type_);
  std::swap(change_peer_, other->change_peer_);
  std::swap(compact_log_, other->compact_log_);
  std::swap(transfer_leader_, other->transfer_leader_);
  std::swap(split_, other->split_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AdminResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AdminResponse_descriptor_;
  metadata.reflection = AdminResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AdminResponse

// optional .raft_messagepb.AdminCmdType cmd_type = 1;
void AdminResponse::clear_cmd_type() {
  cmd_type_ = 0;
}
 ::raft_messagepb::AdminCmdType AdminResponse::cmd_type() const {
  // @@protoc_insertion_point(field_get:raft_messagepb.AdminResponse.cmd_type)
  return static_cast< ::raft_messagepb::AdminCmdType >(cmd_type_);
}
 void AdminResponse::set_cmd_type(::raft_messagepb::AdminCmdType value) {
  
  cmd_type_ = value;
  // @@protoc_insertion_point(field_set:raft_messagepb.AdminResponse.cmd_type)
}

// optional .raft_messagepb.ChangePeerResponse change_peer = 2;
bool AdminResponse::has_change_peer() const {
  return !_is_default_instance_ && change_peer_ != NULL;
}
void AdminResponse::clear_change_peer() {
  if (GetArenaNoVirtual() == NULL && change_peer_ != NULL) delete change_peer_;
  change_peer_ = NULL;
}
const ::raft_messagepb::ChangePeerResponse& AdminResponse::change_peer() const {
  // @@protoc_insertion_point(field_get:raft_messagepb.AdminResponse.change_peer)
  return change_peer_ != NULL ? *change_peer_ : *default_instance_->change_peer_;
}
::raft_messagepb::ChangePeerResponse* AdminResponse::mutable_change_peer() {
  
  if (change_peer_ == NULL) {
    change_peer_ = new ::raft_messagepb::ChangePeerResponse;
  }
  // @@protoc_insertion_point(field_mutable:raft_messagepb.AdminResponse.change_peer)
  return change_peer_;
}
::raft_messagepb::ChangePeerResponse* AdminResponse::release_change_peer() {
  // @@protoc_insertion_point(field_release:raft_messagepb.AdminResponse.change_peer)
  
  ::raft_messagepb::ChangePeerResponse* temp = change_peer_;
  change_peer_ = NULL;
  return temp;
}
void AdminResponse::set_allocated_change_peer(::raft_messagepb::ChangePeerResponse* change_peer) {
  delete change_peer_;
  change_peer_ = change_peer;
  if (change_peer) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:raft_messagepb.AdminResponse.change_peer)
}

// optional .raft_messagepb.CompactLogResponse compact_log = 4;
bool AdminResponse::has_compact_log() const {
  return !_is_default_instance_ && compact_log_ != NULL;
}
void AdminResponse::clear_compact_log() {
  if (GetArenaNoVirtual() == NULL && compact_log_ != NULL) delete compact_log_;
  compact_log_ = NULL;
}
const ::raft_messagepb::CompactLogResponse& AdminResponse::compact_log() const {
  // @@protoc_insertion_point(field_get:raft_messagepb.AdminResponse.compact_log)
  return compact_log_ != NULL ? *compact_log_ : *default_instance_->compact_log_;
}
::raft_messagepb::CompactLogResponse* AdminResponse::mutable_compact_log() {
  
  if (compact_log_ == NULL) {
    compact_log_ = new ::raft_messagepb::CompactLogResponse;
  }
  // @@protoc_insertion_point(field_mutable:raft_messagepb.AdminResponse.compact_log)
  return compact_log_;
}
::raft_messagepb::CompactLogResponse* AdminResponse::release_compact_log() {
  // @@protoc_insertion_point(field_release:raft_messagepb.AdminResponse.compact_log)
  
  ::raft_messagepb::CompactLogResponse* temp = compact_log_;
  compact_log_ = NULL;
  return temp;
}
void AdminResponse::set_allocated_compact_log(::raft_messagepb::CompactLogResponse* compact_log) {
  delete compact_log_;
  compact_log_ = compact_log;
  if (compact_log) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:raft_messagepb.AdminResponse.compact_log)
}

// optional .raft_messagepb.TransferLeaderResponse transfer_leader = 5;
bool AdminResponse::has_transfer_leader() const {
  return !_is_default_instance_ && transfer_leader_ != NULL;
}
void AdminResponse::clear_transfer_leader() {
  if (GetArenaNoVirtual() == NULL && transfer_leader_ != NULL) delete transfer_leader_;
  transfer_leader_ = NULL;
}
const ::raft_messagepb::TransferLeaderResponse& AdminResponse::transfer_leader() const {
  // @@protoc_insertion_point(field_get:raft_messagepb.AdminResponse.transfer_leader)
  return transfer_leader_ != NULL ? *transfer_leader_ : *default_instance_->transfer_leader_;
}
::raft_messagepb::TransferLeaderResponse* AdminResponse::mutable_transfer_leader() {
  
  if (transfer_leader_ == NULL) {
    transfer_leader_ = new ::raft_messagepb::TransferLeaderResponse;
  }
  // @@protoc_insertion_point(field_mutable:raft_messagepb.AdminResponse.transfer_leader)
  return transfer_leader_;
}
::raft_messagepb::TransferLeaderResponse* AdminResponse::release_transfer_leader() {
  // @@protoc_insertion_point(field_release:raft_messagepb.AdminResponse.transfer_leader)
  
  ::raft_messagepb::TransferLeaderResponse* temp = transfer_leader_;
  transfer_leader_ = NULL;
  return temp;
}
void AdminResponse::set_allocated_transfer_leader(::raft_messagepb::TransferLeaderResponse* transfer_leader) {
  delete transfer_leader_;
  transfer_leader_ = transfer_leader;
  if (transfer_leader) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:raft_messagepb.AdminResponse.transfer_leader)
}

// optional .raft_messagepb.SplitResponse split = 10;
bool AdminResponse::has_split() const {
  return !_is_default_instance_ && split_ != NULL;
}
void AdminResponse::clear_split() {
  if (GetArenaNoVirtual() == NULL && split_ != NULL) delete split_;
  split_ = NULL;
}
const ::raft_messagepb::SplitResponse& AdminResponse::split() const {
  // @@protoc_insertion_point(field_get:raft_messagepb.AdminResponse.split)
  return split_ != NULL ? *split_ : *default_instance_->split_;
}
::raft_messagepb::SplitResponse* AdminResponse::mutable_split() {
  
  if (split_ == NULL) {
    split_ = new ::raft_messagepb::SplitResponse;
  }
  // @@protoc_insertion_point(field_mutable:raft_messagepb.AdminResponse.split)
  return split_;
}
::raft_messagepb::SplitResponse* AdminResponse::release_split() {
  // @@protoc_insertion_point(field_release:raft_messagepb.AdminResponse.split)
  
  ::raft_messagepb::SplitResponse* temp = split_;
  split_ = NULL;
  return temp;
}
void AdminResponse::set_allocated_split(::raft_messagepb::SplitResponse* split) {
  delete split_;
  split_ = split;
  if (split) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:raft_messagepb.AdminResponse.split)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RaftRequestHeader::kRegionIdFieldNumber;
const int RaftRequestHeader::kPeerFieldNumber;
const int RaftRequestHeader::kRegionEpochFieldNumber;
const int RaftRequestHeader::kTermFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RaftRequestHeader::RaftRequestHeader()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:raft_messagepb.RaftRequestHeader)
}

void RaftRequestHeader::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  peer_ = const_cast< ::metapb::Peer*>(&::metapb::Peer::default_instance());
  region_epoch_ = const_cast< ::metapb::RegionEpoch*>(&::metapb::RegionEpoch::default_instance());
}

RaftRequestHeader::RaftRequestHeader(const RaftRequestHeader& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:raft_messagepb.RaftRequestHeader)
}

void RaftRequestHeader::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  region_id_ = GOOGLE_ULONGLONG(0);
  peer_ = NULL;
  region_epoch_ = NULL;
  term_ = GOOGLE_ULONGLONG(0);
}

RaftRequestHeader::~RaftRequestHeader() {
  // @@protoc_insertion_point(destructor:raft_messagepb.RaftRequestHeader)
  SharedDtor();
}

void RaftRequestHeader::SharedDtor() {
  if (this != default_instance_) {
    delete peer_;
    delete region_epoch_;
  }
}

void RaftRequestHeader::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RaftRequestHeader::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RaftRequestHeader_descriptor_;
}

const RaftRequestHeader& RaftRequestHeader::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_raft_5fmessagepb_2eproto();
  return *default_instance_;
}

RaftRequestHeader* RaftRequestHeader::default_instance_ = NULL;

RaftRequestHeader* RaftRequestHeader::New(::google::protobuf::Arena* arena) const {
  RaftRequestHeader* n = new RaftRequestHeader;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RaftRequestHeader::Clear() {
// @@protoc_insertion_point(message_clear_start:raft_messagepb.RaftRequestHeader)
  region_id_ = GOOGLE_ULONGLONG(0);
  if (GetArenaNoVirtual() == NULL && peer_ != NULL) delete peer_;
  peer_ = NULL;
  if (GetArenaNoVirtual() == NULL && region_epoch_ != NULL) delete region_epoch_;
  region_epoch_ = NULL;
  term_ = GOOGLE_ULONGLONG(0);
}

bool RaftRequestHeader::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:raft_messagepb.RaftRequestHeader)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 region_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &region_id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_peer;
        break;
      }

      // optional .metapb.Peer peer = 2;
      case 2: {
        if (tag == 18) {
         parse_peer:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_peer()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_region_epoch;
        break;
      }

      // optional .metapb.RegionEpoch region_epoch = 4;
      case 4: {
        if (tag == 34) {
         parse_region_epoch:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_region_epoch()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_term;
        break;
      }

      // optional uint64 term = 5;
      case 5: {
        if (tag == 40) {
         parse_term:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &term_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:raft_messagepb.RaftRequestHeader)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:raft_messagepb.RaftRequestHeader)
  return false;
#undef DO_
}

void RaftRequestHeader::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:raft_messagepb.RaftRequestHeader)
  // optional uint64 region_id = 1;
  if (this->region_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->region_id(), output);
  }

  // optional .metapb.Peer peer = 2;
  if (this->has_peer()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->peer_, output);
  }

  // optional .metapb.RegionEpoch region_epoch = 4;
  if (this->has_region_epoch()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->region_epoch_, output);
  }

  // optional uint64 term = 5;
  if (this->term() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->term(), output);
  }

  // @@protoc_insertion_point(serialize_end:raft_messagepb.RaftRequestHeader)
}

::google::protobuf::uint8* RaftRequestHeader::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:raft_messagepb.RaftRequestHeader)
  // optional uint64 region_id = 1;
  if (this->region_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->region_id(), target);
  }

  // optional .metapb.Peer peer = 2;
  if (this->has_peer()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->peer_, false, target);
  }

  // optional .metapb.RegionEpoch region_epoch = 4;
  if (this->has_region_epoch()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->region_epoch_, false, target);
  }

  // optional uint64 term = 5;
  if (this->term() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->term(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:raft_messagepb.RaftRequestHeader)
  return target;
}

int RaftRequestHeader::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:raft_messagepb.RaftRequestHeader)
  int total_size = 0;

  // optional uint64 region_id = 1;
  if (this->region_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->region_id());
  }

  // optional .metapb.Peer peer = 2;
  if (this->has_peer()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->peer_);
  }

  // optional .metapb.RegionEpoch region_epoch = 4;
  if (this->has_region_epoch()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->region_epoch_);
  }

  // optional uint64 term = 5;
  if (this->term() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->term());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RaftRequestHeader::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:raft_messagepb.RaftRequestHeader)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const RaftRequestHeader* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const RaftRequestHeader>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:raft_messagepb.RaftRequestHeader)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:raft_messagepb.RaftRequestHeader)
    MergeFrom(*source);
  }
}

void RaftRequestHeader::MergeFrom(const RaftRequestHeader& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:raft_messagepb.RaftRequestHeader)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.region_id() != 0) {
    set_region_id(from.region_id());
  }
  if (from.has_peer()) {
    mutable_peer()->::metapb::Peer::MergeFrom(from.peer());
  }
  if (from.has_region_epoch()) {
    mutable_region_epoch()->::metapb::RegionEpoch::MergeFrom(from.region_epoch());
  }
  if (from.term() != 0) {
    set_term(from.term());
  }
}

void RaftRequestHeader::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:raft_messagepb.RaftRequestHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RaftRequestHeader::CopyFrom(const RaftRequestHeader& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:raft_messagepb.RaftRequestHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RaftRequestHeader::IsInitialized() const {

  return true;
}

void RaftRequestHeader::Swap(RaftRequestHeader* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RaftRequestHeader::InternalSwap(RaftRequestHeader* other) {
  std::swap(region_id_, other->region_id_);
  std::swap(peer_, other->peer_);
  std::swap(region_epoch_, other->region_epoch_);
  std::swap(term_, other->term_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RaftRequestHeader::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RaftRequestHeader_descriptor_;
  metadata.reflection = RaftRequestHeader_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RaftRequestHeader

// optional uint64 region_id = 1;
void RaftRequestHeader::clear_region_id() {
  region_id_ = GOOGLE_ULONGLONG(0);
}
 ::google::protobuf::uint64 RaftRequestHeader::region_id() const {
  // @@protoc_insertion_point(field_get:raft_messagepb.RaftRequestHeader.region_id)
  return region_id_;
}
 void RaftRequestHeader::set_region_id(::google::protobuf::uint64 value) {
  
  region_id_ = value;
  // @@protoc_insertion_point(field_set:raft_messagepb.RaftRequestHeader.region_id)
}

// optional .metapb.Peer peer = 2;
bool RaftRequestHeader::has_peer() const {
  return !_is_default_instance_ && peer_ != NULL;
}
void RaftRequestHeader::clear_peer() {
  if (GetArenaNoVirtual() == NULL && peer_ != NULL) delete peer_;
  peer_ = NULL;
}
const ::metapb::Peer& RaftRequestHeader::peer() const {
  // @@protoc_insertion_point(field_get:raft_messagepb.RaftRequestHeader.peer)
  return peer_ != NULL ? *peer_ : *default_instance_->peer_;
}
::metapb::Peer* RaftRequestHeader::mutable_peer() {
  
  if (peer_ == NULL) {
    peer_ = new ::metapb::Peer;
  }
  // @@protoc_insertion_point(field_mutable:raft_messagepb.RaftRequestHeader.peer)
  return peer_;
}
::metapb::Peer* RaftRequestHeader::release_peer() {
  // @@protoc_insertion_point(field_release:raft_messagepb.RaftRequestHeader.peer)
  
  ::metapb::Peer* temp = peer_;
  peer_ = NULL;
  return temp;
}
void RaftRequestHeader::set_allocated_peer(::metapb::Peer* peer) {
  delete peer_;
  peer_ = peer;
  if (peer) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:raft_messagepb.RaftRequestHeader.peer)
}

// optional .metapb.RegionEpoch region_epoch = 4;
bool RaftRequestHeader::has_region_epoch() const {
  return !_is_default_instance_ && region_epoch_ != NULL;
}
void RaftRequestHeader::clear_region_epoch() {
  if (GetArenaNoVirtual() == NULL && region_epoch_ != NULL) delete region_epoch_;
  region_epoch_ = NULL;
}
const ::metapb::RegionEpoch& RaftRequestHeader::region_epoch() const {
  // @@protoc_insertion_point(field_get:raft_messagepb.RaftRequestHeader.region_epoch)
  return region_epoch_ != NULL ? *region_epoch_ : *default_instance_->region_epoch_;
}
::metapb::RegionEpoch* RaftRequestHeader::mutable_region_epoch() {
  
  if (region_epoch_ == NULL) {
    region_epoch_ = new ::metapb::RegionEpoch;
  }
  // @@protoc_insertion_point(field_mutable:raft_messagepb.RaftRequestHeader.region_epoch)
  return region_epoch_;
}
::metapb::RegionEpoch* RaftRequestHeader::release_region_epoch() {
  // @@protoc_insertion_point(field_release:raft_messagepb.RaftRequestHeader.region_epoch)
  
  ::metapb::RegionEpoch* temp = region_epoch_;
  region_epoch_ = NULL;
  return temp;
}
void RaftRequestHeader::set_allocated_region_epoch(::metapb::RegionEpoch* region_epoch) {
  delete region_epoch_;
  region_epoch_ = region_epoch;
  if (region_epoch) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:raft_messagepb.RaftRequestHeader.region_epoch)
}

// optional uint64 term = 5;
void RaftRequestHeader::clear_term() {
  term_ = GOOGLE_ULONGLONG(0);
}
 ::google::protobuf::uint64 RaftRequestHeader::term() const {
  // @@protoc_insertion_point(field_get:raft_messagepb.RaftRequestHeader.term)
  return term_;
}
 void RaftRequestHeader::set_term(::google::protobuf::uint64 value) {
  
  term_ = value;
  // @@protoc_insertion_point(field_set:raft_messagepb.RaftRequestHeader.term)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RaftResponseHeader::kUuidFieldNumber;
const int RaftResponseHeader::kCurrentTermFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RaftResponseHeader::RaftResponseHeader()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:raft_messagepb.RaftResponseHeader)
}

void RaftResponseHeader::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

RaftResponseHeader::RaftResponseHeader(const RaftResponseHeader& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:raft_messagepb.RaftResponseHeader)
}

void RaftResponseHeader::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  uuid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  current_term_ = GOOGLE_ULONGLONG(0);
}

RaftResponseHeader::~RaftResponseHeader() {
  // @@protoc_insertion_point(destructor:raft_messagepb.RaftResponseHeader)
  SharedDtor();
}

void RaftResponseHeader::SharedDtor() {
  uuid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void RaftResponseHeader::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RaftResponseHeader::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RaftResponseHeader_descriptor_;
}

const RaftResponseHeader& RaftResponseHeader::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_raft_5fmessagepb_2eproto();
  return *default_instance_;
}

RaftResponseHeader* RaftResponseHeader::default_instance_ = NULL;

RaftResponseHeader* RaftResponseHeader::New(::google::protobuf::Arena* arena) const {
  RaftResponseHeader* n = new RaftResponseHeader;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RaftResponseHeader::Clear() {
// @@protoc_insertion_point(message_clear_start:raft_messagepb.RaftResponseHeader)
  uuid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  current_term_ = GOOGLE_ULONGLONG(0);
}

bool RaftResponseHeader::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:raft_messagepb.RaftResponseHeader)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes uuid = 2;
      case 2: {
        if (tag == 18) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_uuid()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_current_term;
        break;
      }

      // optional uint64 current_term = 3;
      case 3: {
        if (tag == 24) {
         parse_current_term:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &current_term_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:raft_messagepb.RaftResponseHeader)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:raft_messagepb.RaftResponseHeader)
  return false;
#undef DO_
}

void RaftResponseHeader::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:raft_messagepb.RaftResponseHeader)
  // optional bytes uuid = 2;
  if (this->uuid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->uuid(), output);
  }

  // optional uint64 current_term = 3;
  if (this->current_term() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->current_term(), output);
  }

  // @@protoc_insertion_point(serialize_end:raft_messagepb.RaftResponseHeader)
}

::google::protobuf::uint8* RaftResponseHeader::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:raft_messagepb.RaftResponseHeader)
  // optional bytes uuid = 2;
  if (this->uuid().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->uuid(), target);
  }

  // optional uint64 current_term = 3;
  if (this->current_term() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->current_term(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:raft_messagepb.RaftResponseHeader)
  return target;
}

int RaftResponseHeader::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:raft_messagepb.RaftResponseHeader)
  int total_size = 0;

  // optional bytes uuid = 2;
  if (this->uuid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->uuid());
  }

  // optional uint64 current_term = 3;
  if (this->current_term() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->current_term());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RaftResponseHeader::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:raft_messagepb.RaftResponseHeader)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const RaftResponseHeader* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const RaftResponseHeader>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:raft_messagepb.RaftResponseHeader)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:raft_messagepb.RaftResponseHeader)
    MergeFrom(*source);
  }
}

void RaftResponseHeader::MergeFrom(const RaftResponseHeader& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:raft_messagepb.RaftResponseHeader)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.uuid().size() > 0) {

    uuid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.uuid_);
  }
  if (from.current_term() != 0) {
    set_current_term(from.current_term());
  }
}

void RaftResponseHeader::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:raft_messagepb.RaftResponseHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RaftResponseHeader::CopyFrom(const RaftResponseHeader& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:raft_messagepb.RaftResponseHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RaftResponseHeader::IsInitialized() const {

  return true;
}

void RaftResponseHeader::Swap(RaftResponseHeader* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RaftResponseHeader::InternalSwap(RaftResponseHeader* other) {
  uuid_.Swap(&other->uuid_);
  std::swap(current_term_, other->current_term_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RaftResponseHeader::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RaftResponseHeader_descriptor_;
  metadata.reflection = RaftResponseHeader_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RaftResponseHeader

// optional bytes uuid = 2;
void RaftResponseHeader::clear_uuid() {
  uuid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& RaftResponseHeader::uuid() const {
  // @@protoc_insertion_point(field_get:raft_messagepb.RaftResponseHeader.uuid)
  return uuid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RaftResponseHeader::set_uuid(const ::std::string& value) {
  
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:raft_messagepb.RaftResponseHeader.uuid)
}
 void RaftResponseHeader::set_uuid(const char* value) {
  
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:raft_messagepb.RaftResponseHeader.uuid)
}
 void RaftResponseHeader::set_uuid(const void* value, size_t size) {
  
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:raft_messagepb.RaftResponseHeader.uuid)
}
 ::std::string* RaftResponseHeader::mutable_uuid() {
  
  // @@protoc_insertion_point(field_mutable:raft_messagepb.RaftResponseHeader.uuid)
  return uuid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* RaftResponseHeader::release_uuid() {
  // @@protoc_insertion_point(field_release:raft_messagepb.RaftResponseHeader.uuid)
  
  return uuid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RaftResponseHeader::set_allocated_uuid(::std::string* uuid) {
  if (uuid != NULL) {
    
  } else {
    
  }
  uuid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), uuid);
  // @@protoc_insertion_point(field_set_allocated:raft_messagepb.RaftResponseHeader.uuid)
}

// optional uint64 current_term = 3;
void RaftResponseHeader::clear_current_term() {
  current_term_ = GOOGLE_ULONGLONG(0);
}
 ::google::protobuf::uint64 RaftResponseHeader::current_term() const {
  // @@protoc_insertion_point(field_get:raft_messagepb.RaftResponseHeader.current_term)
  return current_term_;
}
 void RaftResponseHeader::set_current_term(::google::protobuf::uint64 value) {
  
  current_term_ = value;
  // @@protoc_insertion_point(field_set:raft_messagepb.RaftResponseHeader.current_term)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RaftCmdRequest::kHeaderFieldNumber;
const int RaftCmdRequest::kRequestsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RaftCmdRequest::RaftCmdRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:raft_messagepb.RaftCmdRequest)
}

void RaftCmdRequest::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  header_ = const_cast< ::raft_messagepb::RaftRequestHeader*>(&::raft_messagepb::RaftRequestHeader::default_instance());
}

RaftCmdRequest::RaftCmdRequest(const RaftCmdRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:raft_messagepb.RaftCmdRequest)
}

void RaftCmdRequest::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  header_ = NULL;
}

RaftCmdRequest::~RaftCmdRequest() {
  // @@protoc_insertion_point(destructor:raft_messagepb.RaftCmdRequest)
  SharedDtor();
}

void RaftCmdRequest::SharedDtor() {
  if (this != default_instance_) {
    delete header_;
  }
}

void RaftCmdRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RaftCmdRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RaftCmdRequest_descriptor_;
}

const RaftCmdRequest& RaftCmdRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_raft_5fmessagepb_2eproto();
  return *default_instance_;
}

RaftCmdRequest* RaftCmdRequest::default_instance_ = NULL;

RaftCmdRequest* RaftCmdRequest::New(::google::protobuf::Arena* arena) const {
  RaftCmdRequest* n = new RaftCmdRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RaftCmdRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:raft_messagepb.RaftCmdRequest)
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
  requests_.Clear();
}

bool RaftCmdRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:raft_messagepb.RaftCmdRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .raft_messagepb.RaftRequestHeader header = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_requests;
        break;
      }

      // repeated .raft_messagepb.Request requests = 2;
      case 2: {
        if (tag == 18) {
         parse_requests:
          DO_(input->IncrementRecursionDepth());
         parse_loop_requests:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_requests()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_requests;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:raft_messagepb.RaftCmdRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:raft_messagepb.RaftCmdRequest)
  return false;
#undef DO_
}

void RaftCmdRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:raft_messagepb.RaftCmdRequest)
  // optional .raft_messagepb.RaftRequestHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // repeated .raft_messagepb.Request requests = 2;
  for (unsigned int i = 0, n = this->requests_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->requests(i), output);
  }

  // @@protoc_insertion_point(serialize_end:raft_messagepb.RaftCmdRequest)
}

::google::protobuf::uint8* RaftCmdRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:raft_messagepb.RaftCmdRequest)
  // optional .raft_messagepb.RaftRequestHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, false, target);
  }

  // repeated .raft_messagepb.Request requests = 2;
  for (unsigned int i = 0, n = this->requests_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->requests(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:raft_messagepb.RaftCmdRequest)
  return target;
}

int RaftCmdRequest::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:raft_messagepb.RaftCmdRequest)
  int total_size = 0;

  // optional .raft_messagepb.RaftRequestHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  // repeated .raft_messagepb.Request requests = 2;
  total_size += 1 * this->requests_size();
  for (int i = 0; i < this->requests_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->requests(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RaftCmdRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:raft_messagepb.RaftCmdRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const RaftCmdRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const RaftCmdRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:raft_messagepb.RaftCmdRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:raft_messagepb.RaftCmdRequest)
    MergeFrom(*source);
  }
}

void RaftCmdRequest::MergeFrom(const RaftCmdRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:raft_messagepb.RaftCmdRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  requests_.MergeFrom(from.requests_);
  if (from.has_header()) {
    mutable_header()->::raft_messagepb::RaftRequestHeader::MergeFrom(from.header());
  }
}

void RaftCmdRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:raft_messagepb.RaftCmdRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RaftCmdRequest::CopyFrom(const RaftCmdRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:raft_messagepb.RaftCmdRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RaftCmdRequest::IsInitialized() const {

  return true;
}

void RaftCmdRequest::Swap(RaftCmdRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RaftCmdRequest::InternalSwap(RaftCmdRequest* other) {
  std::swap(header_, other->header_);
  requests_.UnsafeArenaSwap(&other->requests_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RaftCmdRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RaftCmdRequest_descriptor_;
  metadata.reflection = RaftCmdRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RaftCmdRequest

// optional .raft_messagepb.RaftRequestHeader header = 1;
bool RaftCmdRequest::has_header() const {
  return !_is_default_instance_ && header_ != NULL;
}
void RaftCmdRequest::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::raft_messagepb::RaftRequestHeader& RaftCmdRequest::header() const {
  // @@protoc_insertion_point(field_get:raft_messagepb.RaftCmdRequest.header)
  return header_ != NULL ? *header_ : *default_instance_->header_;
}
::raft_messagepb::RaftRequestHeader* RaftCmdRequest::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::raft_messagepb::RaftRequestHeader;
  }
  // @@protoc_insertion_point(field_mutable:raft_messagepb.RaftCmdRequest.header)
  return header_;
}
::raft_messagepb::RaftRequestHeader* RaftCmdRequest::release_header() {
  // @@protoc_insertion_point(field_release:raft_messagepb.RaftCmdRequest.header)
  
  ::raft_messagepb::RaftRequestHeader* temp = header_;
  header_ = NULL;
  return temp;
}
void RaftCmdRequest::set_allocated_header(::raft_messagepb::RaftRequestHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:raft_messagepb.RaftCmdRequest.header)
}

// repeated .raft_messagepb.Request requests = 2;
int RaftCmdRequest::requests_size() const {
  return requests_.size();
}
void RaftCmdRequest::clear_requests() {
  requests_.Clear();
}
const ::raft_messagepb::Request& RaftCmdRequest::requests(int index) const {
  // @@protoc_insertion_point(field_get:raft_messagepb.RaftCmdRequest.requests)
  return requests_.Get(index);
}
::raft_messagepb::Request* RaftCmdRequest::mutable_requests(int index) {
  // @@protoc_insertion_point(field_mutable:raft_messagepb.RaftCmdRequest.requests)
  return requests_.Mutable(index);
}
::raft_messagepb::Request* RaftCmdRequest::add_requests() {
  // @@protoc_insertion_point(field_add:raft_messagepb.RaftCmdRequest.requests)
  return requests_.Add();
}
::google::protobuf::RepeatedPtrField< ::raft_messagepb::Request >*
RaftCmdRequest::mutable_requests() {
  // @@protoc_insertion_point(field_mutable_list:raft_messagepb.RaftCmdRequest.requests)
  return &requests_;
}
const ::google::protobuf::RepeatedPtrField< ::raft_messagepb::Request >&
RaftCmdRequest::requests() const {
  // @@protoc_insertion_point(field_list:raft_messagepb.RaftCmdRequest.requests)
  return requests_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RaftCmdResponse::kHeaderFieldNumber;
const int RaftCmdResponse::kResponsesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RaftCmdResponse::RaftCmdResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:raft_messagepb.RaftCmdResponse)
}

void RaftCmdResponse::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  header_ = const_cast< ::raft_messagepb::RaftResponseHeader*>(&::raft_messagepb::RaftResponseHeader::default_instance());
}

RaftCmdResponse::RaftCmdResponse(const RaftCmdResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:raft_messagepb.RaftCmdResponse)
}

void RaftCmdResponse::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  header_ = NULL;
}

RaftCmdResponse::~RaftCmdResponse() {
  // @@protoc_insertion_point(destructor:raft_messagepb.RaftCmdResponse)
  SharedDtor();
}

void RaftCmdResponse::SharedDtor() {
  if (this != default_instance_) {
    delete header_;
  }
}

void RaftCmdResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RaftCmdResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RaftCmdResponse_descriptor_;
}

const RaftCmdResponse& RaftCmdResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_raft_5fmessagepb_2eproto();
  return *default_instance_;
}

RaftCmdResponse* RaftCmdResponse::default_instance_ = NULL;

RaftCmdResponse* RaftCmdResponse::New(::google::protobuf::Arena* arena) const {
  RaftCmdResponse* n = new RaftCmdResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RaftCmdResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:raft_messagepb.RaftCmdResponse)
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
  responses_.Clear();
}

bool RaftCmdResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:raft_messagepb.RaftCmdResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .raft_messagepb.RaftResponseHeader header = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_responses;
        break;
      }

      // repeated .raft_messagepb.Response responses = 2;
      case 2: {
        if (tag == 18) {
         parse_responses:
          DO_(input->IncrementRecursionDepth());
         parse_loop_responses:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_responses()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_responses;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:raft_messagepb.RaftCmdResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:raft_messagepb.RaftCmdResponse)
  return false;
#undef DO_
}

void RaftCmdResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:raft_messagepb.RaftCmdResponse)
  // optional .raft_messagepb.RaftResponseHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // repeated .raft_messagepb.Response responses = 2;
  for (unsigned int i = 0, n = this->responses_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->responses(i), output);
  }

  // @@protoc_insertion_point(serialize_end:raft_messagepb.RaftCmdResponse)
}

::google::protobuf::uint8* RaftCmdResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:raft_messagepb.RaftCmdResponse)
  // optional .raft_messagepb.RaftResponseHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, false, target);
  }

  // repeated .raft_messagepb.Response responses = 2;
  for (unsigned int i = 0, n = this->responses_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->responses(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:raft_messagepb.RaftCmdResponse)
  return target;
}

int RaftCmdResponse::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:raft_messagepb.RaftCmdResponse)
  int total_size = 0;

  // optional .raft_messagepb.RaftResponseHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  // repeated .raft_messagepb.Response responses = 2;
  total_size += 1 * this->responses_size();
  for (int i = 0; i < this->responses_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->responses(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RaftCmdResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:raft_messagepb.RaftCmdResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const RaftCmdResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const RaftCmdResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:raft_messagepb.RaftCmdResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:raft_messagepb.RaftCmdResponse)
    MergeFrom(*source);
  }
}

void RaftCmdResponse::MergeFrom(const RaftCmdResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:raft_messagepb.RaftCmdResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  responses_.MergeFrom(from.responses_);
  if (from.has_header()) {
    mutable_header()->::raft_messagepb::RaftResponseHeader::MergeFrom(from.header());
  }
}

void RaftCmdResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:raft_messagepb.RaftCmdResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RaftCmdResponse::CopyFrom(const RaftCmdResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:raft_messagepb.RaftCmdResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RaftCmdResponse::IsInitialized() const {

  return true;
}

void RaftCmdResponse::Swap(RaftCmdResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RaftCmdResponse::InternalSwap(RaftCmdResponse* other) {
  std::swap(header_, other->header_);
  responses_.UnsafeArenaSwap(&other->responses_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RaftCmdResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RaftCmdResponse_descriptor_;
  metadata.reflection = RaftCmdResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RaftCmdResponse

// optional .raft_messagepb.RaftResponseHeader header = 1;
bool RaftCmdResponse::has_header() const {
  return !_is_default_instance_ && header_ != NULL;
}
void RaftCmdResponse::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::raft_messagepb::RaftResponseHeader& RaftCmdResponse::header() const {
  // @@protoc_insertion_point(field_get:raft_messagepb.RaftCmdResponse.header)
  return header_ != NULL ? *header_ : *default_instance_->header_;
}
::raft_messagepb::RaftResponseHeader* RaftCmdResponse::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::raft_messagepb::RaftResponseHeader;
  }
  // @@protoc_insertion_point(field_mutable:raft_messagepb.RaftCmdResponse.header)
  return header_;
}
::raft_messagepb::RaftResponseHeader* RaftCmdResponse::release_header() {
  // @@protoc_insertion_point(field_release:raft_messagepb.RaftCmdResponse.header)
  
  ::raft_messagepb::RaftResponseHeader* temp = header_;
  header_ = NULL;
  return temp;
}
void RaftCmdResponse::set_allocated_header(::raft_messagepb::RaftResponseHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:raft_messagepb.RaftCmdResponse.header)
}

// repeated .raft_messagepb.Response responses = 2;
int RaftCmdResponse::responses_size() const {
  return responses_.size();
}
void RaftCmdResponse::clear_responses() {
  responses_.Clear();
}
const ::raft_messagepb::Response& RaftCmdResponse::responses(int index) const {
  // @@protoc_insertion_point(field_get:raft_messagepb.RaftCmdResponse.responses)
  return responses_.Get(index);
}
::raft_messagepb::Response* RaftCmdResponse::mutable_responses(int index) {
  // @@protoc_insertion_point(field_mutable:raft_messagepb.RaftCmdResponse.responses)
  return responses_.Mutable(index);
}
::raft_messagepb::Response* RaftCmdResponse::add_responses() {
  // @@protoc_insertion_point(field_add:raft_messagepb.RaftCmdResponse.responses)
  return responses_.Add();
}
::google::protobuf::RepeatedPtrField< ::raft_messagepb::Response >*
RaftCmdResponse::mutable_responses() {
  // @@protoc_insertion_point(field_mutable_list:raft_messagepb.RaftCmdResponse.responses)
  return &responses_;
}
const ::google::protobuf::RepeatedPtrField< ::raft_messagepb::Response >&
RaftCmdResponse::responses() const {
  // @@protoc_insertion_point(field_list:raft_messagepb.RaftCmdResponse.responses)
  return responses_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace raft_messagepb

// @@protoc_insertion_point(global_scope)
