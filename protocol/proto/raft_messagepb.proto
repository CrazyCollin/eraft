syntax = "proto3";
package raft_messagepb;

import "eraftpb.proto";
import "metapb.proto";

enum RaftMessageType {
    RaftMsgNormal = 0;
    RaftMsgClientCmd = 1;
    RaftTransferLeader = 2;
    RaftConfChange = 3;
    RaftSplitRegion = 4;
}

message RawPutRequest {
    bytes key = 1;
    bytes value = 2;
    string cf = 3;
    uint64 id = 4;
    uint32 type = 5;
}

// The message sent between Raft peer, it wraps the raft meessage with some meta information.
message RaftMessage {
    uint64 region_id = 1;
    metapb.Peer from_peer = 2;
    metapb.Peer to_peer = 3;
    eraftpb.Message message = 4;
    metapb.RegionEpoch region_epoch = 5;
    // true means to_peer is a tombstone peer and it should remove itself.
    bool is_tombstone = 6;
    // Region key range [start_key, end_key). (Used in 3B)
    bytes start_key = 7;
    bytes end_key = 8;
    bytes data = 9;
    RaftMessageType raft_msg_type = 10;
}

// Used to store the persistent state for Raft, including the hard state for raft and the last index of the raft log.
message RaftLocalState {
    eraftpb.HardState hard_state = 1;
    uint64 last_index = 2;
    uint64 last_term = 3;
}

// Used to store the persistent state for Raft state machine.
message RaftApplyState {
    // Record the applied index of the state machine to make sure
    // not apply any index twice after restart.
    uint64 applied_index = 1;
    // Record the index and term of the last raft log that have been truncated. (Used in 2C)
    RaftTruncatedState truncated_state = 2; 
}

// The truncated state for Raft log compaction.
message RaftTruncatedState {
    uint64 index = 1;
    uint64 term = 2;
}

// Used to store Region information and the corresponding Peer state on this Store.
message RegionLocalState {
    PeerState state = 1;
    metapb.Region region = 2;
}

// Normal indicates that this Peer is normal;
// Tombstone shows that this Peer has been removed from Region and cannot join in Raft Group.
enum PeerState {
    Normal = 0;
    Tombstone = 2;
}

// The persistent identification for Store.
// It used to recover the store id after restart.
message StoreIdent {
    uint64 cluster_id = 1;
    uint64 store_id = 2;
    string addr = 3;
}

// Snapshot sending and reciveing related messages.
// Not included in the course scope.
message KeyValue {
    bytes key      = 1;
    bytes value    = 2;
}


message GetRequest {
    string cf = 1;
    bytes key = 2;
}

message GetResponse {
    bytes value = 1;
}

message PutRequest {
    string cf = 1;
    bytes key = 2;
    bytes value = 3;
}

message PutResponse {}

message DeleteRequest {
    string cf = 1;
    bytes key = 2;
}

message DeleteResponse {}


enum CmdType {
    Invalid = 0;
    Get = 1;
    Put = 3;
    Delete = 4;
    Snap = 5;
}

message Request {
    CmdType cmd_type = 1;
    GetRequest get = 2;
    PutRequest put = 4;
    DeleteRequest delete = 5;
}

message Response {
    CmdType cmd_type = 1;
    GetResponse get = 2;
    PutResponse put = 4;
    DeleteResponse delete = 5;
}

message ChangePeerRequest {
    // This can be only called in internal Raftstore now.
    eraftpb.ConfChangeType change_type = 1;
    metapb.Peer peer = 2;
}

message ChangePeerResponse {
    metapb.Region region = 1;
}

message SplitRequest {
    // This can be only called in internal Raftstore now.
    // The split_key has to exist in the splitting region.
    bytes split_key = 1;
    // We split the region into two. The first uses the origin 
    // parent region id, and the second uses the new_region_id.
    // We must guarantee that the new_region_id is global unique.
    uint64 new_region_id = 2;
    // The peer ids for the new split region.
    repeated uint64 new_peer_ids = 3;
}

message SplitResponse {
    // SplitResponse contains the region where specific keys have split into.
    repeated metapb.Region regions = 1;
}

message CompactLogRequest {
    uint64 compact_index = 1;
    uint64 compact_term = 2;
}

message CompactLogResponse {}

message TransferLeaderRequest {
    metapb.Peer peer = 1;
}

message TransferLeaderResponse {}

enum AdminCmdType {
    InvalidAdmin = 0;
    ChangePeer = 1;
    CompactLog = 3;
    TransferLeader = 4;
    Split = 10;
}

message AdminRequest {
    AdminCmdType cmd_type = 1;
    ChangePeerRequest change_peer = 2;
    CompactLogRequest compact_log = 4;
    TransferLeaderRequest transfer_leader = 5;
    SplitRequest split = 10;
}

message AdminResponse {
    AdminCmdType cmd_type = 1;
    ChangePeerResponse change_peer = 2;
    CompactLogResponse compact_log = 4;
    TransferLeaderResponse transfer_leader = 5;
    SplitResponse split = 10;
}

message RaftRequestHeader {
    uint64 region_id = 1;
    metapb.Peer peer = 2;
    metapb.RegionEpoch region_epoch = 4;
    uint64 term = 5;
}

message RaftResponseHeader {
    bytes uuid = 2;
    uint64 current_term = 3;
}

message RaftCmdRequest {
    RaftRequestHeader header = 1;
    // We can't enclose normal requests and administrator request
    // at same time. 
    repeated Request requests = 2;
}

message RaftCmdResponse {
    RaftResponseHeader header = 1;
    repeated Response responses = 2;
}
